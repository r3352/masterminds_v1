"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql";
exports.ids = ["vendor-chunks/graphql"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphql/error/GraphQLError.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/error/GraphQLError.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.GraphQLError = void 0;\nexports.formatError = formatError;\nexports.printError = printError;\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _location = __webpack_require__(/*! ../language/location.js */ \"(ssr)/./node_modules/graphql/language/location.js\");\n\nvar _printLocation = __webpack_require__(/*! ../language/printLocation.js */ \"(ssr)/./node_modules/graphql/language/printLocation.js\");\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nclass GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => (0, _location.getLocation)(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) =>\n            (0, _location.getLocation)(loc.source, loc.start),\n          );\n    const originalExtensions = (0, _isObjectLike.isObjectLike)(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + (0, _printLocation.printLocation)(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output +=\n          '\\n\\n' +\n          (0, _printLocation.printSourceLocation)(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nexports.GraphQLError = GraphQLError;\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nfunction printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nfunction formatError(error) {\n  return error.toJSON();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/error/GraphQLError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/error/index.js":
/*!*********************************************!*\
  !*** ./node_modules/graphql/error/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"GraphQLError\", ({\n  enumerable: true,\n  get: function () {\n    return _GraphQLError.GraphQLError;\n  },\n}));\nObject.defineProperty(exports, \"formatError\", ({\n  enumerable: true,\n  get: function () {\n    return _GraphQLError.formatError;\n  },\n}));\nObject.defineProperty(exports, \"locatedError\", ({\n  enumerable: true,\n  get: function () {\n    return _locatedError.locatedError;\n  },\n}));\nObject.defineProperty(exports, \"printError\", ({\n  enumerable: true,\n  get: function () {\n    return _GraphQLError.printError;\n  },\n}));\nObject.defineProperty(exports, \"syntaxError\", ({\n  enumerable: true,\n  get: function () {\n    return _syntaxError.syntaxError;\n  },\n}));\n\nvar _GraphQLError = __webpack_require__(/*! ./GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _syntaxError = __webpack_require__(/*! ./syntaxError.js */ \"(ssr)/./node_modules/graphql/error/syntaxError.js\");\n\nvar _locatedError = __webpack_require__(/*! ./locatedError.js */ \"(ssr)/./node_modules/graphql/error/locatedError.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDO0FBQ0YsZ0RBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDOztBQUVGLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFtQjs7QUFFL0MsbUJBQW1CLG1CQUFPLENBQUMsMkVBQWtCOztBQUU3QyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL2luZGV4LmpzPzAxMjciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0dyYXBoUUxFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2Zvcm1hdEVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0dyYXBoUUxFcnJvci5mb3JtYXRFcnJvcjtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdsb2NhdGVkRXJyb3InLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfbG9jYXRlZEVycm9yLmxvY2F0ZWRFcnJvcjtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwcmludEVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0dyYXBoUUxFcnJvci5wcmludEVycm9yO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3N5bnRheEVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3N5bnRheEVycm9yLnN5bnRheEVycm9yO1xuICB9LFxufSk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9zeW50YXhFcnJvciA9IHJlcXVpcmUoJy4vc3ludGF4RXJyb3IuanMnKTtcblxudmFyIF9sb2NhdGVkRXJyb3IgPSByZXF1aXJlKCcuL2xvY2F0ZWRFcnJvci5qcycpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/error/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/error/locatedError.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/error/locatedError.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.locatedError = locatedError;\n\nvar _toError = __webpack_require__(/*! ../jsutils/toError.js */ \"(ssr)/./node_modules/graphql/jsutils/toError.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ./GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nfunction locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = (0, _toError.toError)(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new _GraphQLError.GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9sb2NhdGVkRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9COztBQUVwQixlQUFlLG1CQUFPLENBQUMsOEVBQXVCOztBQUU5QyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBbUI7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFpRTs7QUFFakU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL2xvY2F0ZWRFcnJvci5qcz80MzY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5sb2NhdGVkRXJyb3IgPSBsb2NhdGVkRXJyb3I7XG5cbnZhciBfdG9FcnJvciA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvdG9FcnJvci5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4vR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gYXJiaXRyYXJ5IHZhbHVlLCBwcmVzdW1hYmx5IHRocm93biB3aGlsZSBhdHRlbXB0aW5nIHRvIGV4ZWN1dGUgYVxuICogR3JhcGhRTCBvcGVyYXRpb24sIHByb2R1Y2UgYSBuZXcgR3JhcGhRTEVycm9yIGF3YXJlIG9mIHRoZSBsb2NhdGlvbiBpbiB0aGVcbiAqIGRvY3VtZW50IHJlc3BvbnNpYmxlIGZvciB0aGUgb3JpZ2luYWwgRXJyb3IuXG4gKi9cbmZ1bmN0aW9uIGxvY2F0ZWRFcnJvcihyYXdPcmlnaW5hbEVycm9yLCBub2RlcywgcGF0aCkge1xuICB2YXIgX25vZGVzO1xuXG4gIGNvbnN0IG9yaWdpbmFsRXJyb3IgPSAoMCwgX3RvRXJyb3IudG9FcnJvcikocmF3T3JpZ2luYWxFcnJvcik7IC8vIE5vdGU6IHRoaXMgdXNlcyBhIGJyYW5kLWNoZWNrIHRvIHN1cHBvcnQgR3JhcGhRTCBlcnJvcnMgb3JpZ2luYXRpbmcgZnJvbSBvdGhlciBjb250ZXh0cy5cblxuICBpZiAoaXNMb2NhdGVkR3JhcGhRTEVycm9yKG9yaWdpbmFsRXJyb3IpKSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsRXJyb3I7XG4gIH1cblxuICByZXR1cm4gbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKG9yaWdpbmFsRXJyb3IubWVzc2FnZSwge1xuICAgIG5vZGVzOlxuICAgICAgKF9ub2RlcyA9IG9yaWdpbmFsRXJyb3Iubm9kZXMpICE9PSBudWxsICYmIF9ub2RlcyAhPT0gdm9pZCAwXG4gICAgICAgID8gX25vZGVzXG4gICAgICAgIDogbm9kZXMsXG4gICAgc291cmNlOiBvcmlnaW5hbEVycm9yLnNvdXJjZSxcbiAgICBwb3NpdGlvbnM6IG9yaWdpbmFsRXJyb3IucG9zaXRpb25zLFxuICAgIHBhdGgsXG4gICAgb3JpZ2luYWxFcnJvcixcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTG9jYXRlZEdyYXBoUUxFcnJvcihlcnJvcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShlcnJvci5wYXRoKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/error/locatedError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/error/syntaxError.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/error/syntaxError.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.syntaxError = syntaxError;\n\nvar _GraphQLError = __webpack_require__(/*! ./GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\nfunction syntaxError(source, position, description) {\n  return new _GraphQLError.GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9zeW50YXhFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUI7O0FBRW5CLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFtQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxZQUFZO0FBQ3JFO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL3N5bnRheEVycm9yLmpzPzBmMmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnN5bnRheEVycm9yID0gc3ludGF4RXJyb3I7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhIEdyYXBoUUxFcnJvciByZXByZXNlbnRpbmcgYSBzeW50YXggZXJyb3IsIGNvbnRhaW5pbmcgdXNlZnVsXG4gKiBkZXNjcmlwdGl2ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ludGF4IGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgZGVzY3JpcHRpb24pIHtcbiAgcmV0dXJuIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihgU3ludGF4IEVycm9yOiAke2Rlc2NyaXB0aW9ufWAsIHtcbiAgICBzb3VyY2UsXG4gICAgcG9zaXRpb25zOiBbcG9zaXRpb25dLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/error/syntaxError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/execution/collectFields.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql/execution/collectFields.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.collectFields = collectFields;\nexports.collectSubfields = collectSubfields;\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\nvar _values = __webpack_require__(/*! ./values.js */ \"(ssr)/./node_modules/graphql/execution/values.js\");\n\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\nfunction collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nfunction collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case _kinds.Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case _kinds.Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = (0, _values.getDirectiveValues)(\n    _directives.GraphQLSkipDirective,\n    node,\n    variableValues,\n  );\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = (0, _values.getDirectiveValues)(\n    _directives.GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = (0, _typeFromAST.typeFromAST)(\n    schema,\n    typeConditionNode,\n  );\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if ((0, _definition.isAbstractType)(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/execution/collectFields.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/execution/execute.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/execution/execute.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.buildResolveInfo = buildResolveInfo;\nexports.defaultTypeResolver = exports.defaultFieldResolver = void 0;\nexports.execute = execute;\nexports.executeSync = executeSync;\nexports.getFieldDef = getFieldDef;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _isIterableObject = __webpack_require__(/*! ../jsutils/isIterableObject.js */ \"(ssr)/./node_modules/graphql/jsutils/isIterableObject.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _isPromise = __webpack_require__(/*! ../jsutils/isPromise.js */ \"(ssr)/./node_modules/graphql/jsutils/isPromise.js\");\n\nvar _memoize = __webpack_require__(/*! ../jsutils/memoize3.js */ \"(ssr)/./node_modules/graphql/jsutils/memoize3.js\");\n\nvar _Path = __webpack_require__(/*! ../jsutils/Path.js */ \"(ssr)/./node_modules/graphql/jsutils/Path.js\");\n\nvar _promiseForObject = __webpack_require__(/*! ../jsutils/promiseForObject.js */ \"(ssr)/./node_modules/graphql/jsutils/promiseForObject.js\");\n\nvar _promiseReduce = __webpack_require__(/*! ../jsutils/promiseReduce.js */ \"(ssr)/./node_modules/graphql/jsutils/promiseReduce.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _locatedError = __webpack_require__(/*! ../error/locatedError.js */ \"(ssr)/./node_modules/graphql/error/locatedError.js\");\n\nvar _ast = __webpack_require__(/*! ../language/ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _introspection = __webpack_require__(/*! ../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _validate = __webpack_require__(/*! ../type/validate.js */ \"(ssr)/./node_modules/graphql/type/validate.js\");\n\nvar _collectFields = __webpack_require__(/*! ./collectFields.js */ \"(ssr)/./node_modules/graphql/execution/collectFields.js\");\n\nvar _values = __webpack_require__(/*! ./values.js */ \"(ssr)/./node_modules/graphql/execution/values.js\");\n\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = (0, _memoize.memoize3)(\n  (exeContext, returnType, fieldNodes) =>\n    (0, _collectFields.collectSubfields)(\n      exeContext.schema,\n      exeContext.fragments,\n      exeContext.variableValues,\n      returnType,\n      fieldNodes,\n    ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nfunction execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if ((0, _isPromise.isPromise)(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nfunction executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    (0, _isObjectLike.isObjectLike)(rawVariableValues) ||\n    (0, _devAssert.devAssert)(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nfunction buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe, _options$maxCoercionE;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n    options,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new _GraphQLError.GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [\n        new _GraphQLError.GraphQLError(\n          `Unknown operation named \"${operationName}\".`,\n        ),\n      ];\n    }\n\n    return [new _GraphQLError.GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = (0, _values.getVariableValues)(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors:\n        (_options$maxCoercionE =\n          options === null || options === void 0\n            ? void 0\n            : options.maxCoercionErrors) !== null &&\n        _options$maxCoercionE !== void 0\n          ? _options$maxCoercionE\n          : 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = (0, _collectFields.collectFields)(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case _ast.OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case _ast.OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case _ast.OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return (0, _promiseReduce.promiseReduce)(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if ((0, _isPromise.isPromise)(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  try {\n    for (const [responseName, fieldNodes] of fields.entries()) {\n      const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result !== undefined) {\n        results[responseName] = result;\n\n        if ((0, _isPromise.isPromise)(result)) {\n          containsPromise = true;\n        }\n      }\n    }\n  } catch (error) {\n    if (containsPromise) {\n      // Ensure that any promises returned by other fields are handled, as they may also reject.\n      return (0, _promiseForObject.promiseForObject)(results).finally(() => {\n        throw error;\n      });\n    }\n\n    throw error;\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return (0, _promiseForObject.promiseForObject)(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = (0, _values.getArgumentValues)(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if ((0, _isPromise.isPromise)(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if ((0, _isPromise.isPromise)(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = (0, _locatedError.locatedError)(\n          rawError,\n          fieldNodes,\n          (0, _Path.pathToArray)(path),\n        );\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = (0, _locatedError.locatedError)(\n      rawError,\n      fieldNodes,\n      (0, _Path.pathToArray)(path),\n    );\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if ((0, _definition.isNonNullType)(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if ((0, _definition.isListType)(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if ((0, _definition.isObjectType)(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Cannot complete value of unexpected output type: ' +\n        (0, _inspect.inspect)(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!(0, _isIterableObject.isIterableObject)(result)) {\n    throw new _GraphQLError.GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = (0, _Path.addPath)(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if ((0, _isPromise.isPromise)(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if ((0, _isPromise.isPromise)(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = (0, _locatedError.locatedError)(\n            rawError,\n            fieldNodes,\n            (0, _Path.pathToArray)(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = (0, _locatedError.locatedError)(\n        rawError,\n        fieldNodes,\n        (0, _Path.pathToArray)(itemPath),\n      );\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${(0, _inspect.inspect)(returnType)}.serialize(${(0,\n      _inspect.inspect)(result)})\\` to ` +\n        `return non-nullable value, returned: ${(0, _inspect.inspect)(\n          serializedResult,\n        )}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if ((0, _isPromise.isPromise)(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if ((0, _definition.isObjectType)(runtimeTypeName)) {\n    throw new _GraphQLError.GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${(0, _inspect.inspect)(result)}, received \"${(0,\n        _inspect.inspect)(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!(0, _definition.isObjectType)(runtimeType)) {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new _GraphQLError.GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if ((0, _isPromise.isPromise)(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _GraphQLError.GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${(0,\n    _inspect.inspect)(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nconst defaultTypeResolver = function (value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (\n    (0, _isObjectLike.isObjectLike)(value) &&\n    typeof value.__typename === 'string'\n  ) {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if ((0, _isPromise.isPromise)(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexports.defaultTypeResolver = defaultTypeResolver;\n\nconst defaultFieldResolver = function (source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((0, _isObjectLike.isObjectLike)(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexports.defaultFieldResolver = defaultFieldResolver;\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === _introspection.SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (\n    fieldName === _introspection.TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/execution/execute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/execution/index.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/execution/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"createSourceEventStream\", ({\n  enumerable: true,\n  get: function () {\n    return _subscribe.createSourceEventStream;\n  },\n}));\nObject.defineProperty(exports, \"defaultFieldResolver\", ({\n  enumerable: true,\n  get: function () {\n    return _execute.defaultFieldResolver;\n  },\n}));\nObject.defineProperty(exports, \"defaultTypeResolver\", ({\n  enumerable: true,\n  get: function () {\n    return _execute.defaultTypeResolver;\n  },\n}));\nObject.defineProperty(exports, \"execute\", ({\n  enumerable: true,\n  get: function () {\n    return _execute.execute;\n  },\n}));\nObject.defineProperty(exports, \"executeSync\", ({\n  enumerable: true,\n  get: function () {\n    return _execute.executeSync;\n  },\n}));\nObject.defineProperty(exports, \"getArgumentValues\", ({\n  enumerable: true,\n  get: function () {\n    return _values.getArgumentValues;\n  },\n}));\nObject.defineProperty(exports, \"getDirectiveValues\", ({\n  enumerable: true,\n  get: function () {\n    return _values.getDirectiveValues;\n  },\n}));\nObject.defineProperty(exports, \"getVariableValues\", ({\n  enumerable: true,\n  get: function () {\n    return _values.getVariableValues;\n  },\n}));\nObject.defineProperty(exports, \"responsePathAsArray\", ({\n  enumerable: true,\n  get: function () {\n    return _Path.pathToArray;\n  },\n}));\nObject.defineProperty(exports, \"subscribe\", ({\n  enumerable: true,\n  get: function () {\n    return _subscribe.subscribe;\n  },\n}));\n\nvar _Path = __webpack_require__(/*! ../jsutils/Path.js */ \"(ssr)/./node_modules/graphql/jsutils/Path.js\");\n\nvar _execute = __webpack_require__(/*! ./execute.js */ \"(ssr)/./node_modules/graphql/execution/execute.js\");\n\nvar _subscribe = __webpack_require__(/*! ./subscribe.js */ \"(ssr)/./node_modules/graphql/execution/subscribe.js\");\n\nvar _values = __webpack_require__(/*! ./values.js */ \"(ssr)/./node_modules/graphql/execution/values.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9leGVjdXRpb24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkRBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQztBQUNGLHVEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDO0FBQ0YsMkNBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQztBQUNGLHFEQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDO0FBQ0Ysc0RBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLEVBQUM7QUFDRixxREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQztBQUNGLHVEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDO0FBQ0YsNkNBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDLEVBQUM7O0FBRUYsWUFBWSxtQkFBTyxDQUFDLHdFQUFvQjs7QUFFeEMsZUFBZSxtQkFBTyxDQUFDLHVFQUFjOztBQUVyQyxpQkFBaUIsbUJBQU8sQ0FBQywyRUFBZ0I7O0FBRXpDLGNBQWMsbUJBQU8sQ0FBQyxxRUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXhlY3V0aW9uL2luZGV4LmpzPzVkNTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVNvdXJjZUV2ZW50U3RyZWFtJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3N1YnNjcmliZS5jcmVhdGVTb3VyY2VFdmVudFN0cmVhbTtcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdkZWZhdWx0RmllbGRSZXNvbHZlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9leGVjdXRlLmRlZmF1bHRGaWVsZFJlc29sdmVyO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHRUeXBlUmVzb2x2ZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZXhlY3V0ZS5kZWZhdWx0VHlwZVJlc29sdmVyO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2V4ZWN1dGUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZXhlY3V0ZS5leGVjdXRlO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2V4ZWN1dGVTeW5jJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2V4ZWN1dGUuZXhlY3V0ZVN5bmM7XG4gIH0sXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZ2V0QXJndW1lbnRWYWx1ZXMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdmFsdWVzLmdldEFyZ3VtZW50VmFsdWVzO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dldERpcmVjdGl2ZVZhbHVlcycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF92YWx1ZXMuZ2V0RGlyZWN0aXZlVmFsdWVzO1xuICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dldFZhcmlhYmxlVmFsdWVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3ZhbHVlcy5nZXRWYXJpYWJsZVZhbHVlcztcbiAgfSxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdyZXNwb25zZVBhdGhBc0FycmF5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1BhdGgucGF0aFRvQXJyYXk7XG4gIH0sXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc3Vic2NyaWJlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3N1YnNjcmliZS5zdWJzY3JpYmU7XG4gIH0sXG59KTtcblxudmFyIF9QYXRoID0gcmVxdWlyZSgnLi4vanN1dGlscy9QYXRoLmpzJyk7XG5cbnZhciBfZXhlY3V0ZSA9IHJlcXVpcmUoJy4vZXhlY3V0ZS5qcycpO1xuXG52YXIgX3N1YnNjcmliZSA9IHJlcXVpcmUoJy4vc3Vic2NyaWJlLmpzJyk7XG5cbnZhciBfdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMuanMnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/execution/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/execution/mapAsyncIterator.js":
/*!************************************************************!*\
  !*** ./node_modules/graphql/execution/mapAsyncIterator.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.mapAsyncIterator = mapAsyncIterator;\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nfunction mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false,\n      };\n    } catch (error) {\n      /* c8 ignore start */\n      // FIXME: add test case\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n      /* c8 ignore stop */\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function'\n        ? mapResult(await iterator.return())\n        : {\n            value: undefined,\n            done: true,\n          };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9leGVjdXRpb24vbWFwQXN5bmNJdGVyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXhlY3V0aW9uL21hcEFzeW5jSXRlcmF0b3IuanM/Y2JmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMubWFwQXN5bmNJdGVyYXRvciA9IG1hcEFzeW5jSXRlcmF0b3I7XG5cbi8qKlxuICogR2l2ZW4gYW4gQXN5bmNJdGVyYWJsZSBhbmQgYSBjYWxsYmFjayBmdW5jdGlvbiwgcmV0dXJuIGFuIEFzeW5jSXRlcmF0b3JcbiAqIHdoaWNoIHByb2R1Y2VzIHZhbHVlcyBtYXBwZWQgdmlhIGNhbGxpbmcgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXBBc3luY0l0ZXJhdG9yKGl0ZXJhYmxlLCBjYWxsYmFjaykge1xuICBjb25zdCBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIG1hcFJlc3VsdChyZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBhd2FpdCBjYWxsYmFjayhyZXN1bHQudmFsdWUpLFxuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgLy8gRklYTUU6IGFkZCB0ZXN0IGNhc2VcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IucmV0dXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgIH0gY2F0Y2ggKF9lKSB7XG4gICAgICAgICAgLyogaWdub3JlIGVycm9yICovXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgIHJldHVybiBtYXBSZXN1bHQoYXdhaXQgaXRlcmF0b3IubmV4dCgpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmV0dXJuKCkge1xuICAgICAgLy8gSWYgaXRlcmF0b3IucmV0dXJuKCkgZG9lcyBub3QgZXhpc3QsIHRoZW4gdHlwZSBSIG11c3QgYmUgdW5kZWZpbmVkLlxuICAgICAgcmV0dXJuIHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBtYXBSZXN1bHQoYXdhaXQgaXRlcmF0b3IucmV0dXJuKCkpXG4gICAgICAgIDoge1xuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgdGhyb3coZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IudGhyb3cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG1hcFJlc3VsdChhd2FpdCBpdGVyYXRvci50aHJvdyhlcnJvcikpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9LFxuXG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/execution/mapAsyncIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/execution/subscribe.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/execution/subscribe.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.createSourceEventStream = createSourceEventStream;\nexports.subscribe = subscribe;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _isAsyncIterable = __webpack_require__(/*! ../jsutils/isAsyncIterable.js */ \"(ssr)/./node_modules/graphql/jsutils/isAsyncIterable.js\");\n\nvar _Path = __webpack_require__(/*! ../jsutils/Path.js */ \"(ssr)/./node_modules/graphql/jsutils/Path.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _locatedError = __webpack_require__(/*! ../error/locatedError.js */ \"(ssr)/./node_modules/graphql/error/locatedError.js\");\n\nvar _collectFields = __webpack_require__(/*! ./collectFields.js */ \"(ssr)/./node_modules/graphql/execution/collectFields.js\");\n\nvar _execute = __webpack_require__(/*! ./execute.js */ \"(ssr)/./node_modules/graphql/execution/execute.js\");\n\nvar _mapAsyncIterator = __webpack_require__(/*! ./mapAsyncIterator.js */ \"(ssr)/./node_modules/graphql/execution/mapAsyncIterator.js\");\n\nvar _values = __webpack_require__(/*! ./values.js */ \"(ssr)/./node_modules/graphql/execution/values.js\");\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\nasync function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const resultOrStream = await createSourceEventStream(args);\n\n  if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    (0, _execute.execute)({ ...args, rootValue: payload }); // Map every source value to a ExecutionResult value as described above.\n\n  return (0, _mapAsyncIterator.mapAsyncIterator)(\n    resultOrStream,\n    mapSourceToResponse,\n  );\n}\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6],\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nasync function createSourceEventStream(...rawArgs) {\n  const args = toNormalizedArgs(rawArgs);\n  const { schema, document, variableValues } = args; // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = (0, _execute.buildExecutionContext)(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${(0, _inspect.inspect)(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof _GraphQLError.GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = (0, _collectFields.collectFields)(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new _GraphQLError.GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = (0, _Path.addPath)(undefined, responseName, rootType.name);\n  const info = (0, _execute.buildResolveInfo)(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = (0, _values.getArgumentValues)(\n      fieldDef,\n      fieldNodes[0],\n      variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw (0, _locatedError.locatedError)(\n      error,\n      fieldNodes,\n      (0, _Path.pathToArray)(path),\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/execution/subscribe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/execution/values.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/execution/values.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\nexports.getVariableValues = getVariableValues;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _keyMap = __webpack_require__(/*! ../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _printPathArray = __webpack_require__(/*! ../jsutils/printPathArray.js */ \"(ssr)/./node_modules/graphql/jsutils/printPathArray.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _coerceInputValue = __webpack_require__(/*! ../utilities/coerceInputValue.js */ \"(ssr)/./node_modules/graphql/utilities/coerceInputValue.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\nvar _valueFromAST = __webpack_require__(/*! ../utilities/valueFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/valueFromAST.js\");\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new _GraphQLError.GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n\n    if (!(0, _definition.isInputType)(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = (0, _printer.print)(varDefNode.type);\n      onError(\n        new _GraphQLError.GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = (0, _valueFromAST.valueFromAST)(\n          varDefNode.defaultValue,\n          varType,\n        );\n      } else if ((0, _definition.isNonNullType)(varType)) {\n        const varTypeStr = (0, _inspect.inspect)(varType);\n        onError(\n          new _GraphQLError.GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && (0, _definition.isNonNullType)(varType)) {\n      const varTypeStr = (0, _inspect.inspect)(varType);\n      onError(\n        new _GraphQLError.GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` +\n          (0, _inspect.inspect)(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${(0, _printPathArray.printPathArray)(\n            path,\n          )}\"`;\n        }\n\n        onError(\n          new _GraphQLError.GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nfunction getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = (0, _keyMap.keyMap)(\n    argumentNodes,\n    (arg) => arg.name.value,\n  );\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _GraphQLError.GraphQLError(\n          `Argument \"${name}\" of required type \"${(0, _inspect.inspect)(\n            argType,\n          )}\" ` + 'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === _kinds.Kind.NULL;\n\n    if (valueNode.kind === _kinds.Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if ((0, _definition.isNonNullType)(argType)) {\n          throw new _GraphQLError.GraphQLError(\n            `Argument \"${name}\" of required type \"${(0, _inspect.inspect)(\n              argType,\n            )}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && (0, _definition.isNonNullType)(argType)) {\n      throw new _GraphQLError.GraphQLError(\n        `Argument \"${name}\" of non-null type \"${(0, _inspect.inspect)(\n          argType,\n        )}\" ` + 'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = (0, _valueFromAST.valueFromAST)(\n      valueNode,\n      argType,\n      variableValues,\n    );\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new _GraphQLError.GraphQLError(\n        `Argument \"${name}\" has invalid value ${(0, _printer.print)(\n          valueNode,\n        )}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/execution/values.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/graphql.js":
/*!*****************************************!*\
  !*** ./node_modules/graphql/graphql.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _devAssert = __webpack_require__(/*! ./jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _isPromise = __webpack_require__(/*! ./jsutils/isPromise.js */ \"(ssr)/./node_modules/graphql/jsutils/isPromise.js\");\n\nvar _parser = __webpack_require__(/*! ./language/parser.js */ \"(ssr)/./node_modules/graphql/language/parser.js\");\n\nvar _validate = __webpack_require__(/*! ./type/validate.js */ \"(ssr)/./node_modules/graphql/type/validate.js\");\n\nvar _validate2 = __webpack_require__(/*! ./validation/validate.js */ \"(ssr)/./node_modules/graphql/validation/validate.js\");\n\nvar _execute = __webpack_require__(/*! ./execution/execute.js */ \"(ssr)/./node_modules/graphql/execution/execute.js\");\n\nfunction graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nfunction graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = (0, _validate.validateSchema)(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors,\n    };\n  } // Parse\n\n  let document;\n\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError],\n    };\n  } // Validate\n\n  const validationErrors = (0, _validate2.validate)(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors,\n    };\n  } // Execute\n\n  return (0, _execute.execute)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7QUFDZixtQkFBbUI7O0FBRW5CLGlCQUFpQixtQkFBTyxDQUFDLGlGQUF3Qjs7QUFFakQsaUJBQWlCLG1CQUFPLENBQUMsaUZBQXdCOztBQUVqRCxjQUFjLG1CQUFPLENBQUMsNkVBQXNCOztBQUU1QyxnQkFBZ0IsbUJBQU8sQ0FBQyx5RUFBb0I7O0FBRTVDLGlCQUFpQixtQkFBTyxDQUFDLHFGQUEwQjs7QUFFbkQsZUFBZSxtQkFBTyxDQUFDLGlGQUF3Qjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0M7O0FBRXBDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxRQUFROztBQUVaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZ3JhcGhxbC5qcz9iOTdiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5ncmFwaHFsID0gZ3JhcGhxbDtcbmV4cG9ydHMuZ3JhcGhxbFN5bmMgPSBncmFwaHFsU3luYztcblxudmFyIF9kZXZBc3NlcnQgPSByZXF1aXJlKCcuL2pzdXRpbHMvZGV2QXNzZXJ0LmpzJyk7XG5cbnZhciBfaXNQcm9taXNlID0gcmVxdWlyZSgnLi9qc3V0aWxzL2lzUHJvbWlzZS5qcycpO1xuXG52YXIgX3BhcnNlciA9IHJlcXVpcmUoJy4vbGFuZ3VhZ2UvcGFyc2VyLmpzJyk7XG5cbnZhciBfdmFsaWRhdGUgPSByZXF1aXJlKCcuL3R5cGUvdmFsaWRhdGUuanMnKTtcblxudmFyIF92YWxpZGF0ZTIgPSByZXF1aXJlKCcuL3ZhbGlkYXRpb24vdmFsaWRhdGUuanMnKTtcblxudmFyIF9leGVjdXRlID0gcmVxdWlyZSgnLi9leGVjdXRpb24vZXhlY3V0ZS5qcycpO1xuXG5mdW5jdGlvbiBncmFwaHFsKGFyZ3MpIHtcbiAgLy8gQWx3YXlzIHJldHVybiBhIFByb21pc2UgZm9yIGEgY29uc2lzdGVudCBBUEkuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZShncmFwaHFsSW1wbChhcmdzKSkpO1xufVxuLyoqXG4gKiBUaGUgZ3JhcGhxbFN5bmMgZnVuY3Rpb24gYWxzbyBmdWxmaWxscyBHcmFwaFFMIG9wZXJhdGlvbnMgYnkgcGFyc2luZyxcbiAqIHZhbGlkYXRpbmcsIGFuZCBleGVjdXRpbmcgYSBHcmFwaFFMIGRvY3VtZW50IGFsb25nIHNpZGUgYSBHcmFwaFFMIHNjaGVtYS5cbiAqIEhvd2V2ZXIsIGl0IGd1YXJhbnRlZXMgdG8gY29tcGxldGUgc3luY2hyb25vdXNseSAob3IgdGhyb3cgYW4gZXJyb3IpIGFzc3VtaW5nXG4gKiB0aGF0IGFsbCBmaWVsZCByZXNvbHZlcnMgYXJlIGFsc28gc3luY2hyb25vdXMuXG4gKi9cblxuZnVuY3Rpb24gZ3JhcGhxbFN5bmMoYXJncykge1xuICBjb25zdCByZXN1bHQgPSBncmFwaHFsSW1wbChhcmdzKTsgLy8gQXNzZXJ0IHRoYXQgdGhlIGV4ZWN1dGlvbiB3YXMgc3luY2hyb25vdXMuXG5cbiAgaWYgKCgwLCBfaXNQcm9taXNlLmlzUHJvbWlzZSkocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignR3JhcGhRTCBleGVjdXRpb24gZmFpbGVkIHRvIGNvbXBsZXRlIHN5bmNocm9ub3VzbHkuJyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBncmFwaHFsSW1wbChhcmdzKSB7XG4gIC8vIFRlbXBvcmFyeSBmb3IgdjE1IHRvIHYxNiBtaWdyYXRpb24uIFJlbW92ZSBpbiB2MTdcbiAgYXJndW1lbnRzLmxlbmd0aCA8IDIgfHxcbiAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgZmFsc2UsXG4gICAgICAnZ3JhcGhxbEAxNiBkcm9wcGVkIGxvbmctZGVwcmVjYXRlZCBzdXBwb3J0IGZvciBwb3NpdGlvbmFsIGFyZ3VtZW50cywgcGxlYXNlIHBhc3MgYW4gb2JqZWN0IGluc3RlYWQuJyxcbiAgICApO1xuICBjb25zdCB7XG4gICAgc2NoZW1hLFxuICAgIHNvdXJjZSxcbiAgICByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlLFxuICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgIG9wZXJhdGlvbk5hbWUsXG4gICAgZmllbGRSZXNvbHZlcixcbiAgICB0eXBlUmVzb2x2ZXIsXG4gIH0gPSBhcmdzOyAvLyBWYWxpZGF0ZSBTY2hlbWFcblxuICBjb25zdCBzY2hlbWFWYWxpZGF0aW9uRXJyb3JzID0gKDAsIF92YWxpZGF0ZS52YWxpZGF0ZVNjaGVtYSkoc2NoZW1hKTtcblxuICBpZiAoc2NoZW1hVmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogc2NoZW1hVmFsaWRhdGlvbkVycm9ycyxcbiAgICB9O1xuICB9IC8vIFBhcnNlXG5cbiAgbGV0IGRvY3VtZW50O1xuXG4gIHRyeSB7XG4gICAgZG9jdW1lbnQgPSAoMCwgX3BhcnNlci5wYXJzZSkoc291cmNlKTtcbiAgfSBjYXRjaCAoc3ludGF4RXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiBbc3ludGF4RXJyb3JdLFxuICAgIH07XG4gIH0gLy8gVmFsaWRhdGVcblxuICBjb25zdCB2YWxpZGF0aW9uRXJyb3JzID0gKDAsIF92YWxpZGF0ZTIudmFsaWRhdGUpKHNjaGVtYSwgZG9jdW1lbnQpO1xuXG4gIGlmICh2YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiB2YWxpZGF0aW9uRXJyb3JzLFxuICAgIH07XG4gIH0gLy8gRXhlY3V0ZVxuXG4gIHJldHVybiAoMCwgX2V4ZWN1dGUuZXhlY3V0ZSkoe1xuICAgIHNjaGVtYSxcbiAgICBkb2N1bWVudCxcbiAgICByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlLFxuICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgIG9wZXJhdGlvbk5hbWUsXG4gICAgZmllbGRSZXNvbHZlcixcbiAgICB0eXBlUmVzb2x2ZXIsXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/graphql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/index.js":
/*!***************************************!*\
  !*** ./node_modules/graphql/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"BREAK\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.BREAK;\n  },\n}));\nObject.defineProperty(exports, \"BreakingChangeType\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.BreakingChangeType;\n  },\n}));\nObject.defineProperty(exports, \"DEFAULT_DEPRECATION_REASON\", ({\n  enumerable: true,\n  get: function () {\n    return _index.DEFAULT_DEPRECATION_REASON;\n  },\n}));\nObject.defineProperty(exports, \"DangerousChangeType\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.DangerousChangeType;\n  },\n}));\nObject.defineProperty(exports, \"DirectiveLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.DirectiveLocation;\n  },\n}));\nObject.defineProperty(exports, \"ExecutableDefinitionsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.ExecutableDefinitionsRule;\n  },\n}));\nObject.defineProperty(exports, \"FieldsOnCorrectTypeRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.FieldsOnCorrectTypeRule;\n  },\n}));\nObject.defineProperty(exports, \"FragmentsOnCompositeTypesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.FragmentsOnCompositeTypesRule;\n  },\n}));\nObject.defineProperty(exports, \"GRAPHQL_MAX_INT\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GRAPHQL_MAX_INT;\n  },\n}));\nObject.defineProperty(exports, \"GRAPHQL_MIN_INT\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GRAPHQL_MIN_INT;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLBoolean\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLBoolean;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLDeprecatedDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLDeprecatedDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLEnumType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLEnumType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLError\", ({\n  enumerable: true,\n  get: function () {\n    return _index5.GraphQLError;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLFloat\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLFloat;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLID\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLID;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLIncludeDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLIncludeDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLInputObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLInputObjectType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLInt\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLInt;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLInterfaceType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLInterfaceType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLList\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLList;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLNonNull\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLNonNull;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLObjectType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLOneOfDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLOneOfDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLScalarType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLSchema;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLSkipDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLSkipDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLSpecifiedByDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLSpecifiedByDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLString\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLString;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLUnionType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.GraphQLUnionType;\n  },\n}));\nObject.defineProperty(exports, \"Kind\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.Kind;\n  },\n}));\nObject.defineProperty(exports, \"KnownArgumentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.KnownArgumentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownDirectivesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.KnownDirectivesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownFragmentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.KnownFragmentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownTypeNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.KnownTypeNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"Lexer\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.Lexer;\n  },\n}));\nObject.defineProperty(exports, \"Location\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.Location;\n  },\n}));\nObject.defineProperty(exports, \"LoneAnonymousOperationRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.LoneAnonymousOperationRule;\n  },\n}));\nObject.defineProperty(exports, \"LoneSchemaDefinitionRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.LoneSchemaDefinitionRule;\n  },\n}));\nObject.defineProperty(exports, \"MaxIntrospectionDepthRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.MaxIntrospectionDepthRule;\n  },\n}));\nObject.defineProperty(exports, \"NoDeprecatedCustomRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.NoDeprecatedCustomRule;\n  },\n}));\nObject.defineProperty(exports, \"NoFragmentCyclesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.NoFragmentCyclesRule;\n  },\n}));\nObject.defineProperty(exports, \"NoSchemaIntrospectionCustomRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.NoSchemaIntrospectionCustomRule;\n  },\n}));\nObject.defineProperty(exports, \"NoUndefinedVariablesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.NoUndefinedVariablesRule;\n  },\n}));\nObject.defineProperty(exports, \"NoUnusedFragmentsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.NoUnusedFragmentsRule;\n  },\n}));\nObject.defineProperty(exports, \"NoUnusedVariablesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.NoUnusedVariablesRule;\n  },\n}));\nObject.defineProperty(exports, \"OperationTypeNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.OperationTypeNode;\n  },\n}));\nObject.defineProperty(exports, \"OverlappingFieldsCanBeMergedRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.OverlappingFieldsCanBeMergedRule;\n  },\n}));\nObject.defineProperty(exports, \"PossibleFragmentSpreadsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.PossibleFragmentSpreadsRule;\n  },\n}));\nObject.defineProperty(exports, \"PossibleTypeExtensionsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.PossibleTypeExtensionsRule;\n  },\n}));\nObject.defineProperty(exports, \"ProvidedRequiredArgumentsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.ProvidedRequiredArgumentsRule;\n  },\n}));\nObject.defineProperty(exports, \"ScalarLeafsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.ScalarLeafsRule;\n  },\n}));\nObject.defineProperty(exports, \"SchemaMetaFieldDef\", ({\n  enumerable: true,\n  get: function () {\n    return _index.SchemaMetaFieldDef;\n  },\n}));\nObject.defineProperty(exports, \"SingleFieldSubscriptionsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.SingleFieldSubscriptionsRule;\n  },\n}));\nObject.defineProperty(exports, \"Source\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.Source;\n  },\n}));\nObject.defineProperty(exports, \"Token\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.Token;\n  },\n}));\nObject.defineProperty(exports, \"TokenKind\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.TokenKind;\n  },\n}));\nObject.defineProperty(exports, \"TypeInfo\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.TypeInfo;\n  },\n}));\nObject.defineProperty(exports, \"TypeKind\", ({\n  enumerable: true,\n  get: function () {\n    return _index.TypeKind;\n  },\n}));\nObject.defineProperty(exports, \"TypeMetaFieldDef\", ({\n  enumerable: true,\n  get: function () {\n    return _index.TypeMetaFieldDef;\n  },\n}));\nObject.defineProperty(exports, \"TypeNameMetaFieldDef\", ({\n  enumerable: true,\n  get: function () {\n    return _index.TypeNameMetaFieldDef;\n  },\n}));\nObject.defineProperty(exports, \"UniqueArgumentDefinitionNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueArgumentDefinitionNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueArgumentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueArgumentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueDirectiveNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueDirectiveNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueDirectivesPerLocationRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueDirectivesPerLocationRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueEnumValueNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueEnumValueNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueFieldDefinitionNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueFieldDefinitionNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueFragmentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueFragmentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueInputFieldNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueInputFieldNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueOperationNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueOperationNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueOperationTypesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueOperationTypesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueTypeNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueTypeNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueVariableNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.UniqueVariableNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"ValidationContext\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.ValidationContext;\n  },\n}));\nObject.defineProperty(exports, \"ValuesOfCorrectTypeRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.ValuesOfCorrectTypeRule;\n  },\n}));\nObject.defineProperty(exports, \"VariablesAreInputTypesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.VariablesAreInputTypesRule;\n  },\n}));\nObject.defineProperty(exports, \"VariablesInAllowedPositionRule\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.VariablesInAllowedPositionRule;\n  },\n}));\nObject.defineProperty(exports, \"__Directive\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__Directive;\n  },\n}));\nObject.defineProperty(exports, \"__DirectiveLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__DirectiveLocation;\n  },\n}));\nObject.defineProperty(exports, \"__EnumValue\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__EnumValue;\n  },\n}));\nObject.defineProperty(exports, \"__Field\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__Field;\n  },\n}));\nObject.defineProperty(exports, \"__InputValue\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__InputValue;\n  },\n}));\nObject.defineProperty(exports, \"__Schema\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__Schema;\n  },\n}));\nObject.defineProperty(exports, \"__Type\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__Type;\n  },\n}));\nObject.defineProperty(exports, \"__TypeKind\", ({\n  enumerable: true,\n  get: function () {\n    return _index.__TypeKind;\n  },\n}));\nObject.defineProperty(exports, \"assertAbstractType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertAbstractType;\n  },\n}));\nObject.defineProperty(exports, \"assertCompositeType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertCompositeType;\n  },\n}));\nObject.defineProperty(exports, \"assertDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertDirective;\n  },\n}));\nObject.defineProperty(exports, \"assertEnumType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertEnumType;\n  },\n}));\nObject.defineProperty(exports, \"assertEnumValueName\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertEnumValueName;\n  },\n}));\nObject.defineProperty(exports, \"assertInputObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertInputObjectType;\n  },\n}));\nObject.defineProperty(exports, \"assertInputType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertInputType;\n  },\n}));\nObject.defineProperty(exports, \"assertInterfaceType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertInterfaceType;\n  },\n}));\nObject.defineProperty(exports, \"assertLeafType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertLeafType;\n  },\n}));\nObject.defineProperty(exports, \"assertListType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertListType;\n  },\n}));\nObject.defineProperty(exports, \"assertName\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertName;\n  },\n}));\nObject.defineProperty(exports, \"assertNamedType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertNamedType;\n  },\n}));\nObject.defineProperty(exports, \"assertNonNullType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertNonNullType;\n  },\n}));\nObject.defineProperty(exports, \"assertNullableType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertNullableType;\n  },\n}));\nObject.defineProperty(exports, \"assertObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertObjectType;\n  },\n}));\nObject.defineProperty(exports, \"assertOutputType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertOutputType;\n  },\n}));\nObject.defineProperty(exports, \"assertScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertScalarType;\n  },\n}));\nObject.defineProperty(exports, \"assertSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertSchema;\n  },\n}));\nObject.defineProperty(exports, \"assertType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertType;\n  },\n}));\nObject.defineProperty(exports, \"assertUnionType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertUnionType;\n  },\n}));\nObject.defineProperty(exports, \"assertValidName\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.assertValidName;\n  },\n}));\nObject.defineProperty(exports, \"assertValidSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertValidSchema;\n  },\n}));\nObject.defineProperty(exports, \"assertWrappingType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.assertWrappingType;\n  },\n}));\nObject.defineProperty(exports, \"astFromValue\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.astFromValue;\n  },\n}));\nObject.defineProperty(exports, \"buildASTSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.buildASTSchema;\n  },\n}));\nObject.defineProperty(exports, \"buildClientSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.buildClientSchema;\n  },\n}));\nObject.defineProperty(exports, \"buildSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.buildSchema;\n  },\n}));\nObject.defineProperty(exports, \"coerceInputValue\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.coerceInputValue;\n  },\n}));\nObject.defineProperty(exports, \"concatAST\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.concatAST;\n  },\n}));\nObject.defineProperty(exports, \"createSourceEventStream\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.createSourceEventStream;\n  },\n}));\nObject.defineProperty(exports, \"defaultFieldResolver\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.defaultFieldResolver;\n  },\n}));\nObject.defineProperty(exports, \"defaultTypeResolver\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.defaultTypeResolver;\n  },\n}));\nObject.defineProperty(exports, \"doTypesOverlap\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.doTypesOverlap;\n  },\n}));\nObject.defineProperty(exports, \"execute\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.execute;\n  },\n}));\nObject.defineProperty(exports, \"executeSync\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.executeSync;\n  },\n}));\nObject.defineProperty(exports, \"extendSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.extendSchema;\n  },\n}));\nObject.defineProperty(exports, \"findBreakingChanges\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.findBreakingChanges;\n  },\n}));\nObject.defineProperty(exports, \"findDangerousChanges\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.findDangerousChanges;\n  },\n}));\nObject.defineProperty(exports, \"formatError\", ({\n  enumerable: true,\n  get: function () {\n    return _index5.formatError;\n  },\n}));\nObject.defineProperty(exports, \"getArgumentValues\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.getArgumentValues;\n  },\n}));\nObject.defineProperty(exports, \"getDirectiveValues\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.getDirectiveValues;\n  },\n}));\nObject.defineProperty(exports, \"getEnterLeaveForKind\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.getEnterLeaveForKind;\n  },\n}));\nObject.defineProperty(exports, \"getIntrospectionQuery\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.getIntrospectionQuery;\n  },\n}));\nObject.defineProperty(exports, \"getLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.getLocation;\n  },\n}));\nObject.defineProperty(exports, \"getNamedType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.getNamedType;\n  },\n}));\nObject.defineProperty(exports, \"getNullableType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.getNullableType;\n  },\n}));\nObject.defineProperty(exports, \"getOperationAST\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.getOperationAST;\n  },\n}));\nObject.defineProperty(exports, \"getOperationRootType\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.getOperationRootType;\n  },\n}));\nObject.defineProperty(exports, \"getVariableValues\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.getVariableValues;\n  },\n}));\nObject.defineProperty(exports, \"getVisitFn\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.getVisitFn;\n  },\n}));\nObject.defineProperty(exports, \"graphql\", ({\n  enumerable: true,\n  get: function () {\n    return _graphql.graphql;\n  },\n}));\nObject.defineProperty(exports, \"graphqlSync\", ({\n  enumerable: true,\n  get: function () {\n    return _graphql.graphqlSync;\n  },\n}));\nObject.defineProperty(exports, \"introspectionFromSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.introspectionFromSchema;\n  },\n}));\nObject.defineProperty(exports, \"introspectionTypes\", ({\n  enumerable: true,\n  get: function () {\n    return _index.introspectionTypes;\n  },\n}));\nObject.defineProperty(exports, \"isAbstractType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isAbstractType;\n  },\n}));\nObject.defineProperty(exports, \"isCompositeType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isCompositeType;\n  },\n}));\nObject.defineProperty(exports, \"isConstValueNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isConstValueNode;\n  },\n}));\nObject.defineProperty(exports, \"isDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isDirective;\n  },\n}));\nObject.defineProperty(exports, \"isEnumType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isEnumType;\n  },\n}));\nObject.defineProperty(exports, \"isEqualType\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.isEqualType;\n  },\n}));\nObject.defineProperty(exports, \"isExecutableDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isExecutableDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isInputObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isInputObjectType;\n  },\n}));\nObject.defineProperty(exports, \"isInputType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isInputType;\n  },\n}));\nObject.defineProperty(exports, \"isInterfaceType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isInterfaceType;\n  },\n}));\nObject.defineProperty(exports, \"isIntrospectionType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isIntrospectionType;\n  },\n}));\nObject.defineProperty(exports, \"isLeafType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isLeafType;\n  },\n}));\nObject.defineProperty(exports, \"isListType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isListType;\n  },\n}));\nObject.defineProperty(exports, \"isNamedType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isNamedType;\n  },\n}));\nObject.defineProperty(exports, \"isNonNullType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isNonNullType;\n  },\n}));\nObject.defineProperty(exports, \"isNullableType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isNullableType;\n  },\n}));\nObject.defineProperty(exports, \"isObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isObjectType;\n  },\n}));\nObject.defineProperty(exports, \"isOutputType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isOutputType;\n  },\n}));\nObject.defineProperty(exports, \"isRequiredArgument\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isRequiredArgument;\n  },\n}));\nObject.defineProperty(exports, \"isRequiredInputField\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isRequiredInputField;\n  },\n}));\nObject.defineProperty(exports, \"isScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isScalarType;\n  },\n}));\nObject.defineProperty(exports, \"isSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isSchema;\n  },\n}));\nObject.defineProperty(exports, \"isSelectionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isSelectionNode;\n  },\n}));\nObject.defineProperty(exports, \"isSpecifiedDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isSpecifiedDirective;\n  },\n}));\nObject.defineProperty(exports, \"isSpecifiedScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isSpecifiedScalarType;\n  },\n}));\nObject.defineProperty(exports, \"isType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isType;\n  },\n}));\nObject.defineProperty(exports, \"isTypeDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isTypeDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeExtensionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isTypeExtensionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isTypeNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeSubTypeOf\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.isTypeSubTypeOf;\n  },\n}));\nObject.defineProperty(exports, \"isTypeSystemDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isTypeSystemDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeSystemExtensionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isTypeSystemExtensionNode;\n  },\n}));\nObject.defineProperty(exports, \"isUnionType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isUnionType;\n  },\n}));\nObject.defineProperty(exports, \"isValidNameError\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.isValidNameError;\n  },\n}));\nObject.defineProperty(exports, \"isValueNode\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.isValueNode;\n  },\n}));\nObject.defineProperty(exports, \"isWrappingType\", ({\n  enumerable: true,\n  get: function () {\n    return _index.isWrappingType;\n  },\n}));\nObject.defineProperty(exports, \"lexicographicSortSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.lexicographicSortSchema;\n  },\n}));\nObject.defineProperty(exports, \"locatedError\", ({\n  enumerable: true,\n  get: function () {\n    return _index5.locatedError;\n  },\n}));\nObject.defineProperty(exports, \"parse\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.parse;\n  },\n}));\nObject.defineProperty(exports, \"parseConstValue\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.parseConstValue;\n  },\n}));\nObject.defineProperty(exports, \"parseType\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.parseType;\n  },\n}));\nObject.defineProperty(exports, \"parseValue\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.parseValue;\n  },\n}));\nObject.defineProperty(exports, \"print\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.print;\n  },\n}));\nObject.defineProperty(exports, \"printError\", ({\n  enumerable: true,\n  get: function () {\n    return _index5.printError;\n  },\n}));\nObject.defineProperty(exports, \"printIntrospectionSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.printIntrospectionSchema;\n  },\n}));\nObject.defineProperty(exports, \"printLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.printLocation;\n  },\n}));\nObject.defineProperty(exports, \"printSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.printSchema;\n  },\n}));\nObject.defineProperty(exports, \"printSourceLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.printSourceLocation;\n  },\n}));\nObject.defineProperty(exports, \"printType\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.printType;\n  },\n}));\nObject.defineProperty(exports, \"recommendedRules\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.recommendedRules;\n  },\n}));\nObject.defineProperty(exports, \"resolveObjMapThunk\", ({\n  enumerable: true,\n  get: function () {\n    return _index.resolveObjMapThunk;\n  },\n}));\nObject.defineProperty(exports, \"resolveReadonlyArrayThunk\", ({\n  enumerable: true,\n  get: function () {\n    return _index.resolveReadonlyArrayThunk;\n  },\n}));\nObject.defineProperty(exports, \"responsePathAsArray\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.responsePathAsArray;\n  },\n}));\nObject.defineProperty(exports, \"separateOperations\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.separateOperations;\n  },\n}));\nObject.defineProperty(exports, \"specifiedDirectives\", ({\n  enumerable: true,\n  get: function () {\n    return _index.specifiedDirectives;\n  },\n}));\nObject.defineProperty(exports, \"specifiedRules\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.specifiedRules;\n  },\n}));\nObject.defineProperty(exports, \"specifiedScalarTypes\", ({\n  enumerable: true,\n  get: function () {\n    return _index.specifiedScalarTypes;\n  },\n}));\nObject.defineProperty(exports, \"stripIgnoredCharacters\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.stripIgnoredCharacters;\n  },\n}));\nObject.defineProperty(exports, \"subscribe\", ({\n  enumerable: true,\n  get: function () {\n    return _index3.subscribe;\n  },\n}));\nObject.defineProperty(exports, \"syntaxError\", ({\n  enumerable: true,\n  get: function () {\n    return _index5.syntaxError;\n  },\n}));\nObject.defineProperty(exports, \"typeFromAST\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.typeFromAST;\n  },\n}));\nObject.defineProperty(exports, \"validate\", ({\n  enumerable: true,\n  get: function () {\n    return _index4.validate;\n  },\n}));\nObject.defineProperty(exports, \"validateSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _index.validateSchema;\n  },\n}));\nObject.defineProperty(exports, \"valueFromAST\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.valueFromAST;\n  },\n}));\nObject.defineProperty(exports, \"valueFromASTUntyped\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.valueFromASTUntyped;\n  },\n}));\nObject.defineProperty(exports, \"version\", ({\n  enumerable: true,\n  get: function () {\n    return _version.version;\n  },\n}));\nObject.defineProperty(exports, \"versionInfo\", ({\n  enumerable: true,\n  get: function () {\n    return _version.versionInfo;\n  },\n}));\nObject.defineProperty(exports, \"visit\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.visit;\n  },\n}));\nObject.defineProperty(exports, \"visitInParallel\", ({\n  enumerable: true,\n  get: function () {\n    return _index2.visitInParallel;\n  },\n}));\nObject.defineProperty(exports, \"visitWithTypeInfo\", ({\n  enumerable: true,\n  get: function () {\n    return _index6.visitWithTypeInfo;\n  },\n}));\n\nvar _version = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/graphql/version.js\");\n\nvar _graphql = __webpack_require__(/*! ./graphql.js */ \"(ssr)/./node_modules/graphql/graphql.js\");\n\nvar _index = __webpack_require__(/*! ./type/index.js */ \"(ssr)/./node_modules/graphql/type/index.js\");\n\nvar _index2 = __webpack_require__(/*! ./language/index.js */ \"(ssr)/./node_modules/graphql/language/index.js\");\n\nvar _index3 = __webpack_require__(/*! ./execution/index.js */ \"(ssr)/./node_modules/graphql/execution/index.js\");\n\nvar _index4 = __webpack_require__(/*! ./validation/index.js */ \"(ssr)/./node_modules/graphql/validation/index.js\");\n\nvar _index5 = __webpack_require__(/*! ./error/index.js */ \"(ssr)/./node_modules/graphql/error/index.js\");\n\nvar _index6 = __webpack_require__(/*! ./utilities/index.js */ \"(ssr)/./node_modules/graphql/utilities/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/Path.js":
/*!**********************************************!*\
  !*** ./node_modules/graphql/jsutils/Path.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.addPath = addPath;\nexports.pathToArray = pathToArray;\n\n/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nfunction addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nfunction pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL1BhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmLG1CQUFtQjs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvUGF0aC5qcz9jYzdmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5hZGRQYXRoID0gYWRkUGF0aDtcbmV4cG9ydHMucGF0aFRvQXJyYXkgPSBwYXRoVG9BcnJheTtcblxuLyoqXG4gKiBHaXZlbiBhIFBhdGggYW5kIGEga2V5LCByZXR1cm4gYSBuZXcgUGF0aCBjb250YWluaW5nIHRoZSBuZXcga2V5LlxuICovXG5mdW5jdGlvbiBhZGRQYXRoKHByZXYsIGtleSwgdHlwZW5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBwcmV2LFxuICAgIGtleSxcbiAgICB0eXBlbmFtZSxcbiAgfTtcbn1cbi8qKlxuICogR2l2ZW4gYSBQYXRoLCByZXR1cm4gYW4gQXJyYXkgb2YgdGhlIHBhdGgga2V5cy5cbiAqL1xuXG5mdW5jdGlvbiBwYXRoVG9BcnJheShwYXRoKSB7XG4gIGNvbnN0IGZsYXR0ZW5lZCA9IFtdO1xuICBsZXQgY3VyciA9IHBhdGg7XG5cbiAgd2hpbGUgKGN1cnIpIHtcbiAgICBmbGF0dGVuZWQucHVzaChjdXJyLmtleSk7XG4gICAgY3VyciA9IGN1cnIucHJldjtcbiAgfVxuXG4gIHJldHVybiBmbGF0dGVuZWQucmV2ZXJzZSgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/Path.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/devAssert.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/jsutils/devAssert.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.devAssert = devAssert;\n\nfunction devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RldkFzc2VydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7O0FBRWpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGV2QXNzZXJ0LmpzPzY2MzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmRldkFzc2VydCA9IGRldkFzc2VydDtcblxuZnVuY3Rpb24gZGV2QXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBjb25zdCBib29sZWFuQ29uZGl0aW9uID0gQm9vbGVhbihjb25kaXRpb24pO1xuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/devAssert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/didYouMean.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/jsutils/didYouMean.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.didYouMean = didYouMean;\nconst MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nfunction didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RpZFlvdU1lYW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9EQUFvRCxFQUFFOztBQUV0RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGlkWW91TWVhbi5qcz82OWYxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5kaWRZb3VNZWFuID0gZGlkWW91TWVhbjtcbmNvbnN0IE1BWF9TVUdHRVNUSU9OUyA9IDU7XG4vKipcbiAqIEdpdmVuIFsgQSwgQiwgQyBdIHJldHVybiAnIERpZCB5b3UgbWVhbiBBLCBCLCBvciBDPycuXG4gKi9cblxuZnVuY3Rpb24gZGlkWW91TWVhbihmaXJzdEFyZywgc2Vjb25kQXJnKSB7XG4gIGNvbnN0IFtzdWJNZXNzYWdlLCBzdWdnZXN0aW9uc0FyZ10gPSBzZWNvbmRBcmdcbiAgICA/IFtmaXJzdEFyZywgc2Vjb25kQXJnXVxuICAgIDogW3VuZGVmaW5lZCwgZmlyc3RBcmddO1xuICBsZXQgbWVzc2FnZSA9ICcgRGlkIHlvdSBtZWFuICc7XG5cbiAgaWYgKHN1Yk1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlICs9IHN1Yk1lc3NhZ2UgKyAnICc7XG4gIH1cblxuICBjb25zdCBzdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zQXJnLm1hcCgoeCkgPT4gYFwiJHt4fVwiYCk7XG5cbiAgc3dpdGNoIChzdWdnZXN0aW9ucy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gJyc7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gbWVzc2FnZSArIHN1Z2dlc3Rpb25zWzBdICsgJz8nO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBzdWdnZXN0aW9uc1swXSArICcgb3IgJyArIHN1Z2dlc3Rpb25zWzFdICsgJz8nO1xuICB9XG5cbiAgY29uc3Qgc2VsZWN0ZWQgPSBzdWdnZXN0aW9ucy5zbGljZSgwLCBNQVhfU1VHR0VTVElPTlMpO1xuICBjb25zdCBsYXN0SXRlbSA9IHNlbGVjdGVkLnBvcCgpO1xuICByZXR1cm4gbWVzc2FnZSArIHNlbGVjdGVkLmpvaW4oJywgJykgKyAnLCBvciAnICsgbGFzdEl0ZW0gKyAnPyc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/didYouMean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/groupBy.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/jsutils/groupBy.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.groupBy = groupBy;\n\n/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nfunction groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2dyb3VwQnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2dyb3VwQnkuanM/MWM1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuZ3JvdXBCeSA9IGdyb3VwQnk7XG5cbi8qKlxuICogR3JvdXBzIGFycmF5IGl0ZW1zIGludG8gYSBNYXAsIGdpdmVuIGEgZnVuY3Rpb24gdG8gcHJvZHVjZSBncm91cGluZyBrZXkuXG4gKi9cbmZ1bmN0aW9uIGdyb3VwQnkobGlzdCwga2V5Rm4pIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG4gICAgY29uc3Qga2V5ID0ga2V5Rm4oaXRlbSk7XG4gICAgY29uc3QgZ3JvdXAgPSByZXN1bHQuZ2V0KGtleSk7XG5cbiAgICBpZiAoZ3JvdXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0LnNldChrZXksIFtpdGVtXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/groupBy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/identityFunc.js":
/*!******************************************************!*\
  !*** ./node_modules/graphql/jsutils/identityFunc.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.identityFunc = identityFunc;\n\n/**\n * Returns the first argument it receives.\n */\nfunction identityFunc(x) {\n  return x;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lkZW50aXR5RnVuYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pZGVudGl0eUZ1bmMuanM/MGI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuaWRlbnRpdHlGdW5jID0gaWRlbnRpdHlGdW5jO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICovXG5mdW5jdGlvbiBpZGVudGl0eUZ1bmMoeCkge1xuICByZXR1cm4geDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/identityFunc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/inspect.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/jsutils/inspect.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.inspect = inspect;\nconst MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nfunction inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3BlY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDLFdBQVc7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQkFBK0I7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osc0JBQXNCLFdBQVc7QUFDakM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnNwZWN0LmpzPzdlMmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuY29uc3QgTUFYX0FSUkFZX0xFTkdUSCA9IDEwO1xuY29uc3QgTUFYX1JFQ1VSU0lWRV9ERVBUSCA9IDI7XG4vKipcbiAqIFVzZWQgdG8gcHJpbnQgdmFsdWVzIGluIGVycm9yIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGluc3BlY3QodmFsdWUpIHtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKHZhbHVlLCBbXSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlLCBzZWVuVmFsdWVzKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gdmFsdWUubmFtZSA/IGBbZnVuY3Rpb24gJHt2YWx1ZS5uYW1lfV1gIDogJ1tmdW5jdGlvbl0nO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBmb3JtYXRPYmplY3RWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcyk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHByZXZpb3VzbHlTZWVuVmFsdWVzKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH1cblxuICBpZiAocHJldmlvdXNseVNlZW5WYWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgfVxuXG4gIGNvbnN0IHNlZW5WYWx1ZXMgPSBbLi4ucHJldmlvdXNseVNlZW5WYWx1ZXMsIHZhbHVlXTtcblxuICBpZiAoaXNKU09OYWJsZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBqc29uVmFsdWUgPSB2YWx1ZS50b0pTT04oKTsgLy8gY2hlY2sgZm9yIGluZmluaXRlIHJlY3Vyc2lvblxuXG4gICAgaWYgKGpzb25WYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YganNvblZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGpzb25WYWx1ZVxuICAgICAgICA6IGZvcm1hdFZhbHVlKGpzb25WYWx1ZSwgc2VlblZhbHVlcyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZvcm1hdEFycmF5KHZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRPYmplY3QodmFsdWUsIHNlZW5WYWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBpc0pTT05hYmxlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRPYmplY3Qob2JqZWN0LCBzZWVuVmFsdWVzKSB7XG4gIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhvYmplY3QpO1xuXG4gIGlmIChlbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAne30nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnWycgKyBnZXRPYmplY3RUYWcob2JqZWN0KSArICddJztcbiAgfVxuXG4gIGNvbnN0IHByb3BlcnRpZXMgPSBlbnRyaWVzLm1hcChcbiAgICAoW2tleSwgdmFsdWVdKSA9PiBrZXkgKyAnOiAnICsgZm9ybWF0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpLFxuICApO1xuICByZXR1cm4gJ3sgJyArIHByb3BlcnRpZXMuam9pbignLCAnKSArICcgfSc7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGFycmF5LCBzZWVuVmFsdWVzKSB7XG4gIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1tdJztcbiAgfVxuXG4gIGlmIChzZWVuVmFsdWVzLmxlbmd0aCA+IE1BWF9SRUNVUlNJVkVfREVQVEgpIHtcbiAgICByZXR1cm4gJ1tBcnJheV0nO1xuICB9XG5cbiAgY29uc3QgbGVuID0gTWF0aC5taW4oTUFYX0FSUkFZX0xFTkdUSCwgYXJyYXkubGVuZ3RoKTtcbiAgY29uc3QgcmVtYWluaW5nID0gYXJyYXkubGVuZ3RoIC0gbGVuO1xuICBjb25zdCBpdGVtcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpdGVtcy5wdXNoKGZvcm1hdFZhbHVlKGFycmF5W2ldLCBzZWVuVmFsdWVzKSk7XG4gIH1cblxuICBpZiAocmVtYWluaW5nID09PSAxKSB7XG4gICAgaXRlbXMucHVzaCgnLi4uIDEgbW9yZSBpdGVtJyk7XG4gIH0gZWxzZSBpZiAocmVtYWluaW5nID4gMSkge1xuICAgIGl0ZW1zLnB1c2goYC4uLiAke3JlbWFpbmluZ30gbW9yZSBpdGVtc2ApO1xuICB9XG5cbiAgcmV0dXJuICdbJyArIGl0ZW1zLmpvaW4oJywgJykgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGdldE9iamVjdFRhZyhvYmplY3QpIHtcbiAgY29uc3QgdGFnID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuICAgIC5jYWxsKG9iamVjdClcbiAgICAucmVwbGFjZSgvXlxcW29iamVjdCAvLCAnJylcbiAgICAucmVwbGFjZSgvXSQvLCAnJyk7XG5cbiAgaWYgKHRhZyA9PT0gJ09iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IG5hbWUgPSBvYmplY3QuY29uc3RydWN0b3IubmFtZTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSAhPT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/inspect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/instanceOf.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/jsutils/instanceOf.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.instanceOf = void 0;\n\nvar _inspect = __webpack_require__(/*! ./inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\n/* c8 ignore next 3 */\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  \"development\" === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nconst instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = (0, _inspect.inspect)(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\nexports.instanceOf = instanceOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3RhbmNlT2YuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCOztBQUVsQixlQUFlLG1CQUFPLENBQUMscUVBQWM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLEVBQUUsYUFBb0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxXQUFXLEdBQUcsaUJBQWlCOztBQUV6RTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zdGFuY2VPZi5qcz8yOTFhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pbnN0YW5jZU9mID0gdm9pZCAwO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QuanMnKTtcblxuLyogYzggaWdub3JlIG5leHQgMyAqL1xuY29uc3QgaXNQcm9kdWN0aW9uID1cbiAgZ2xvYmFsVGhpcy5wcm9jZXNzICYmIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuLyoqXG4gKiBBIHJlcGxhY2VtZW50IGZvciBpbnN0YW5jZW9mIHdoaWNoIGluY2x1ZGVzIGFuIGVycm9yIHdhcm5pbmcgd2hlbiBtdWx0aS1yZWFsbVxuICogY29uc3RydWN0b3JzIGFyZSBkZXRlY3RlZC5cbiAqIFNlZTogaHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2FkdmFuY2VkL2Jlc3QtcHJhY3RpY2UtcGVyZm9ybWFuY2UuaHRtbCNzZXQtbm9kZV9lbnYtdG8tcHJvZHVjdGlvblxuICogU2VlOiBodHRwczovL3dlYnBhY2suanMub3JnL2d1aWRlcy9wcm9kdWN0aW9uL1xuICovXG5cbmNvbnN0IGluc3RhbmNlT2YgPVxuICAvKiBjOCBpZ25vcmUgbmV4dCA2ICovXG4gIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3XG4gIGlzUHJvZHVjdGlvblxuICAgID8gZnVuY3Rpb24gaW5zdGFuY2VPZih2YWx1ZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgY29uc3RydWN0b3I7XG4gICAgICB9XG4gICAgOiBmdW5jdGlvbiBpbnN0YW5jZU9mKHZhbHVlLCBjb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgX3ZhbHVlJGNvbnN0cnVjdG9yO1xuXG4gICAgICAgICAgLy8gUHJlZmVyIFN5bWJvbC50b1N0cmluZ1RhZyBzaW5jZSBpdCBpcyBpbW11bmUgdG8gbWluaWZpY2F0aW9uLlxuICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddO1xuICAgICAgICAgIGNvbnN0IHZhbHVlQ2xhc3NOYW1lID0gLy8gV2Ugc3RpbGwgbmVlZCB0byBzdXBwb3J0IGNvbnN0cnVjdG9yJ3MgbmFtZSB0byBkZXRlY3QgY29uZmxpY3RzIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgdGhpcyBsaWJyYXJ5LlxuICAgICAgICAgICAgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgYnVnIHNlZSwgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zODAwOVxuICAgICAgICAgICAgICA/IHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ11cbiAgICAgICAgICAgICAgOiAoX3ZhbHVlJGNvbnN0cnVjdG9yID0gdmFsdWUuY29uc3RydWN0b3IpID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgX3ZhbHVlJGNvbnN0cnVjdG9yID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgOiBfdmFsdWUkY29uc3RydWN0b3IubmFtZTtcblxuICAgICAgICAgIGlmIChjbGFzc05hbWUgPT09IHZhbHVlQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdpZmllZFZhbHVlID0gKDAsIF9pbnNwZWN0Lmluc3BlY3QpKHZhbHVlKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHVzZSAke2NsYXNzTmFtZX0gXCIke3N0cmluZ2lmaWVkVmFsdWV9XCIgZnJvbSBhbm90aGVyIG1vZHVsZSBvciByZWFsbS5cblxuRW5zdXJlIHRoYXQgdGhlcmUgaXMgb25seSBvbmUgaW5zdGFuY2Ugb2YgXCJncmFwaHFsXCIgaW4gdGhlIG5vZGVfbW9kdWxlc1xuZGlyZWN0b3J5LiBJZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgXCJncmFwaHFsXCIgYXJlIHRoZSBkZXBlbmRlbmNpZXMgb2Ygb3RoZXJcbnJlbGllZCBvbiBtb2R1bGVzLCB1c2UgXCJyZXNvbHV0aW9uc1wiIHRvIGVuc3VyZSBvbmx5IG9uZSB2ZXJzaW9uIGlzIGluc3RhbGxlZC5cblxuaHR0cHM6Ly95YXJucGtnLmNvbS9lbi9kb2NzL3NlbGVjdGl2ZS12ZXJzaW9uLXJlc29sdXRpb25zXG5cbkR1cGxpY2F0ZSBcImdyYXBocWxcIiBtb2R1bGVzIGNhbm5vdCBiZSB1c2VkIGF0IHRoZSBzYW1lIHRpbWUgc2luY2UgZGlmZmVyZW50XG52ZXJzaW9ucyBtYXkgaGF2ZSBkaWZmZXJlbnQgY2FwYWJpbGl0aWVzIGFuZCBiZWhhdmlvci4gVGhlIGRhdGEgZnJvbSBvbmVcbnZlcnNpb24gdXNlZCBpbiB0aGUgZnVuY3Rpb24gZnJvbSBhbm90aGVyIGNvdWxkIHByb2R1Y2UgY29uZnVzaW5nIGFuZFxuc3B1cmlvdXMgcmVzdWx0cy5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuZXhwb3J0cy5pbnN0YW5jZU9mID0gaW5zdGFuY2VPZjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/instanceOf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/invariant.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/jsutils/invariant.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.invariant = invariant;\n\nfunction invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7O0FBRWpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5qcz84MGNlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pbnZhcmlhbnQgPSBpbnZhcmlhbnQ7XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgY29uc3QgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTtcblxuICBpZiAoIWJvb2xlYW5Db25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBtZXNzYWdlICE9IG51bGwgPyBtZXNzYWdlIDogJ1VuZXhwZWN0ZWQgaW52YXJpYW50IHRyaWdnZXJlZC4nLFxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/invariant.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/isAsyncIterable.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql/jsutils/isAsyncIterable.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.isAsyncIterable = isAsyncIterable;\n\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n */\nfunction isAsyncIterable(maybeAsyncIterable) {\n  return (\n    typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0\n      ? void 0\n      : maybeAsyncIterable[Symbol.asyncIterator]) === 'function'\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzQXN5bmNJdGVyYWJsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaXNBc3luY0l0ZXJhYmxlLmpzP2QxZjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmlzQXN5bmNJdGVyYWJsZSA9IGlzQXN5bmNJdGVyYWJsZTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCBpbXBsZW1lbnRzIHRoZSBBc3luY0l0ZXJhdG9yIHByb3RvY29sIHZpYVxuICogaW1wbGVtZW50aW5nIGEgYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShtYXliZUFzeW5jSXRlcmFibGUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgKG1heWJlQXN5bmNJdGVyYWJsZSA9PT0gbnVsbCB8fCBtYXliZUFzeW5jSXRlcmFibGUgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogbWF5YmVBc3luY0l0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/isAsyncIterable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/isIterableObject.js":
/*!**********************************************************!*\
  !*** ./node_modules/graphql/jsutils/isIterableObject.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.isIterableObject = isIterableObject;\n\n/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nfunction isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzSXRlcmFibGVPYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixjQUFjO0FBQ3BDLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaXNJdGVyYWJsZU9iamVjdC5qcz8yNzU0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pc0l0ZXJhYmxlT2JqZWN0ID0gaXNJdGVyYWJsZU9iamVjdDtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCBpcyBhbiBPYmplY3QgKGkuZS4gbm90IGEgc3RyaW5nIGxpdGVyYWwpXG4gKiBhbmQgaW1wbGVtZW50cyB0aGUgSXRlcmF0b3IgcHJvdG9jb2wuXG4gKlxuICogVGhpcyBtYXkgYmUgdXNlZCBpbiBwbGFjZSBvZiBbQXJyYXkuaXNBcnJheSgpXVtpc0FycmF5XSB0byBkZXRlcm1pbmUgaWZcbiAqIGFuIG9iamVjdCBzaG91bGQgYmUgaXRlcmF0ZWQtb3ZlciBlLmcuIEFycmF5LCBNYXAsIFNldCwgSW50OEFycmF5LFxuICogVHlwZWRBcnJheSwgZXRjLiBidXQgZXhjbHVkZXMgc3RyaW5nIGxpdGVyYWxzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaXNJdGVyYWJsZU9iamVjdChbIDEsIDIsIDMgXSkgLy8gdHJ1ZVxuICogaXNJdGVyYWJsZU9iamVjdChuZXcgTWFwKCkpIC8vIHRydWVcbiAqIGlzSXRlcmFibGVPYmplY3QoJ0FCQycpIC8vIGZhbHNlXG4gKiBpc0l0ZXJhYmxlT2JqZWN0KHsga2V5OiAndmFsdWUnIH0pIC8vIGZhbHNlXG4gKiBpc0l0ZXJhYmxlT2JqZWN0KHsgbGVuZ3RoOiAxLCAwOiAnQWxwaGEnIH0pIC8vIGZhbHNlXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaXNJdGVyYWJsZU9iamVjdChtYXliZUl0ZXJhYmxlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG1heWJlSXRlcmFibGUgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIChtYXliZUl0ZXJhYmxlID09PSBudWxsIHx8IG1heWJlSXRlcmFibGUgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogbWF5YmVJdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKSA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/isIterableObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/isObjectLike.js":
/*!******************************************************!*\
  !*** ./node_modules/graphql/jsutils/isObjectLike.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.isObjectLike = isObjectLike;\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nfunction isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzT2JqZWN0TGlrZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzT2JqZWN0TGlrZS5qcz82NjEzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdFxuICogYG51bGxgIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGw7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/isPromise.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/jsutils/isPromise.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.isPromise = isPromise;\n\n/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\nfunction isPromise(value) {\n  return (\n    typeof (value === null || value === void 0 ? void 0 : value.then) ===\n    'function'\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzUHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzUHJvbWlzZS5qcz9lZGUwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB2YWx1ZSBhY3RzIGxpa2UgYSBQcm9taXNlLCBpLmUuIGhhcyBhIFwidGhlblwiIGZ1bmN0aW9uLFxuICogb3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pID09PVxuICAgICdmdW5jdGlvbidcbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/isPromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/keyMap.js":
/*!************************************************!*\
  !*** ./node_modules/graphql/jsutils/keyMap.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.keyMap = keyMap;\n\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nfunction keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2tleU1hcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLDhCQUE4QjtBQUNyQyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsOEJBQThCO0FBQzdDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9rZXlNYXAuanM/ZWY1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMua2V5TWFwID0ga2V5TWFwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBrZXllZCBKUyBvYmplY3QgZnJvbSBhbiBhcnJheSwgZ2l2ZW4gYSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSBrZXlzXG4gKiBmb3IgZWFjaCB2YWx1ZSBpbiB0aGUgYXJyYXkuXG4gKlxuICogVGhpcyBwcm92aWRlcyBhIGNvbnZlbmllbnQgbG9va3VwIGZvciB0aGUgYXJyYXkgaXRlbXMgaWYgdGhlIGtleSBmdW5jdGlvblxuICogcHJvZHVjZXMgdW5pcXVlIHJlc3VsdHMuXG4gKiBgYGB0c1xuICogY29uc3QgcGhvbmVCb29rID0gW1xuICogICB7IG5hbWU6ICdKb24nLCBudW06ICc1NTUtMTIzNCcgfSxcbiAqICAgeyBuYW1lOiAnSmVubnknLCBudW06ICc4NjctNTMwOScgfVxuICogXVxuICpcbiAqIGNvbnN0IGVudHJpZXNCeU5hbWUgPSBrZXlNYXAoXG4gKiAgIHBob25lQm9vayxcbiAqICAgZW50cnkgPT4gZW50cnkubmFtZVxuICogKVxuICpcbiAqIC8vIHtcbiAqIC8vICAgSm9uOiB7IG5hbWU6ICdKb24nLCBudW06ICc1NTUtMTIzNCcgfSxcbiAqIC8vICAgSmVubnk6IHsgbmFtZTogJ0plbm55JywgbnVtOiAnODY3LTUzMDknIH1cbiAqIC8vIH1cbiAqXG4gKiBjb25zdCBqZW5ueUVudHJ5ID0gZW50cmllc0J5TmFtZVsnSmVubnknXVxuICpcbiAqIC8vIHsgbmFtZTogJ0plbm55JywgbnVtOiAnODU3LTYzMDknIH1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiBrZXlNYXAobGlzdCwga2V5Rm4pIHtcbiAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgIHJlc3VsdFtrZXlGbihpdGVtKV0gPSBpdGVtO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/keyMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/keyValMap.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/jsutils/keyValMap.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.keyValMap = keyValMap;\n\n/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nfunction keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2tleVZhbE1hcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLDhCQUE4QjtBQUNyQyxPQUFPO0FBQ1A7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMva2V5VmFsTWFwLmpzPzJmNzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmtleVZhbE1hcCA9IGtleVZhbE1hcDtcblxuLyoqXG4gKiBDcmVhdGVzIGEga2V5ZWQgSlMgb2JqZWN0IGZyb20gYW4gYXJyYXksIGdpdmVuIGEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUga2V5c1xuICogYW5kIGEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWVzIGZyb20gZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAqIGBgYHRzXG4gKiBjb25zdCBwaG9uZUJvb2sgPSBbXG4gKiAgIHsgbmFtZTogJ0pvbicsIG51bTogJzU1NS0xMjM0JyB9LFxuICogICB7IG5hbWU6ICdKZW5ueScsIG51bTogJzg2Ny01MzA5JyB9XG4gKiBdXG4gKlxuICogLy8geyBKb246ICc1NTUtMTIzNCcsIEplbm55OiAnODY3LTUzMDknIH1cbiAqIGNvbnN0IHBob25lc0J5TmFtZSA9IGtleVZhbE1hcChcbiAqICAgcGhvbmVCb29rLFxuICogICBlbnRyeSA9PiBlbnRyeS5uYW1lLFxuICogICBlbnRyeSA9PiBlbnRyeS5udW1cbiAqIClcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBrZXlWYWxNYXAobGlzdCwga2V5Rm4sIHZhbEZuKSB7XG4gIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICByZXN1bHRba2V5Rm4oaXRlbSldID0gdmFsRm4oaXRlbSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/keyValMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/mapValue.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/jsutils/mapValue.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.mapValue = mapValue;\n\n/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nfunction mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL21hcFZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL21hcFZhbHVlLmpzPzA0OTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLm1hcFZhbHVlID0gbWFwVmFsdWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgbWFwIHdpdGggdGhlIHNhbWUga2V5cyBhcyBgbWFwYCBhbmQgdmFsdWVzIGdlbmVyYXRlZCBieVxuICogcnVubmluZyBlYWNoIHZhbHVlIG9mIGBtYXBgIHRocnUgYGZuYC5cbiAqL1xuZnVuY3Rpb24gbWFwVmFsdWUobWFwLCBmbikge1xuICBjb25zdCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG1hcCkpIHtcbiAgICByZXN1bHRba2V5XSA9IGZuKG1hcFtrZXldLCBrZXkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/mapValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/memoize3.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/jsutils/memoize3.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.memoize3 = memoize3;\n\n/**\n * Memoizes the provided three-argument function.\n */\nfunction memoize3(fn) {\n  let cache0;\n  return function memoized(a1, a2, a3) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let cache2 = cache1.get(a2);\n\n    if (cache2 === undefined) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    let fnResult = cache2.get(a3);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2, a3);\n      cache2.set(a3, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL21lbW9pemUzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9tZW1vaXplMy5qcz8wNGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5tZW1vaXplMyA9IG1lbW9pemUzO1xuXG4vKipcbiAqIE1lbW9pemVzIHRoZSBwcm92aWRlZCB0aHJlZS1hcmd1bWVudCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZTMoZm4pIHtcbiAgbGV0IGNhY2hlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9pemVkKGExLCBhMiwgYTMpIHtcbiAgICBpZiAoY2FjaGUwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlMCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgfVxuXG4gICAgbGV0IGNhY2hlMSA9IGNhY2hlMC5nZXQoYTEpO1xuXG4gICAgaWYgKGNhY2hlMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZTEgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgY2FjaGUwLnNldChhMSwgY2FjaGUxKTtcbiAgICB9XG5cbiAgICBsZXQgY2FjaGUyID0gY2FjaGUxLmdldChhMik7XG5cbiAgICBpZiAoY2FjaGUyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlMiA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICBjYWNoZTEuc2V0KGEyLCBjYWNoZTIpO1xuICAgIH1cblxuICAgIGxldCBmblJlc3VsdCA9IGNhY2hlMi5nZXQoYTMpO1xuXG4gICAgaWYgKGZuUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZuUmVzdWx0ID0gZm4oYTEsIGEyLCBhMyk7XG4gICAgICBjYWNoZTIuc2V0KGEzLCBmblJlc3VsdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuUmVzdWx0O1xuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/memoize3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/naturalCompare.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/jsutils/naturalCompare.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.naturalCompare = naturalCompare;\n\n/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nfunction naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\n\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL25hdHVyYWxDb21wYXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9uYXR1cmFsQ29tcGFyZS5qcz9iYzFmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5uYXR1cmFsQ29tcGFyZSA9IG5hdHVyYWxDb21wYXJlO1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgaW5kaWNhdGluZyB3aGV0aGVyIGEgcmVmZXJlbmNlIHN0cmluZyBjb21lcyBiZWZvcmUsIG9yIGFmdGVyLFxuICogb3IgaXMgdGhlIHNhbWUgYXMgdGhlIGdpdmVuIHN0cmluZyBpbiBuYXR1cmFsIHNvcnQgb3JkZXIuXG4gKlxuICogU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9OYXR1cmFsX3NvcnRfb3JkZXJcbiAqXG4gKi9cbmZ1bmN0aW9uIG5hdHVyYWxDb21wYXJlKGFTdHIsIGJTdHIpIHtcbiAgbGV0IGFJbmRleCA9IDA7XG4gIGxldCBiSW5kZXggPSAwO1xuXG4gIHdoaWxlIChhSW5kZXggPCBhU3RyLmxlbmd0aCAmJiBiSW5kZXggPCBiU3RyLmxlbmd0aCkge1xuICAgIGxldCBhQ2hhciA9IGFTdHIuY2hhckNvZGVBdChhSW5kZXgpO1xuICAgIGxldCBiQ2hhciA9IGJTdHIuY2hhckNvZGVBdChiSW5kZXgpO1xuXG4gICAgaWYgKGlzRGlnaXQoYUNoYXIpICYmIGlzRGlnaXQoYkNoYXIpKSB7XG4gICAgICBsZXQgYU51bSA9IDA7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgKythSW5kZXg7XG4gICAgICAgIGFOdW0gPSBhTnVtICogMTAgKyBhQ2hhciAtIERJR0lUXzA7XG4gICAgICAgIGFDaGFyID0gYVN0ci5jaGFyQ29kZUF0KGFJbmRleCk7XG4gICAgICB9IHdoaWxlIChpc0RpZ2l0KGFDaGFyKSAmJiBhTnVtID4gMCk7XG5cbiAgICAgIGxldCBiTnVtID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICArK2JJbmRleDtcbiAgICAgICAgYk51bSA9IGJOdW0gKiAxMCArIGJDaGFyIC0gRElHSVRfMDtcbiAgICAgICAgYkNoYXIgPSBiU3RyLmNoYXJDb2RlQXQoYkluZGV4KTtcbiAgICAgIH0gd2hpbGUgKGlzRGlnaXQoYkNoYXIpICYmIGJOdW0gPiAwKTtcblxuICAgICAgaWYgKGFOdW0gPCBiTnVtKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFOdW0gPiBiTnVtKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYUNoYXIgPCBiQ2hhcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChhQ2hhciA+IGJDaGFyKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICArK2FJbmRleDtcbiAgICAgICsrYkluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhU3RyLmxlbmd0aCAtIGJTdHIubGVuZ3RoO1xufVxuXG5jb25zdCBESUdJVF8wID0gNDg7XG5jb25zdCBESUdJVF85ID0gNTc7XG5cbmZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICByZXR1cm4gIWlzTmFOKGNvZGUpICYmIERJR0lUXzAgPD0gY29kZSAmJiBjb2RlIDw9IERJR0lUXzk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/naturalCompare.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/printPathArray.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/jsutils/printPathArray.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.printPathArray = printPathArray;\n\n/**\n * Build a string describing the path.\n */\nfunction printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3ByaW50UGF0aEFycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJpbnRQYXRoQXJyYXkuanM/ODU3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMucHJpbnRQYXRoQXJyYXkgPSBwcmludFBhdGhBcnJheTtcblxuLyoqXG4gKiBCdWlsZCBhIHN0cmluZyBkZXNjcmliaW5nIHRoZSBwYXRoLlxuICovXG5mdW5jdGlvbiBwcmludFBhdGhBcnJheShwYXRoKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLm1hcCgoa2V5KSA9PlxuICAgICAgdHlwZW9mIGtleSA9PT0gJ251bWJlcicgPyAnWycgKyBrZXkudG9TdHJpbmcoKSArICddJyA6ICcuJyArIGtleSxcbiAgICApXG4gICAgLmpvaW4oJycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/printPathArray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/promiseForObject.js":
/*!**********************************************************!*\
  !*** ./node_modules/graphql/jsutils/promiseForObject.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.promiseForObject = promiseForObject;\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nfunction promiseForObject(object) {\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3Byb21pc2VGb3JPYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJvbWlzZUZvck9iamVjdC5qcz9lMGMxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5wcm9taXNlRm9yT2JqZWN0ID0gcHJvbWlzZUZvck9iamVjdDtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyYW5zZm9ybXMgYSBKUyBvYmplY3QgYE9iak1hcDxQcm9taXNlPFQ+PmAgaW50b1xuICogYSBgUHJvbWlzZTxPYmpNYXA8VD4+YFxuICpcbiAqIFRoaXMgaXMgYWtpbiB0byBibHVlYmlyZCdzIGBQcm9taXNlLnByb3BzYCwgYnV0IGltcGxlbWVudGVkIG9ubHkgdXNpbmdcbiAqIGBQcm9taXNlLmFsbGAgc28gaXQgd2lsbCB3b3JrIHdpdGggYW55IGltcGxlbWVudGF0aW9uIG9mIEVTNiBwcm9taXNlcy5cbiAqL1xuZnVuY3Rpb24gcHJvbWlzZUZvck9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC52YWx1ZXMob2JqZWN0KSkudGhlbigocmVzb2x2ZWRWYWx1ZXMpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZE9iamVjdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKGNvbnN0IFtpLCBrZXldIG9mIE9iamVjdC5rZXlzKG9iamVjdCkuZW50cmllcygpKSB7XG4gICAgICByZXNvbHZlZE9iamVjdFtrZXldID0gcmVzb2x2ZWRWYWx1ZXNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc29sdmVkT2JqZWN0O1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/promiseForObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/promiseReduce.js":
/*!*******************************************************!*\
  !*** ./node_modules/graphql/jsutils/promiseReduce.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.promiseReduce = promiseReduce;\n\nvar _isPromise = __webpack_require__(/*! ./isPromise.js */ \"(ssr)/./node_modules/graphql/jsutils/isPromise.js\");\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nfunction promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = (0, _isPromise.isPromise)(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3Byb21pc2VSZWR1Y2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YscUJBQXFCOztBQUVyQixpQkFBaUIsbUJBQU8sQ0FBQyx5RUFBZ0I7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJvbWlzZVJlZHVjZS5qcz8yNTRjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5wcm9taXNlUmVkdWNlID0gcHJvbWlzZVJlZHVjZTtcblxudmFyIF9pc1Byb21pc2UgPSByZXF1aXJlKCcuL2lzUHJvbWlzZS5qcycpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gQXJyYXkucHJvdG90eXBlLnJlZHVjZSgpLCBob3dldmVyIHRoZSByZWR1Y2luZyBjYWxsYmFjayBtYXkgcmV0dXJuXG4gKiBhIFByb21pc2UsIGluIHdoaWNoIGNhc2UgcmVkdWN0aW9uIHdpbGwgY29udGludWUgYWZ0ZXIgZWFjaCBwcm9taXNlIHJlc29sdmVzLlxuICpcbiAqIElmIHRoZSBjYWxsYmFjayBkb2VzIG5vdCByZXR1cm4gYSBQcm9taXNlLCB0aGVuIHRoaXMgZnVuY3Rpb24gd2lsbCBhbHNvIG5vdFxuICogcmV0dXJuIGEgUHJvbWlzZS5cbiAqL1xuZnVuY3Rpb24gcHJvbWlzZVJlZHVjZSh2YWx1ZXMsIGNhbGxiYWNrRm4sIGluaXRpYWxWYWx1ZSkge1xuICBsZXQgYWNjdW11bGF0b3IgPSBpbml0aWFsVmFsdWU7XG5cbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICBhY2N1bXVsYXRvciA9ICgwLCBfaXNQcm9taXNlLmlzUHJvbWlzZSkoYWNjdW11bGF0b3IpXG4gICAgICA/IGFjY3VtdWxhdG9yLnRoZW4oKHJlc29sdmVkKSA9PiBjYWxsYmFja0ZuKHJlc29sdmVkLCB2YWx1ZSkpXG4gICAgICA6IGNhbGxiYWNrRm4oYWNjdW11bGF0b3IsIHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/promiseReduce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/suggestionList.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/jsutils/suggestionList.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.suggestionList = suggestionList;\n\nvar _naturalCompare = __webpack_require__(/*! ./naturalCompare.js */ \"(ssr)/./node_modules/graphql/jsutils/naturalCompare.js\");\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nfunction suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0\n      ? distanceDiff\n      : (0, _naturalCompare.naturalCompare)(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjs7QUFFdEIsc0JBQXNCLG1CQUFPLENBQUMsbUZBQXFCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTs7QUFFQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLGNBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLGVBQWU7QUFDakM7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzPzYwMjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnN1Z2dlc3Rpb25MaXN0ID0gc3VnZ2VzdGlvbkxpc3Q7XG5cbnZhciBfbmF0dXJhbENvbXBhcmUgPSByZXF1aXJlKCcuL25hdHVyYWxDb21wYXJlLmpzJyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW52YWxpZCBpbnB1dCBzdHJpbmcgYW5kIGEgbGlzdCBvZiB2YWxpZCBvcHRpb25zLCByZXR1cm5zIGEgZmlsdGVyZWRcbiAqIGxpc3Qgb2YgdmFsaWQgb3B0aW9ucyBzb3J0ZWQgYmFzZWQgb24gdGhlaXIgc2ltaWxhcml0eSB3aXRoIHRoZSBpbnB1dC5cbiAqL1xuZnVuY3Rpb24gc3VnZ2VzdGlvbkxpc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0aW9uc0J5RGlzdGFuY2UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBsZXhpY2FsRGlzdGFuY2UgPSBuZXcgTGV4aWNhbERpc3RhbmNlKGlucHV0KTtcbiAgY29uc3QgdGhyZXNob2xkID0gTWF0aC5mbG9vcihpbnB1dC5sZW5ndGggKiAwLjQpICsgMTtcblxuICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBsZXhpY2FsRGlzdGFuY2UubWVhc3VyZShvcHRpb24sIHRocmVzaG9sZCk7XG5cbiAgICBpZiAoZGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9uc0J5RGlzdGFuY2Vbb3B0aW9uXSA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhvcHRpb25zQnlEaXN0YW5jZSkuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGRpc3RhbmNlRGlmZiA9IG9wdGlvbnNCeURpc3RhbmNlW2FdIC0gb3B0aW9uc0J5RGlzdGFuY2VbYl07XG4gICAgcmV0dXJuIGRpc3RhbmNlRGlmZiAhPT0gMFxuICAgICAgPyBkaXN0YW5jZURpZmZcbiAgICAgIDogKDAsIF9uYXR1cmFsQ29tcGFyZS5uYXR1cmFsQ29tcGFyZSkoYSwgYik7XG4gIH0pO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbGV4aWNhbCBkaXN0YW5jZSBiZXR3ZWVuIHN0cmluZ3MgQSBhbmQgQi5cbiAqXG4gKiBUaGUgXCJkaXN0YW5jZVwiIGJldHdlZW4gdHdvIHN0cmluZ3MgaXMgZ2l2ZW4gYnkgY291bnRpbmcgdGhlIG1pbmltdW0gbnVtYmVyXG4gKiBvZiBlZGl0cyBuZWVkZWQgdG8gdHJhbnNmb3JtIHN0cmluZyBBIGludG8gc3RyaW5nIEIuIEFuIGVkaXQgY2FuIGJlIGFuXG4gKiBpbnNlcnRpb24sIGRlbGV0aW9uLCBvciBzdWJzdGl0dXRpb24gb2YgYSBzaW5nbGUgY2hhcmFjdGVyLCBvciBhIHN3YXAgb2YgdHdvXG4gKiBhZGphY2VudCBjaGFyYWN0ZXJzLlxuICpcbiAqIEluY2x1ZGVzIGEgY3VzdG9tIGFsdGVyYXRpb24gZnJvbSBEYW1lcmF1LUxldmVuc2h0ZWluIHRvIHRyZWF0IGNhc2UgY2hhbmdlc1xuICogYXMgYSBzaW5nbGUgZWRpdCB3aGljaCBoZWxwcyBpZGVudGlmeSBtaXMtY2FzZWQgdmFsdWVzIHdpdGggYW4gZWRpdCBkaXN0YW5jZVxuICogb2YgMS5cbiAqXG4gKiBUaGlzIGRpc3RhbmNlIGNhbiBiZSB1c2VmdWwgZm9yIGRldGVjdGluZyB0eXBvcyBpbiBpbnB1dCBvciBzb3J0aW5nXG4gKi9cblxuY2xhc3MgTGV4aWNhbERpc3RhbmNlIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMuX2lucHV0TG93ZXJDYXNlID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLl9pbnB1dEFycmF5ID0gc3RyaW5nVG9BcnJheSh0aGlzLl9pbnB1dExvd2VyQ2FzZSk7XG4gICAgdGhpcy5fcm93cyA9IFtcbiAgICAgIG5ldyBBcnJheShpbnB1dC5sZW5ndGggKyAxKS5maWxsKDApLFxuICAgICAgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCArIDEpLmZpbGwoMCksXG4gICAgICBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoICsgMSkuZmlsbCgwKSxcbiAgICBdO1xuICB9XG5cbiAgbWVhc3VyZShvcHRpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aGlzLl9pbnB1dCA9PT0gb3B0aW9uKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25Mb3dlckNhc2UgPSBvcHRpb24udG9Mb3dlckNhc2UoKTsgLy8gQW55IGNhc2UgY2hhbmdlIGNvdW50cyBhcyBhIHNpbmdsZSBlZGl0XG5cbiAgICBpZiAodGhpcy5faW5wdXRMb3dlckNhc2UgPT09IG9wdGlvbkxvd2VyQ2FzZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgbGV0IGEgPSBzdHJpbmdUb0FycmF5KG9wdGlvbkxvd2VyQ2FzZSk7XG4gICAgbGV0IGIgPSB0aGlzLl9pbnB1dEFycmF5O1xuXG4gICAgaWYgKGEubGVuZ3RoIDwgYi5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRtcCA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0bXA7XG4gICAgfVxuXG4gICAgY29uc3QgYUxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGNvbnN0IGJMZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIGlmIChhTGVuZ3RoIC0gYkxlbmd0aCA+IHRocmVzaG9sZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCByb3dzID0gdGhpcy5fcm93cztcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGJMZW5ndGg7IGorKykge1xuICAgICAgcm93c1swXVtqXSA9IGo7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gYUxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB1cFJvdyA9IHJvd3NbKGkgLSAxKSAlIDNdO1xuICAgICAgY29uc3QgY3VycmVudFJvdyA9IHJvd3NbaSAlIDNdO1xuICAgICAgbGV0IHNtYWxsZXN0Q2VsbCA9IChjdXJyZW50Um93WzBdID0gaSk7XG5cbiAgICAgIGZvciAobGV0IGogPSAxOyBqIDw9IGJMZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBjb3N0ID0gYVtpIC0gMV0gPT09IGJbaiAtIDFdID8gMCA6IDE7XG4gICAgICAgIGxldCBjdXJyZW50Q2VsbCA9IE1hdGgubWluKFxuICAgICAgICAgIHVwUm93W2pdICsgMSwgLy8gZGVsZXRlXG4gICAgICAgICAgY3VycmVudFJvd1tqIC0gMV0gKyAxLCAvLyBpbnNlcnRcbiAgICAgICAgICB1cFJvd1tqIC0gMV0gKyBjb3N0LCAvLyBzdWJzdGl0dXRlXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGkgPiAxICYmIGogPiAxICYmIGFbaSAtIDFdID09PSBiW2ogLSAyXSAmJiBhW2kgLSAyXSA9PT0gYltqIC0gMV0pIHtcbiAgICAgICAgICAvLyB0cmFuc3Bvc2l0aW9uXG4gICAgICAgICAgY29uc3QgZG91YmxlRGlhZ29uYWxDZWxsID0gcm93c1soaSAtIDIpICUgM11baiAtIDJdO1xuICAgICAgICAgIGN1cnJlbnRDZWxsID0gTWF0aC5taW4oY3VycmVudENlbGwsIGRvdWJsZURpYWdvbmFsQ2VsbCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRDZWxsIDwgc21hbGxlc3RDZWxsKSB7XG4gICAgICAgICAgc21hbGxlc3RDZWxsID0gY3VycmVudENlbGw7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50Um93W2pdID0gY3VycmVudENlbGw7XG4gICAgICB9IC8vIEVhcmx5IGV4aXQsIHNpbmNlIGRpc3RhbmNlIGNhbid0IGdvIHNtYWxsZXIgdGhhbiBzbWFsbGVzdCBlbGVtZW50IG9mIHRoZSBwcmV2aW91cyByb3cuXG5cbiAgICAgIGlmIChzbWFsbGVzdENlbGwgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaXN0YW5jZSA9IHJvd3NbYUxlbmd0aCAlIDNdW2JMZW5ndGhdO1xuICAgIHJldHVybiBkaXN0YW5jZSA8PSB0aHJlc2hvbGQgPyBkaXN0YW5jZSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cikge1xuICBjb25zdCBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShzdHJMZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHtcbiAgICBhcnJheVtpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/suggestionList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/toError.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/jsutils/toError.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.toError = toError;\n\nvar _inspect = __webpack_require__(/*! ./inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\nfunction toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + (0, _inspect.inspect)(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3RvRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZUFBZTs7QUFFZixlQUFlLG1CQUFPLENBQUMscUVBQWM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvdG9FcnJvci5qcz85YjQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy50b0Vycm9yID0gdG9FcnJvcjtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi9pbnNwZWN0LmpzJyk7XG5cbi8qKlxuICogU29tZXRpbWVzIGEgbm9uLWVycm9yIGlzIHRocm93biwgd3JhcCBpdCBhcyBhbiBFcnJvciBpbnN0YW5jZSB0byBlbnN1cmUgYSBjb25zaXN0ZW50IEVycm9yIGludGVyZmFjZS5cbiAqL1xuZnVuY3Rpb24gdG9FcnJvcih0aHJvd25WYWx1ZSkge1xuICByZXR1cm4gdGhyb3duVmFsdWUgaW5zdGFuY2VvZiBFcnJvclxuICAgID8gdGhyb3duVmFsdWVcbiAgICA6IG5ldyBOb25FcnJvclRocm93bih0aHJvd25WYWx1ZSk7XG59XG5cbmNsYXNzIE5vbkVycm9yVGhyb3duIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih0aHJvd25WYWx1ZSkge1xuICAgIHN1cGVyKCdVbmV4cGVjdGVkIGVycm9yIHZhbHVlOiAnICsgKDAsIF9pbnNwZWN0Lmluc3BlY3QpKHRocm93blZhbHVlKSk7XG4gICAgdGhpcy5uYW1lID0gJ05vbkVycm9yVGhyb3duJztcbiAgICB0aGlzLnRocm93blZhbHVlID0gdGhyb3duVmFsdWU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/toError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/toObjMap.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/jsutils/toObjMap.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.toObjMap = toObjMap;\n\nfunction toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3RvT2JqTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3RvT2JqTWFwLmpzPzlmMzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnRvT2JqTWFwID0gdG9PYmpNYXA7XG5cbmZ1bmN0aW9uIHRvT2JqTWFwKG9iaikge1xuICBpZiAob2JqID09IG51bGwpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBjb25zdCBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICBtYXBba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG1hcDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/toObjMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/ast.js":
/*!**********************************************!*\
  !*** ./node_modules/graphql/language/ast.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.Token =\n  exports.QueryDocumentKeys =\n  exports.OperationTypeNode =\n  exports.Location =\n    void 0;\nexports.isNode = isNode;\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nclass Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexports.Location = Location;\n\nclass Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\nexports.Token = Token;\n\n/**\n * @internal\n */\nconst QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nexports.QueryDocumentKeys = QueryDocumentKeys;\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nfunction isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\nexports.OperationTypeNode = OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/ast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/blockString.js":
/*!******************************************************!*\
  !*** ./node_modules/graphql/language/blockString.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.dedentBlockStringLines = dedentBlockStringLines;\nexports.isPrintableAsBlockString = isPrintableAsBlockString;\nexports.printBlockString = printBlockString;\n\nvar _characterClasses = __webpack_require__(/*! ./characterClasses.js */ \"(ssr)/./node_modules/graphql/language/characterClasses.js\");\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nfunction dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (\n    i < str.length &&\n    (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i))\n  ) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nfunction isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nfunction printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every(\n        (line) =>\n          line.length === 0 ||\n          (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0)),\n      ); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine =\n    isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/blockString.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/characterClasses.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql/language/characterClasses.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.isDigit = isDigit;\nexports.isLetter = isLetter;\nexports.isNameContinue = isNameContinue;\nexports.isNameStart = isNameStart;\nexports.isWhiteSpace = isWhiteSpace;\n\n/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nfunction isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nfunction isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nfunction isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nfunction isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nfunction isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9jaGFyYWN0ZXJDbGFzc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGVBQWU7QUFDZixnQkFBZ0I7QUFDaEIsc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQixvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2NoYXJhY3RlckNsYXNzZXMuanM/ZWE0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuaXNEaWdpdCA9IGlzRGlnaXQ7XG5leHBvcnRzLmlzTGV0dGVyID0gaXNMZXR0ZXI7XG5leHBvcnRzLmlzTmFtZUNvbnRpbnVlID0gaXNOYW1lQ29udGludWU7XG5leHBvcnRzLmlzTmFtZVN0YXJ0ID0gaXNOYW1lU3RhcnQ7XG5leHBvcnRzLmlzV2hpdGVTcGFjZSA9IGlzV2hpdGVTcGFjZTtcblxuLyoqXG4gKiBgYGBcbiAqIFdoaXRlU3BhY2UgOjpcbiAqICAgLSBcIkhvcml6b250YWwgVGFiIChVKzAwMDkpXCJcbiAqICAgLSBcIlNwYWNlIChVKzAwMjApXCJcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSAweDAwMDkgfHwgY29kZSA9PT0gMHgwMDIwO1xufVxuLyoqXG4gKiBgYGBcbiAqIERpZ2l0IDo6IG9uZSBvZlxuICogICAtIGAwYCBgMWAgYDJgIGAzYCBgNGAgYDVgIGA2YCBgN2AgYDhgIGA5YFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBpc0RpZ2l0KGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPj0gMHgwMDMwICYmIGNvZGUgPD0gMHgwMDM5O1xufVxuLyoqXG4gKiBgYGBcbiAqIExldHRlciA6OiBvbmUgb2ZcbiAqICAgLSBgQWAgYEJgIGBDYCBgRGAgYEVgIGBGYCBgR2AgYEhgIGBJYCBgSmAgYEtgIGBMYCBgTWBcbiAqICAgLSBgTmAgYE9gIGBQYCBgUWAgYFJgIGBTYCBgVGAgYFVgIGBWYCBgV2AgYFhgIGBZYCBgWmBcbiAqICAgLSBgYWAgYGJgIGBjYCBgZGAgYGVgIGBmYCBgZ2AgYGhgIGBpYCBgamAgYGtgIGBsYCBgbWBcbiAqICAgLSBgbmAgYG9gIGBwYCBgcWAgYHJgIGBzYCBgdGAgYHVgIGB2YCBgd2AgYHhgIGB5YCBgemBcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gaXNMZXR0ZXIoY29kZSkge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDB4MDA2MSAmJiBjb2RlIDw9IDB4MDA3YSkgfHwgLy8gQS1aXG4gICAgKGNvZGUgPj0gMHgwMDQxICYmIGNvZGUgPD0gMHgwMDVhKSAvLyBhLXpcbiAgKTtcbn1cbi8qKlxuICogYGBgXG4gKiBOYW1lU3RhcnQgOjpcbiAqICAgLSBMZXR0ZXJcbiAqICAgLSBgX2BcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gaXNOYW1lU3RhcnQoY29kZSkge1xuICByZXR1cm4gaXNMZXR0ZXIoY29kZSkgfHwgY29kZSA9PT0gMHgwMDVmO1xufVxuLyoqXG4gKiBgYGBcbiAqIE5hbWVDb250aW51ZSA6OlxuICogICAtIExldHRlclxuICogICAtIERpZ2l0XG4gKiAgIC0gYF9gXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5cbmZ1bmN0aW9uIGlzTmFtZUNvbnRpbnVlKGNvZGUpIHtcbiAgcmV0dXJuIGlzTGV0dGVyKGNvZGUpIHx8IGlzRGlnaXQoY29kZSkgfHwgY29kZSA9PT0gMHgwMDVmO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/characterClasses.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/directiveLocation.js":
/*!************************************************************!*\
  !*** ./node_modules/graphql/language/directiveLocation.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.DirectiveLocation = void 0;\n\n/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\nexports.DirectiveLocation = DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (exports.DirectiveLocation = DirectiveLocation = {}));\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3QkFBd0IseUJBQXlCLHlCQUF5QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5qcz8wYTFmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5EaXJlY3RpdmVMb2NhdGlvbiA9IHZvaWQgMDtcblxuLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqL1xudmFyIERpcmVjdGl2ZUxvY2F0aW9uO1xuZXhwb3J0cy5EaXJlY3RpdmVMb2NhdGlvbiA9IERpcmVjdGl2ZUxvY2F0aW9uO1xuXG4oZnVuY3Rpb24gKERpcmVjdGl2ZUxvY2F0aW9uKSB7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydRVUVSWSddID0gJ1FVRVJZJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ01VVEFUSU9OJ10gPSAnTVVUQVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnU1VCU0NSSVBUSU9OJ10gPSAnU1VCU0NSSVBUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZJRUxEJ10gPSAnRklFTEQnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRlJBR01FTlRfREVGSU5JVElPTiddID0gJ0ZSQUdNRU5UX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRlJBR01FTlRfU1BSRUFEJ10gPSAnRlJBR01FTlRfU1BSRUFEJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOTElORV9GUkFHTUVOVCddID0gJ0lOTElORV9GUkFHTUVOVCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydWQVJJQUJMRV9ERUZJTklUSU9OJ10gPSAnVkFSSUFCTEVfREVGSU5JVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydTQ0hFTUEnXSA9ICdTQ0hFTUEnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnU0NBTEFSJ10gPSAnU0NBTEFSJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ09CSkVDVCddID0gJ09CSkVDVCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGSUVMRF9ERUZJTklUSU9OJ10gPSAnRklFTERfREVGSU5JVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydBUkdVTUVOVF9ERUZJTklUSU9OJ10gPSAnQVJHVU1FTlRfREVGSU5JVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydJTlRFUkZBQ0UnXSA9ICdJTlRFUkZBQ0UnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnVU5JT04nXSA9ICdVTklPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydFTlVNJ10gPSAnRU5VTSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydFTlVNX1ZBTFVFJ10gPSAnRU5VTV9WQUxVRSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydJTlBVVF9PQkpFQ1QnXSA9ICdJTlBVVF9PQkpFQ1QnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5QVVRfRklFTERfREVGSU5JVElPTiddID0gJ0lOUFVUX0ZJRUxEX0RFRklOSVRJT04nO1xufSkoRGlyZWN0aXZlTG9jYXRpb24gfHwgKGV4cG9ydHMuRGlyZWN0aXZlTG9jYXRpb24gPSBEaXJlY3RpdmVMb2NhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYERpcmVjdGl2ZUxvY2F0aW9uYC4gV2lsbCBiZSByZW1vdmUgaW4gdjE3LlxuICovXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/directiveLocation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/index.js":
/*!************************************************!*\
  !*** ./node_modules/graphql/language/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"BREAK\", ({\n  enumerable: true,\n  get: function () {\n    return _visitor.BREAK;\n  },\n}));\nObject.defineProperty(exports, \"DirectiveLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _directiveLocation.DirectiveLocation;\n  },\n}));\nObject.defineProperty(exports, \"Kind\", ({\n  enumerable: true,\n  get: function () {\n    return _kinds.Kind;\n  },\n}));\nObject.defineProperty(exports, \"Lexer\", ({\n  enumerable: true,\n  get: function () {\n    return _lexer.Lexer;\n  },\n}));\nObject.defineProperty(exports, \"Location\", ({\n  enumerable: true,\n  get: function () {\n    return _ast.Location;\n  },\n}));\nObject.defineProperty(exports, \"OperationTypeNode\", ({\n  enumerable: true,\n  get: function () {\n    return _ast.OperationTypeNode;\n  },\n}));\nObject.defineProperty(exports, \"Source\", ({\n  enumerable: true,\n  get: function () {\n    return _source.Source;\n  },\n}));\nObject.defineProperty(exports, \"Token\", ({\n  enumerable: true,\n  get: function () {\n    return _ast.Token;\n  },\n}));\nObject.defineProperty(exports, \"TokenKind\", ({\n  enumerable: true,\n  get: function () {\n    return _tokenKind.TokenKind;\n  },\n}));\nObject.defineProperty(exports, \"getEnterLeaveForKind\", ({\n  enumerable: true,\n  get: function () {\n    return _visitor.getEnterLeaveForKind;\n  },\n}));\nObject.defineProperty(exports, \"getLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _location.getLocation;\n  },\n}));\nObject.defineProperty(exports, \"getVisitFn\", ({\n  enumerable: true,\n  get: function () {\n    return _visitor.getVisitFn;\n  },\n}));\nObject.defineProperty(exports, \"isConstValueNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isConstValueNode;\n  },\n}));\nObject.defineProperty(exports, \"isDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isExecutableDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isExecutableDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isSelectionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isSelectionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isTypeDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeExtensionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isTypeExtensionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isTypeNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeSystemDefinitionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isTypeSystemDefinitionNode;\n  },\n}));\nObject.defineProperty(exports, \"isTypeSystemExtensionNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isTypeSystemExtensionNode;\n  },\n}));\nObject.defineProperty(exports, \"isValueNode\", ({\n  enumerable: true,\n  get: function () {\n    return _predicates.isValueNode;\n  },\n}));\nObject.defineProperty(exports, \"parse\", ({\n  enumerable: true,\n  get: function () {\n    return _parser.parse;\n  },\n}));\nObject.defineProperty(exports, \"parseConstValue\", ({\n  enumerable: true,\n  get: function () {\n    return _parser.parseConstValue;\n  },\n}));\nObject.defineProperty(exports, \"parseType\", ({\n  enumerable: true,\n  get: function () {\n    return _parser.parseType;\n  },\n}));\nObject.defineProperty(exports, \"parseValue\", ({\n  enumerable: true,\n  get: function () {\n    return _parser.parseValue;\n  },\n}));\nObject.defineProperty(exports, \"print\", ({\n  enumerable: true,\n  get: function () {\n    return _printer.print;\n  },\n}));\nObject.defineProperty(exports, \"printLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _printLocation.printLocation;\n  },\n}));\nObject.defineProperty(exports, \"printSourceLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _printLocation.printSourceLocation;\n  },\n}));\nObject.defineProperty(exports, \"visit\", ({\n  enumerable: true,\n  get: function () {\n    return _visitor.visit;\n  },\n}));\nObject.defineProperty(exports, \"visitInParallel\", ({\n  enumerable: true,\n  get: function () {\n    return _visitor.visitInParallel;\n  },\n}));\n\nvar _source = __webpack_require__(/*! ./source.js */ \"(ssr)/./node_modules/graphql/language/source.js\");\n\nvar _location = __webpack_require__(/*! ./location.js */ \"(ssr)/./node_modules/graphql/language/location.js\");\n\nvar _printLocation = __webpack_require__(/*! ./printLocation.js */ \"(ssr)/./node_modules/graphql/language/printLocation.js\");\n\nvar _kinds = __webpack_require__(/*! ./kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _tokenKind = __webpack_require__(/*! ./tokenKind.js */ \"(ssr)/./node_modules/graphql/language/tokenKind.js\");\n\nvar _lexer = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/graphql/language/lexer.js\");\n\nvar _parser = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/graphql/language/parser.js\");\n\nvar _printer = __webpack_require__(/*! ./printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _visitor = __webpack_require__(/*! ./visitor.js */ \"(ssr)/./node_modules/graphql/language/visitor.js\");\n\nvar _ast = __webpack_require__(/*! ./ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _predicates = __webpack_require__(/*! ./predicates.js */ \"(ssr)/./node_modules/graphql/language/predicates.js\");\n\nvar _directiveLocation = __webpack_require__(/*! ./directiveLocation.js */ \"(ssr)/./node_modules/graphql/language/directiveLocation.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/kinds.js":
/*!************************************************!*\
  !*** ./node_modules/graphql/language/kinds.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.Kind = void 0;\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\nexports.Kind = Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (exports.Kind = Kind = {}));\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxXQUFXLFlBQVksWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5qcz83NDlkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5LaW5kID0gdm9pZCAwO1xuXG4vKipcbiAqIFRoZSBzZXQgb2YgYWxsb3dlZCBraW5kIHZhbHVlcyBmb3IgQVNUIG5vZGVzLlxuICovXG52YXIgS2luZDtcbmV4cG9ydHMuS2luZCA9IEtpbmQ7XG5cbihmdW5jdGlvbiAoS2luZCkge1xuICBLaW5kWydOQU1FJ10gPSAnTmFtZSc7XG4gIEtpbmRbJ0RPQ1VNRU5UJ10gPSAnRG9jdW1lbnQnO1xuICBLaW5kWydPUEVSQVRJT05fREVGSU5JVElPTiddID0gJ09wZXJhdGlvbkRlZmluaXRpb24nO1xuICBLaW5kWydWQVJJQUJMRV9ERUZJTklUSU9OJ10gPSAnVmFyaWFibGVEZWZpbml0aW9uJztcbiAgS2luZFsnU0VMRUNUSU9OX1NFVCddID0gJ1NlbGVjdGlvblNldCc7XG4gIEtpbmRbJ0ZJRUxEJ10gPSAnRmllbGQnO1xuICBLaW5kWydBUkdVTUVOVCddID0gJ0FyZ3VtZW50JztcbiAgS2luZFsnRlJBR01FTlRfU1BSRUFEJ10gPSAnRnJhZ21lbnRTcHJlYWQnO1xuICBLaW5kWydJTkxJTkVfRlJBR01FTlQnXSA9ICdJbmxpbmVGcmFnbWVudCc7XG4gIEtpbmRbJ0ZSQUdNRU5UX0RFRklOSVRJT04nXSA9ICdGcmFnbWVudERlZmluaXRpb24nO1xuICBLaW5kWydWQVJJQUJMRSddID0gJ1ZhcmlhYmxlJztcbiAgS2luZFsnSU5UJ10gPSAnSW50VmFsdWUnO1xuICBLaW5kWydGTE9BVCddID0gJ0Zsb2F0VmFsdWUnO1xuICBLaW5kWydTVFJJTkcnXSA9ICdTdHJpbmdWYWx1ZSc7XG4gIEtpbmRbJ0JPT0xFQU4nXSA9ICdCb29sZWFuVmFsdWUnO1xuICBLaW5kWydOVUxMJ10gPSAnTnVsbFZhbHVlJztcbiAgS2luZFsnRU5VTSddID0gJ0VudW1WYWx1ZSc7XG4gIEtpbmRbJ0xJU1QnXSA9ICdMaXN0VmFsdWUnO1xuICBLaW5kWydPQkpFQ1QnXSA9ICdPYmplY3RWYWx1ZSc7XG4gIEtpbmRbJ09CSkVDVF9GSUVMRCddID0gJ09iamVjdEZpZWxkJztcbiAgS2luZFsnRElSRUNUSVZFJ10gPSAnRGlyZWN0aXZlJztcbiAgS2luZFsnTkFNRURfVFlQRSddID0gJ05hbWVkVHlwZSc7XG4gIEtpbmRbJ0xJU1RfVFlQRSddID0gJ0xpc3RUeXBlJztcbiAgS2luZFsnTk9OX05VTExfVFlQRSddID0gJ05vbk51bGxUeXBlJztcbiAgS2luZFsnU0NIRU1BX0RFRklOSVRJT04nXSA9ICdTY2hlbWFEZWZpbml0aW9uJztcbiAgS2luZFsnT1BFUkFUSU9OX1RZUEVfREVGSU5JVElPTiddID0gJ09wZXJhdGlvblR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnU0NBTEFSX1RZUEVfREVGSU5JVElPTiddID0gJ1NjYWxhclR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnT0JKRUNUX1RZUEVfREVGSU5JVElPTiddID0gJ09iamVjdFR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnRklFTERfREVGSU5JVElPTiddID0gJ0ZpZWxkRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOUFVUX1ZBTFVFX0RFRklOSVRJT04nXSA9ICdJbnB1dFZhbHVlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04nXSA9ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1VOSU9OX1RZUEVfREVGSU5JVElPTiddID0gJ1VuaW9uVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydFTlVNX1RZUEVfREVGSU5JVElPTiddID0gJ0VudW1UeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0VOVU1fVkFMVUVfREVGSU5JVElPTiddID0gJ0VudW1WYWx1ZURlZmluaXRpb24nO1xuICBLaW5kWydJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OJ10gPSAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0RJUkVDVElWRV9ERUZJTklUSU9OJ10gPSAnRGlyZWN0aXZlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1NDSEVNQV9FWFRFTlNJT04nXSA9ICdTY2hlbWFFeHRlbnNpb24nO1xuICBLaW5kWydTQ0FMQVJfVFlQRV9FWFRFTlNJT04nXSA9ICdTY2FsYXJUeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnT0JKRUNUX1RZUEVfRVhURU5TSU9OJ10gPSAnT2JqZWN0VHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0lOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiddID0gJ0ludGVyZmFjZVR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydVTklPTl9UWVBFX0VYVEVOU0lPTiddID0gJ1VuaW9uVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0VOVU1fVFlQRV9FWFRFTlNJT04nXSA9ICdFbnVtVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0lOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTiddID0gJ0lucHV0T2JqZWN0VHlwZUV4dGVuc2lvbic7XG59KShLaW5kIHx8IChleHBvcnRzLktpbmQgPSBLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHBvc3NpYmxlIGtpbmQgdmFsdWVzIG9mIEFTVCBub2Rlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBLaW5kYC4gV2lsbCBiZSByZW1vdmUgaW4gdjE3LlxuICovXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/kinds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/lexer.js":
/*!************************************************!*\
  !*** ./node_modules/graphql/language/lexer.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.Lexer = void 0;\nexports.isPunctuatorTokenKind = isPunctuatorTokenKind;\n\nvar _syntaxError = __webpack_require__(/*! ../error/syntaxError.js */ \"(ssr)/./node_modules/graphql/error/syntaxError.js\");\n\nvar _ast = __webpack_require__(/*! ./ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _blockString = __webpack_require__(/*! ./blockString.js */ \"(ssr)/./node_modules/graphql/language/blockString.js\");\n\nvar _characterClasses = __webpack_require__(/*! ./characterClasses.js */ \"(ssr)/./node_modules/graphql/language/characterClasses.js\");\n\nvar _tokenKind = __webpack_require__(/*! ./tokenKind.js */ \"(ssr)/./node_modules/graphql/language/tokenKind.js\");\n\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\nclass Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new _ast.Token(\n      _tokenKind.TokenKind.SOF,\n      0,\n      0,\n      0,\n      0,\n    );\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== _tokenKind.TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === _tokenKind.TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexports.Lexer = Lexer;\n\nfunction isPunctuatorTokenKind(kind) {\n  return (\n    kind === _tokenKind.TokenKind.BANG ||\n    kind === _tokenKind.TokenKind.DOLLAR ||\n    kind === _tokenKind.TokenKind.AMP ||\n    kind === _tokenKind.TokenKind.PAREN_L ||\n    kind === _tokenKind.TokenKind.PAREN_R ||\n    kind === _tokenKind.TokenKind.SPREAD ||\n    kind === _tokenKind.TokenKind.COLON ||\n    kind === _tokenKind.TokenKind.EQUALS ||\n    kind === _tokenKind.TokenKind.AT ||\n    kind === _tokenKind.TokenKind.BRACKET_L ||\n    kind === _tokenKind.TokenKind.BRACKET_R ||\n    kind === _tokenKind.TokenKind.BRACE_L ||\n    kind === _tokenKind.TokenKind.PIPE ||\n    kind === _tokenKind.TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return _tokenKind.TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new _ast.Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.BANG,\n          position,\n          position + 1,\n        );\n\n      case 0x0024:\n        // $\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.DOLLAR,\n          position,\n          position + 1,\n        );\n\n      case 0x0026:\n        // &\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.AMP,\n          position,\n          position + 1,\n        );\n\n      case 0x0028:\n        // (\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.PAREN_L,\n          position,\n          position + 1,\n        );\n\n      case 0x0029:\n        // )\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.PAREN_R,\n          position,\n          position + 1,\n        );\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(\n            lexer,\n            _tokenKind.TokenKind.SPREAD,\n            position,\n            position + 3,\n          );\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.COLON,\n          position,\n          position + 1,\n        );\n\n      case 0x003d:\n        // =\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.EQUALS,\n          position,\n          position + 1,\n        );\n\n      case 0x0040:\n        // @\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.AT,\n          position,\n          position + 1,\n        );\n\n      case 0x005b:\n        // [\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.BRACKET_L,\n          position,\n          position + 1,\n        );\n\n      case 0x005d:\n        // ]\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.BRACKET_R,\n          position,\n          position + 1,\n        );\n\n      case 0x007b:\n        // {\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.BRACE_L,\n          position,\n          position + 1,\n        );\n\n      case 0x007c:\n        // |\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.PIPE,\n          position,\n          position + 1,\n        );\n\n      case 0x007d:\n        // }\n        return createToken(\n          lexer,\n          _tokenKind.TokenKind.BRACE_R,\n          position,\n          position + 1,\n        );\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if ((0, _characterClasses.isDigit)(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if ((0, _characterClasses.isNameStart)(code)) {\n      return readName(lexer, position);\n    }\n\n    throw (0, _syntaxError.syntaxError)(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, _tokenKind.TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    _tokenKind.TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if ((0, _characterClasses.isDigit)(code)) {\n      throw (0, _syntaxError.syntaxError)(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || (0, _characterClasses.isNameStart)(code)) {\n    throw (0, _syntaxError.syntaxError)(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!(0, _characterClasses.isDigit)(firstCode)) {\n    throw (0, _syntaxError.syntaxError)(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while ((0, _characterClasses.isDigit)(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(\n        lexer,\n        _tokenKind.TokenKind.STRING,\n        start,\n        position + 1,\n        value,\n      );\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw (0, _syntaxError.syntaxError)(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw (0, _syntaxError.syntaxError)(\n    lexer.source,\n    position,\n    'Unterminated string.',\n  );\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw (0, _syntaxError.syntaxError)(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw (0, _syntaxError.syntaxError)(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw (0, _syntaxError.syntaxError)(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        _tokenKind.TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        (0, _blockString.dedentBlockStringLines)(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw (0, _syntaxError.syntaxError)(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw (0, _syntaxError.syntaxError)(\n    lexer.source,\n    position,\n    'Unterminated string.',\n  );\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if ((0, _characterClasses.isNameContinue)(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    _tokenKind.TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/location.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/language/location.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.getLocation = getLocation;\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nfunction getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || (0, _invariant.invariant)(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sb2NhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUI7O0FBRW5CLGlCQUFpQixtQkFBTyxDQUFDLGtGQUF5Qjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLmpzPzBiNmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmdldExvY2F0aW9uID0gZ2V0TG9jYXRpb247XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxuY29uc3QgTGluZVJlZ0V4cCA9IC9cXHJcXG58W1xcblxccl0vZztcbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2F0aW9uIGluIGEgU291cmNlLlxuICovXG5cbi8qKlxuICogVGFrZXMgYSBTb3VyY2UgYW5kIGEgVVRGLTggY2hhcmFjdGVyIG9mZnNldCwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGxpbmUgYW5kIGNvbHVtbiBhcyBhIFNvdXJjZUxvY2F0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRMb2NhdGlvbihzb3VyY2UsIHBvc2l0aW9uKSB7XG4gIGxldCBsYXN0TGluZVN0YXJ0ID0gMDtcbiAgbGV0IGxpbmUgPSAxO1xuXG4gIGZvciAoY29uc3QgbWF0Y2ggb2Ygc291cmNlLmJvZHkubWF0Y2hBbGwoTGluZVJlZ0V4cCkpIHtcbiAgICB0eXBlb2YgbWF0Y2guaW5kZXggPT09ICdudW1iZXInIHx8ICgwLCBfaW52YXJpYW50LmludmFyaWFudCkoZmFsc2UpO1xuXG4gICAgaWYgKG1hdGNoLmluZGV4ID49IHBvc2l0aW9uKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsYXN0TGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgbGluZSArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsaW5lLFxuICAgIGNvbHVtbjogcG9zaXRpb24gKyAxIC0gbGFzdExpbmVTdGFydCxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/location.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/language/parser.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.Parser = void 0;\nexports.parse = parse;\nexports.parseConstValue = parseConstValue;\nexports.parseType = parseType;\nexports.parseValue = parseValue;\n\nvar _syntaxError = __webpack_require__(/*! ../error/syntaxError.js */ \"(ssr)/./node_modules/graphql/error/syntaxError.js\");\n\nvar _ast = __webpack_require__(/*! ./ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _directiveLocation = __webpack_require__(/*! ./directiveLocation.js */ \"(ssr)/./node_modules/graphql/language/directiveLocation.js\");\n\nvar _kinds = __webpack_require__(/*! ./kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _lexer = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/graphql/language/lexer.js\");\n\nvar _source = __webpack_require__(/*! ./source.js */ \"(ssr)/./node_modules/graphql/language/source.js\");\n\nvar _tokenKind = __webpack_require__(/*! ./tokenKind.js */ \"(ssr)/./node_modules/graphql/language/tokenKind.js\");\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nfunction parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nfunction parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nfunction parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nfunction parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nclass Parser {\n  constructor(source, options = {}) {\n    const sourceObj = (0, _source.isSource)(source)\n      ? source\n      : new _source.Source(source);\n    this._lexer = new _lexer.Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(_tokenKind.TokenKind.NAME);\n    return this.node(token, {\n      kind: _kinds.Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.DOCUMENT,\n      definitions: this.many(\n        _tokenKind.TokenKind.SOF,\n        this.parseDefinition,\n        _tokenKind.TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw (0, _syntaxError.syntaxError)(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: _kinds.Kind.OPERATION_DEFINITION,\n        operation: _ast.OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(_tokenKind.TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(_tokenKind.TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return _ast.OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return _ast.OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return _ast.OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      _tokenKind.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type:\n        (this.expectToken(_tokenKind.TokenKind.COLON),\n        this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: _kinds.Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.SELECTION_SET,\n      selections: this.many(\n        _tokenKind.TokenKind.BRACE_L,\n        this.parseSelection,\n        _tokenKind.TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(_tokenKind.TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(\n      _tokenKind.TokenKind.PAREN_L,\n      item,\n      _tokenKind.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds.Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {\n      return this.node(start, {\n        kind: _kinds.Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: _kinds.Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case _tokenKind.TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case _tokenKind.TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case _tokenKind.TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds.Kind.INT,\n          value: token.value,\n        });\n\n      case _tokenKind.TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds.Kind.FLOAT,\n          value: token.value,\n        });\n\n      case _tokenKind.TokenKind.STRING:\n      case _tokenKind.TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case _tokenKind.TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: _kinds.Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: _kinds.Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: _kinds.Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: _kinds.Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case _tokenKind.TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(_tokenKind.TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw (0, _syntaxError.syntaxError)(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: _kinds.Kind.STRING,\n      value: token.value,\n      block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.LIST,\n      values: this.any(\n        _tokenKind.TokenKind.BRACKET_L,\n        item,\n        _tokenKind.TokenKind.BRACKET_R,\n      ),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.OBJECT,\n      fields: this.any(\n        _tokenKind.TokenKind.BRACE_L,\n        item,\n        _tokenKind.TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(_tokenKind.TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.AT);\n    return this.node(start, {\n      kind: _kinds.Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(_tokenKind.TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: _kinds.Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {\n      return this.node(start, {\n        kind: _kinds.Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return (\n      this.peek(_tokenKind.TokenKind.STRING) ||\n      this.peek(_tokenKind.TokenKind.BLOCK_STRING)\n    );\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: _kinds.Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      _tokenKind.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)\n      ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw (0, _syntaxError.syntaxError)(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(_tokenKind.TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(\n      _tokenKind.TokenKind.PIPE,\n      this.parseDirectiveLocation,\n    );\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (\n      Object.prototype.hasOwnProperty.call(\n        _directiveLocation.DirectiveLocation,\n        name.value,\n      )\n    ) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new _ast.Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw (0, _syntaxError.syntaxError)(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw (0, _syntaxError.syntaxError)(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return (0, _syntaxError.syntaxError)(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== _tokenKind.TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw (0, _syntaxError.syntaxError)(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nexports.Parser = Parser;\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return (0, _lexer.isPunctuatorTokenKind)(kind) ? `\"${kind}\"` : kind;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/predicates.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/language/predicates.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.isConstValueNode = isConstValueNode;\nexports.isDefinitionNode = isDefinitionNode;\nexports.isExecutableDefinitionNode = isExecutableDefinitionNode;\nexports.isSelectionNode = isSelectionNode;\nexports.isTypeDefinitionNode = isTypeDefinitionNode;\nexports.isTypeExtensionNode = isTypeExtensionNode;\nexports.isTypeNode = isTypeNode;\nexports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;\nexports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;\nexports.isValueNode = isValueNode;\n\nvar _kinds = __webpack_require__(/*! ./kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nfunction isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\n\nfunction isExecutableDefinitionNode(node) {\n  return (\n    node.kind === _kinds.Kind.OPERATION_DEFINITION ||\n    node.kind === _kinds.Kind.FRAGMENT_DEFINITION\n  );\n}\n\nfunction isSelectionNode(node) {\n  return (\n    node.kind === _kinds.Kind.FIELD ||\n    node.kind === _kinds.Kind.FRAGMENT_SPREAD ||\n    node.kind === _kinds.Kind.INLINE_FRAGMENT\n  );\n}\n\nfunction isValueNode(node) {\n  return (\n    node.kind === _kinds.Kind.VARIABLE ||\n    node.kind === _kinds.Kind.INT ||\n    node.kind === _kinds.Kind.FLOAT ||\n    node.kind === _kinds.Kind.STRING ||\n    node.kind === _kinds.Kind.BOOLEAN ||\n    node.kind === _kinds.Kind.NULL ||\n    node.kind === _kinds.Kind.ENUM ||\n    node.kind === _kinds.Kind.LIST ||\n    node.kind === _kinds.Kind.OBJECT\n  );\n}\n\nfunction isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === _kinds.Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === _kinds.Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== _kinds.Kind.VARIABLE)\n  );\n}\n\nfunction isTypeNode(node) {\n  return (\n    node.kind === _kinds.Kind.NAMED_TYPE ||\n    node.kind === _kinds.Kind.LIST_TYPE ||\n    node.kind === _kinds.Kind.NON_NULL_TYPE\n  );\n}\n\nfunction isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === _kinds.Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === _kinds.Kind.DIRECTIVE_DEFINITION\n  );\n}\n\nfunction isTypeDefinitionNode(node) {\n  return (\n    node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === _kinds.Kind.UNION_TYPE_DEFINITION ||\n    node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\n\nfunction isTypeSystemExtensionNode(node) {\n  return (\n    node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node)\n  );\n}\n\nfunction isTypeExtensionNode(node) {\n  return (\n    node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === _kinds.Kind.UNION_TYPE_EXTENSION ||\n    node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmVkaWNhdGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIsa0NBQWtDO0FBQ2xDLHVCQUF1QjtBQUN2Qiw0QkFBNEI7QUFDNUIsMkJBQTJCO0FBQzNCLGtCQUFrQjtBQUNsQixrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDLG1CQUFtQjs7QUFFbkIsYUFBYSxtQkFBTyxDQUFDLGtFQUFZOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJlZGljYXRlcy5qcz9lZWY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5pc0NvbnN0VmFsdWVOb2RlID0gaXNDb25zdFZhbHVlTm9kZTtcbmV4cG9ydHMuaXNEZWZpbml0aW9uTm9kZSA9IGlzRGVmaW5pdGlvbk5vZGU7XG5leHBvcnRzLmlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlID0gaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGU7XG5leHBvcnRzLmlzU2VsZWN0aW9uTm9kZSA9IGlzU2VsZWN0aW9uTm9kZTtcbmV4cG9ydHMuaXNUeXBlRGVmaW5pdGlvbk5vZGUgPSBpc1R5cGVEZWZpbml0aW9uTm9kZTtcbmV4cG9ydHMuaXNUeXBlRXh0ZW5zaW9uTm9kZSA9IGlzVHlwZUV4dGVuc2lvbk5vZGU7XG5leHBvcnRzLmlzVHlwZU5vZGUgPSBpc1R5cGVOb2RlO1xuZXhwb3J0cy5pc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZSA9IGlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlO1xuZXhwb3J0cy5pc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlID0gaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZTtcbmV4cG9ydHMuaXNWYWx1ZU5vZGUgPSBpc1ZhbHVlTm9kZTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4va2luZHMuanMnKTtcblxuZnVuY3Rpb24gaXNEZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUobm9kZSkgfHxcbiAgICBpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZShub2RlKSB8fFxuICAgIGlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGUobm9kZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT05cbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNTZWxlY3Rpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLkZJRUxEIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GUkFHTUVOVF9TUFJFQUQgfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLklOTElORV9GUkFHTUVOVFxuICApO1xufVxuXG5mdW5jdGlvbiBpc1ZhbHVlTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5WQVJJQUJMRSB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuSU5UIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GTE9BVCB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU1RSSU5HIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5CT09MRUFOIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5OVUxMIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5FTlVNIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5MSVNUIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5PQkpFQ1RcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNDb25zdFZhbHVlTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgaXNWYWx1ZU5vZGUobm9kZSkgJiZcbiAgICAobm9kZS5raW5kID09PSBfa2luZHMuS2luZC5MSVNUXG4gICAgICA/IG5vZGUudmFsdWVzLnNvbWUoaXNDb25zdFZhbHVlTm9kZSlcbiAgICAgIDogbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5PQkpFQ1RcbiAgICAgID8gbm9kZS5maWVsZHMuc29tZSgoZmllbGQpID0+IGlzQ29uc3RWYWx1ZU5vZGUoZmllbGQudmFsdWUpKVxuICAgICAgOiBub2RlLmtpbmQgIT09IF9raW5kcy5LaW5kLlZBUklBQkxFKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVOb2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLk5BTUVEX1RZUEUgfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLkxJU1RfVFlQRSB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuTk9OX05VTExfVFlQRVxuICApO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5TQ0hFTUFfREVGSU5JVElPTiB8fFxuICAgIGlzVHlwZURlZmluaXRpb25Ob2RlKG5vZGUpIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTlxuICApO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVEZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU0NIRU1BX0VYVEVOU0lPTiB8fCBpc1R5cGVFeHRlbnNpb25Ob2RlKG5vZGUpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZUV4dGVuc2lvbk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OIHx8XG4gICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiB8fFxuICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuVU5JT05fVFlQRV9FWFRFTlNJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLkVOVU1fVFlQRV9FWFRFTlNJT04gfHxcbiAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTlxuICApO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/predicates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/printLocation.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/language/printLocation.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.printLocation = printLocation;\nexports.printSourceLocation = printSourceLocation;\n\nvar _location = __webpack_require__(/*! ./location.js */ \"(ssr)/./node_modules/graphql/language/location.js\");\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nfunction printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    (0, _location.getLocation)(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nfunction printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludExvY2F0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHFCQUFxQjtBQUNyQiwyQkFBMkI7O0FBRTNCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFlOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixZQUFZLEdBQUcsUUFBUSxHQUFHLFVBQVU7QUFDN0Q7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxhQUFhO0FBQ3ZCLFVBQVUsU0FBUztBQUNuQjtBQUNBLFVBQVUsYUFBYTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50TG9jYXRpb24uanM/MjVmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMucHJpbnRMb2NhdGlvbiA9IHByaW50TG9jYXRpb247XG5leHBvcnRzLnByaW50U291cmNlTG9jYXRpb24gPSBwcmludFNvdXJjZUxvY2F0aW9uO1xuXG52YXIgX2xvY2F0aW9uID0gcmVxdWlyZSgnLi9sb2NhdGlvbi5qcycpO1xuXG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gcHJpbnRMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gcHJpbnRTb3VyY2VMb2NhdGlvbihcbiAgICBsb2NhdGlvbi5zb3VyY2UsXG4gICAgKDAsIF9sb2NhdGlvbi5nZXRMb2NhdGlvbikobG9jYXRpb24uc291cmNlLCBsb2NhdGlvbi5zdGFydCksXG4gICk7XG59XG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuXG5mdW5jdGlvbiBwcmludFNvdXJjZUxvY2F0aW9uKHNvdXJjZSwgc291cmNlTG9jYXRpb24pIHtcbiAgY29uc3QgZmlyc3RMaW5lQ29sdW1uT2Zmc2V0ID0gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiAtIDE7XG4gIGNvbnN0IGJvZHkgPSAnJy5wYWRTdGFydChmaXJzdExpbmVDb2x1bW5PZmZzZXQpICsgc291cmNlLmJvZHk7XG4gIGNvbnN0IGxpbmVJbmRleCA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgLSAxO1xuICBjb25zdCBsaW5lT2Zmc2V0ID0gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmxpbmUgLSAxO1xuICBjb25zdCBsaW5lTnVtID0gc291cmNlTG9jYXRpb24ubGluZSArIGxpbmVPZmZzZXQ7XG4gIGNvbnN0IGNvbHVtbk9mZnNldCA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgPT09IDEgPyBmaXJzdExpbmVDb2x1bW5PZmZzZXQgOiAwO1xuICBjb25zdCBjb2x1bW5OdW0gPSBzb3VyY2VMb2NhdGlvbi5jb2x1bW4gKyBjb2x1bW5PZmZzZXQ7XG4gIGNvbnN0IGxvY2F0aW9uU3RyID0gYCR7c291cmNlLm5hbWV9OiR7bGluZU51bX06JHtjb2x1bW5OdW19XFxuYDtcbiAgY29uc3QgbGluZXMgPSBib2R5LnNwbGl0KC9cXHJcXG58W1xcblxccl0vZyk7XG4gIGNvbnN0IGxvY2F0aW9uTGluZSA9IGxpbmVzW2xpbmVJbmRleF07IC8vIFNwZWNpYWwgY2FzZSBmb3IgbWluaWZpZWQgZG9jdW1lbnRzXG5cbiAgaWYgKGxvY2F0aW9uTGluZS5sZW5ndGggPiAxMjApIHtcbiAgICBjb25zdCBzdWJMaW5lSW5kZXggPSBNYXRoLmZsb29yKGNvbHVtbk51bSAvIDgwKTtcbiAgICBjb25zdCBzdWJMaW5lQ29sdW1uTnVtID0gY29sdW1uTnVtICUgODA7XG4gICAgY29uc3Qgc3ViTGluZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYXRpb25MaW5lLmxlbmd0aDsgaSArPSA4MCkge1xuICAgICAgc3ViTGluZXMucHVzaChsb2NhdGlvbkxpbmUuc2xpY2UoaSwgaSArIDgwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIGxvY2F0aW9uU3RyICtcbiAgICAgIHByaW50UHJlZml4ZWRMaW5lcyhbXG4gICAgICAgIFtgJHtsaW5lTnVtfSB8YCwgc3ViTGluZXNbMF1dLFxuICAgICAgICAuLi5zdWJMaW5lcy5zbGljZSgxLCBzdWJMaW5lSW5kZXggKyAxKS5tYXAoKHN1YkxpbmUpID0+IFsnfCcsIHN1YkxpbmVdKSxcbiAgICAgICAgWyd8JywgJ14nLnBhZFN0YXJ0KHN1YkxpbmVDb2x1bW5OdW0pXSxcbiAgICAgICAgWyd8Jywgc3ViTGluZXNbc3ViTGluZUluZGV4ICsgMV1dLFxuICAgICAgXSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICBsb2NhdGlvblN0ciArXG4gICAgcHJpbnRQcmVmaXhlZExpbmVzKFtcbiAgICAgIC8vIExpbmVzIHNwZWNpZmllZCBsaWtlIHRoaXM6IFtcInByZWZpeFwiLCBcInN0cmluZ1wiXSxcbiAgICAgIFtgJHtsaW5lTnVtIC0gMX0gfGAsIGxpbmVzW2xpbmVJbmRleCAtIDFdXSxcbiAgICAgIFtgJHtsaW5lTnVtfSB8YCwgbG9jYXRpb25MaW5lXSxcbiAgICAgIFsnfCcsICdeJy5wYWRTdGFydChjb2x1bW5OdW0pXSxcbiAgICAgIFtgJHtsaW5lTnVtICsgMX0gfGAsIGxpbmVzW2xpbmVJbmRleCArIDFdXSxcbiAgICBdKVxuICApO1xufVxuXG5mdW5jdGlvbiBwcmludFByZWZpeGVkTGluZXMobGluZXMpIHtcbiAgY29uc3QgZXhpc3RpbmdMaW5lcyA9IGxpbmVzLmZpbHRlcigoW18sIGxpbmVdKSA9PiBsaW5lICE9PSB1bmRlZmluZWQpO1xuICBjb25zdCBwYWRMZW4gPSBNYXRoLm1heCguLi5leGlzdGluZ0xpbmVzLm1hcCgoW3ByZWZpeF0pID0+IHByZWZpeC5sZW5ndGgpKTtcbiAgcmV0dXJuIGV4aXN0aW5nTGluZXNcbiAgICAubWFwKChbcHJlZml4LCBsaW5lXSkgPT4gcHJlZml4LnBhZFN0YXJ0KHBhZExlbikgKyAobGluZSA/ICcgJyArIGxpbmUgOiAnJykpXG4gICAgLmpvaW4oJ1xcbicpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/printLocation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/printString.js":
/*!******************************************************!*\
  !*** ./node_modules/graphql/language/printString.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.printString = printString;\n\n/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nfunction printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludFN0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDRDQUE0QztBQUN6RCxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRTdHJpbmcuanM/N2ZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMucHJpbnRTdHJpbmcgPSBwcmludFN0cmluZztcblxuLyoqXG4gKiBQcmludHMgYSBzdHJpbmcgYXMgYSBHcmFwaFFMIFN0cmluZ1ZhbHVlIGxpdGVyYWwuIFJlcGxhY2VzIGNvbnRyb2wgY2hhcmFjdGVyc1xuICogYW5kIGV4Y2x1ZGVkIGNoYXJhY3RlcnMgKFwiIFUrMDAyMiBhbmQgXFxcXCBVKzAwNUMpIHdpdGggZXNjYXBlIHNlcXVlbmNlcy5cbiAqL1xuZnVuY3Rpb24gcHJpbnRTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBgXCIke3N0ci5yZXBsYWNlKGVzY2FwZWRSZWdFeHAsIGVzY2FwZWRSZXBsYWNlcil9XCJgO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG5jb25zdCBlc2NhcGVkUmVnRXhwID0gL1tcXHgwMC1cXHgxZlxceDIyXFx4NWNcXHg3Zi1cXHg5Zl0vZztcblxuZnVuY3Rpb24gZXNjYXBlZFJlcGxhY2VyKHN0cikge1xuICByZXR1cm4gZXNjYXBlU2VxdWVuY2VzW3N0ci5jaGFyQ29kZUF0KDApXTtcbn0gLy8gcHJldHRpZXItaWdub3JlXG5cbmNvbnN0IGVzY2FwZVNlcXVlbmNlcyA9IFtcbiAgJ1xcXFx1MDAwMCcsXG4gICdcXFxcdTAwMDEnLFxuICAnXFxcXHUwMDAyJyxcbiAgJ1xcXFx1MDAwMycsXG4gICdcXFxcdTAwMDQnLFxuICAnXFxcXHUwMDA1JyxcbiAgJ1xcXFx1MDAwNicsXG4gICdcXFxcdTAwMDcnLFxuICAnXFxcXGInLFxuICAnXFxcXHQnLFxuICAnXFxcXG4nLFxuICAnXFxcXHUwMDBCJyxcbiAgJ1xcXFxmJyxcbiAgJ1xcXFxyJyxcbiAgJ1xcXFx1MDAwRScsXG4gICdcXFxcdTAwMEYnLFxuICAnXFxcXHUwMDEwJyxcbiAgJ1xcXFx1MDAxMScsXG4gICdcXFxcdTAwMTInLFxuICAnXFxcXHUwMDEzJyxcbiAgJ1xcXFx1MDAxNCcsXG4gICdcXFxcdTAwMTUnLFxuICAnXFxcXHUwMDE2JyxcbiAgJ1xcXFx1MDAxNycsXG4gICdcXFxcdTAwMTgnLFxuICAnXFxcXHUwMDE5JyxcbiAgJ1xcXFx1MDAxQScsXG4gICdcXFxcdTAwMUInLFxuICAnXFxcXHUwMDFDJyxcbiAgJ1xcXFx1MDAxRCcsXG4gICdcXFxcdTAwMUUnLFxuICAnXFxcXHUwMDFGJyxcbiAgJycsXG4gICcnLFxuICAnXFxcXFwiJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDJGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLCAvLyAzRlxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNEZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJ1xcXFxcXFxcJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNUZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDZGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICdcXFxcdTAwN0YnLFxuICAnXFxcXHUwMDgwJyxcbiAgJ1xcXFx1MDA4MScsXG4gICdcXFxcdTAwODInLFxuICAnXFxcXHUwMDgzJyxcbiAgJ1xcXFx1MDA4NCcsXG4gICdcXFxcdTAwODUnLFxuICAnXFxcXHUwMDg2JyxcbiAgJ1xcXFx1MDA4NycsXG4gICdcXFxcdTAwODgnLFxuICAnXFxcXHUwMDg5JyxcbiAgJ1xcXFx1MDA4QScsXG4gICdcXFxcdTAwOEInLFxuICAnXFxcXHUwMDhDJyxcbiAgJ1xcXFx1MDA4RCcsXG4gICdcXFxcdTAwOEUnLFxuICAnXFxcXHUwMDhGJyxcbiAgJ1xcXFx1MDA5MCcsXG4gICdcXFxcdTAwOTEnLFxuICAnXFxcXHUwMDkyJyxcbiAgJ1xcXFx1MDA5MycsXG4gICdcXFxcdTAwOTQnLFxuICAnXFxcXHUwMDk1JyxcbiAgJ1xcXFx1MDA5NicsXG4gICdcXFxcdTAwOTcnLFxuICAnXFxcXHUwMDk4JyxcbiAgJ1xcXFx1MDA5OScsXG4gICdcXFxcdTAwOUEnLFxuICAnXFxcXHUwMDlCJyxcbiAgJ1xcXFx1MDA5QycsXG4gICdcXFxcdTAwOUQnLFxuICAnXFxcXHUwMDlFJyxcbiAgJ1xcXFx1MDA5RicsXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/printString.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/printer.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/language/printer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.print = print;\n\nvar _blockString = __webpack_require__(/*! ./blockString.js */ \"(ssr)/./node_modules/graphql/language/blockString.js\");\n\nvar _printString = __webpack_require__(/*! ./printString.js */ \"(ssr)/./node_modules/graphql/language/printString.js\");\n\nvar _visitor = __webpack_require__(/*! ./visitor.js */ \"(ssr)/./node_modules/graphql/language/visitor.js\");\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction print(ast) {\n  return (0, _visitor.visit)(ast, printDocASTReducer);\n}\n\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString\n        ? (0, _blockString.printBlockString)(value)\n        : (0, _printString.printString)(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsOEVBQWtCOztBQUU3QyxtQkFBbUIsbUJBQU8sQ0FBQyw4RUFBa0I7O0FBRTdDLGVBQWUsbUJBQU8sQ0FBQyxzRUFBYzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsY0FBYywwQ0FBMEM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsWUFBWTtBQUMxQixHQUFHO0FBQ0g7QUFDQSxZQUFZLHdEQUF3RDtBQUNwRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxjQUFjLGFBQWE7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMseUNBQXlDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsUUFBUSxvRUFBb0U7QUFDNUU7QUFDQTtBQUNBLGtCQUFrQixLQUFLLEVBQUUsaURBQWlEO0FBQzFFLFlBQVksZUFBZSxFQUFFLHFDQUFxQztBQUNsRTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLEdBQUc7QUFDSDtBQUNBLGNBQWMsT0FBTztBQUNyQixHQUFHO0FBQ0g7QUFDQSxjQUFjLDZCQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLE9BQU87QUFDckIsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLE9BQU87QUFDckIsR0FBRztBQUNIO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLEdBQUc7QUFDSDtBQUNBLGNBQWMsUUFBUSxPQUFPLDJCQUEyQjtBQUN4RCxHQUFHO0FBQ0g7QUFDQSxjQUFjLGFBQWE7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxjQUFjLHVCQUF1QjtBQUNyQztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCLEdBQUc7QUFDSDtBQUNBLGNBQWMsTUFBTTtBQUNwQixHQUFHO0FBQ0g7QUFDQSxjQUFjLE1BQU07QUFDcEIsR0FBRztBQUNIO0FBQ0E7QUFDQSxjQUFjLHlDQUF5QztBQUN2RDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0IsR0FBRztBQUNIO0FBQ0EsY0FBYywrQkFBK0I7QUFDN0M7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsbURBQW1EO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLHNEQUFzRDtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxtREFBbUQ7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsbURBQW1EO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLHNDQUFzQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyx1Q0FBdUM7QUFDckQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsK0JBQStCO0FBQzdDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyx1Q0FBdUM7QUFDckQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsMkRBQTJEO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsNEJBQTRCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxrQkFBa0I7QUFDaEM7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLHNDQUFzQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsc0NBQXNDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyx5QkFBeUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLDBCQUEwQjtBQUN4QztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFOztBQUVBO0FBQ0EsZ0JBQWdCLG9DQUFvQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRlci5qcz9iMzhlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5wcmludCA9IHByaW50O1xuXG52YXIgX2Jsb2NrU3RyaW5nID0gcmVxdWlyZSgnLi9ibG9ja1N0cmluZy5qcycpO1xuXG52YXIgX3ByaW50U3RyaW5nID0gcmVxdWlyZSgnLi9wcmludFN0cmluZy5qcycpO1xuXG52YXIgX3Zpc2l0b3IgPSByZXF1aXJlKCcuL3Zpc2l0b3IuanMnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBBU1QgaW50byBhIHN0cmluZywgdXNpbmcgb25lIHNldCBvZiByZWFzb25hYmxlXG4gKiBmb3JtYXR0aW5nIHJ1bGVzLlxuICovXG5mdW5jdGlvbiBwcmludChhc3QpIHtcbiAgcmV0dXJuICgwLCBfdmlzaXRvci52aXNpdCkoYXN0LCBwcmludERvY0FTVFJlZHVjZXIpO1xufVxuXG5jb25zdCBNQVhfTElORV9MRU5HVEggPSA4MDtcbmNvbnN0IHByaW50RG9jQVNUUmVkdWNlciA9IHtcbiAgTmFtZToge1xuICAgIGxlYXZlOiAobm9kZSkgPT4gbm9kZS52YWx1ZSxcbiAgfSxcbiAgVmFyaWFibGU6IHtcbiAgICBsZWF2ZTogKG5vZGUpID0+ICckJyArIG5vZGUubmFtZSxcbiAgfSxcbiAgLy8gRG9jdW1lbnRcbiAgRG9jdW1lbnQ6IHtcbiAgICBsZWF2ZTogKG5vZGUpID0+IGpvaW4obm9kZS5kZWZpbml0aW9ucywgJ1xcblxcbicpLFxuICB9LFxuICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgbGVhdmUobm9kZSkge1xuICAgICAgY29uc3QgdmFyRGVmcyA9IHdyYXAoJygnLCBqb2luKG5vZGUudmFyaWFibGVEZWZpbml0aW9ucywgJywgJyksICcpJyk7XG4gICAgICBjb25zdCBwcmVmaXggPSBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgbm9kZS5vcGVyYXRpb24sXG4gICAgICAgICAgam9pbihbbm9kZS5uYW1lLCB2YXJEZWZzXSksXG4gICAgICAgICAgam9pbihub2RlLmRpcmVjdGl2ZXMsICcgJyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICk7IC8vIEFub255bW91cyBxdWVyaWVzIHdpdGggbm8gZGlyZWN0aXZlcyBvciB2YXJpYWJsZSBkZWZpbml0aW9ucyBjYW4gdXNlXG4gICAgICAvLyB0aGUgcXVlcnkgc2hvcnQgZm9ybS5cblxuICAgICAgcmV0dXJuIChwcmVmaXggPT09ICdxdWVyeScgPyAnJyA6IHByZWZpeCArICcgJykgKyBub2RlLnNlbGVjdGlvblNldDtcbiAgICB9LFxuICB9LFxuICBWYXJpYWJsZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgdmFyaWFibGUsIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgdmFyaWFibGUgK1xuICAgICAgJzogJyArXG4gICAgICB0eXBlICtcbiAgICAgIHdyYXAoJyA9ICcsIGRlZmF1bHRWYWx1ZSkgK1xuICAgICAgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSksXG4gIH0sXG4gIFNlbGVjdGlvblNldDoge1xuICAgIGxlYXZlOiAoeyBzZWxlY3Rpb25zIH0pID0+IGJsb2NrKHNlbGVjdGlvbnMpLFxuICB9LFxuICBGaWVsZDoge1xuICAgIGxlYXZlKHsgYWxpYXMsIG5hbWUsIGFyZ3VtZW50czogYXJncywgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0IH0pIHtcbiAgICAgIGNvbnN0IHByZWZpeCA9IHdyYXAoJycsIGFsaWFzLCAnOiAnKSArIG5hbWU7XG4gICAgICBsZXQgYXJnc0xpbmUgPSBwcmVmaXggKyB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKTtcblxuICAgICAgaWYgKGFyZ3NMaW5lLmxlbmd0aCA+IE1BWF9MSU5FX0xFTkdUSCkge1xuICAgICAgICBhcmdzTGluZSA9IHByZWZpeCArIHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gam9pbihbYXJnc0xpbmUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgc2VsZWN0aW9uU2V0XSwgJyAnKTtcbiAgICB9LFxuICB9LFxuICBBcmd1bWVudDoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCB2YWx1ZSB9KSA9PiBuYW1lICsgJzogJyArIHZhbHVlLFxuICB9LFxuICAvLyBGcmFnbWVudHNcbiAgRnJhZ21lbnRTcHJlYWQ6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgJy4uLicgKyBuYW1lICsgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSksXG4gIH0sXG4gIElubGluZUZyYWdtZW50OiB7XG4gICAgbGVhdmU6ICh7IHR5cGVDb25kaXRpb24sIGRpcmVjdGl2ZXMsIHNlbGVjdGlvblNldCB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICcuLi4nLFxuICAgICAgICAgIHdyYXAoJ29uICcsIHR5cGVDb25kaXRpb24pLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBzZWxlY3Rpb25TZXQsXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEZyYWdtZW50RGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoXG4gICAgICB7IG5hbWUsIHR5cGVDb25kaXRpb24sIHZhcmlhYmxlRGVmaW5pdGlvbnMsIGRpcmVjdGl2ZXMsIHNlbGVjdGlvblNldCB9LCAvLyBOb3RlOiBmcmFnbWVudCB2YXJpYWJsZSBkZWZpbml0aW9ucyBhcmUgZXhwZXJpbWVudGFsIGFuZCBtYXkgYmUgY2hhbmdlZFxuICAgICkgPT5cbiAgICAgIC8vIG9yIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgIGBmcmFnbWVudCAke25hbWV9JHt3cmFwKCcoJywgam9pbih2YXJpYWJsZURlZmluaXRpb25zLCAnLCAnKSwgJyknKX0gYCArXG4gICAgICBgb24gJHt0eXBlQ29uZGl0aW9ufSAke3dyYXAoJycsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgJyAnKX1gICtcbiAgICAgIHNlbGVjdGlvblNldCxcbiAgfSxcbiAgLy8gVmFsdWVcbiAgSW50VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUgfSkgPT4gdmFsdWUsXG4gIH0sXG4gIEZsb2F0VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUgfSkgPT4gdmFsdWUsXG4gIH0sXG4gIFN0cmluZ1ZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IHZhbHVlLCBibG9jazogaXNCbG9ja1N0cmluZyB9KSA9PlxuICAgICAgaXNCbG9ja1N0cmluZ1xuICAgICAgICA/ICgwLCBfYmxvY2tTdHJpbmcucHJpbnRCbG9ja1N0cmluZykodmFsdWUpXG4gICAgICAgIDogKDAsIF9wcmludFN0cmluZy5wcmludFN0cmluZykodmFsdWUpLFxuICB9LFxuICBCb29sZWFuVmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUgfSkgPT4gKHZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJyksXG4gIH0sXG4gIE51bGxWYWx1ZToge1xuICAgIGxlYXZlOiAoKSA9PiAnbnVsbCcsXG4gIH0sXG4gIEVudW1WYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZSxcbiAgfSxcbiAgTGlzdFZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IHZhbHVlcyB9KSA9PiAnWycgKyBqb2luKHZhbHVlcywgJywgJykgKyAnXScsXG4gIH0sXG4gIE9iamVjdFZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IGZpZWxkcyB9KSA9PiAneycgKyBqb2luKGZpZWxkcywgJywgJykgKyAnfScsXG4gIH0sXG4gIE9iamVjdEZpZWxkOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIHZhbHVlIH0pID0+IG5hbWUgKyAnOiAnICsgdmFsdWUsXG4gIH0sXG4gIC8vIERpcmVjdGl2ZVxuICBEaXJlY3RpdmU6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgYXJndW1lbnRzOiBhcmdzIH0pID0+XG4gICAgICAnQCcgKyBuYW1lICsgd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJyksXG4gIH0sXG4gIC8vIFR5cGVcbiAgTmFtZWRUeXBlOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUgfSkgPT4gbmFtZSxcbiAgfSxcbiAgTGlzdFR5cGU6IHtcbiAgICBsZWF2ZTogKHsgdHlwZSB9KSA9PiAnWycgKyB0eXBlICsgJ10nLFxuICB9LFxuICBOb25OdWxsVHlwZToge1xuICAgIGxlYXZlOiAoeyB0eXBlIH0pID0+IHR5cGUgKyAnIScsXG4gIH0sXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNjaGVtYURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIGRpcmVjdGl2ZXMsIG9wZXJhdGlvblR5cGVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oWydzY2hlbWEnLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKG9wZXJhdGlvblR5cGVzKV0sICcgJyksXG4gIH0sXG4gIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IG9wZXJhdGlvbiwgdHlwZSB9KSA9PiBvcGVyYXRpb24gKyAnOiAnICsgdHlwZSxcbiAgfSxcbiAgU2NhbGFyVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGRpcmVjdGl2ZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihbJ3NjYWxhcicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyksXG4gIH0sXG4gIE9iamVjdFR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBpbnRlcmZhY2VzLCBkaXJlY3RpdmVzLCBmaWVsZHMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBibG9jayhmaWVsZHMpLFxuICAgICAgICBdLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBGaWVsZERlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGFyZ3VtZW50czogYXJncywgdHlwZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBuYW1lICtcbiAgICAgIChoYXNNdWx0aWxpbmVJdGVtcyhhcmdzKVxuICAgICAgICA/IHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpXG4gICAgICAgIDogd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJykpICtcbiAgICAgICc6ICcgK1xuICAgICAgdHlwZSArXG4gICAgICB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKSxcbiAgfSxcbiAgSW5wdXRWYWx1ZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFxuICAgICAgICBbbmFtZSArICc6ICcgKyB0eXBlLCB3cmFwKCc9ICcsIGRlZmF1bHRWYWx1ZSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBpbnRlcmZhY2VzLCBkaXJlY3RpdmVzLCBmaWVsZHMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICdpbnRlcmZhY2UnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIFVuaW9uVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGRpcmVjdGl2ZXMsIHR5cGVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oXG4gICAgICAgIFsndW5pb24nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHdyYXAoJz0gJywgam9pbih0eXBlcywgJyB8ICcpKV0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEVudW1UeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcywgdmFsdWVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oWydlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKSxcbiAgfSxcbiAgRW51bVZhbHVlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArIGpvaW4oW25hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyksXG4gIH0sXG4gIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFsnaW5wdXQnLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpLFxuICB9LFxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBhcmd1bWVudHM6IGFyZ3MsIHJlcGVhdGFibGUsIGxvY2F0aW9ucyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICAnZGlyZWN0aXZlIEAnICtcbiAgICAgIG5hbWUgK1xuICAgICAgKGhhc011bHRpbGluZUl0ZW1zKGFyZ3MpXG4gICAgICAgID8gd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJylcbiAgICAgICAgOiB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSkgK1xuICAgICAgKHJlcGVhdGFibGUgPyAnIHJlcGVhdGFibGUnIDogJycpICtcbiAgICAgICcgb24gJyArXG4gICAgICBqb2luKGxvY2F0aW9ucywgJyB8ICcpLFxuICB9LFxuICBTY2hlbWFFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgZGlyZWN0aXZlcywgb3BlcmF0aW9uVHlwZXMgfSkgPT5cbiAgICAgIGpvaW4oXG4gICAgICAgIFsnZXh0ZW5kIHNjaGVtYScsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sob3BlcmF0aW9uVHlwZXMpXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgU2NhbGFyVHlwZUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICBqb2luKFsnZXh0ZW5kIHNjYWxhcicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyksXG4gIH0sXG4gIE9iamVjdFR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgaW50ZXJmYWNlcywgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ2V4dGVuZCB0eXBlJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBibG9jayhmaWVsZHMpLFxuICAgICAgICBdLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGludGVyZmFjZXMsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICdleHRlbmQgaW50ZXJmYWNlJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBibG9jayhmaWVsZHMpLFxuICAgICAgICBdLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBVbmlvblR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcywgdHlwZXMgfSkgPT5cbiAgICAgIGpvaW4oXG4gICAgICAgIFtcbiAgICAgICAgICAnZXh0ZW5kIHVuaW9uJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICB3cmFwKCc9ICcsIGpvaW4odHlwZXMsICcgfCAnKSksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGRpcmVjdGl2ZXMsIHZhbHVlcyB9KSA9PlxuICAgICAgam9pbihbJ2V4dGVuZCBlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKSxcbiAgfSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgam9pbihbJ2V4dGVuZCBpbnB1dCcsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyksXG4gIH0sXG59O1xuLyoqXG4gKiBHaXZlbiBtYXliZUFycmF5LCBwcmludCBhbiBlbXB0eSBzdHJpbmcgaWYgaXQgaXMgbnVsbCBvciBlbXB0eSwgb3RoZXJ3aXNlXG4gKiBwcmludCBhbGwgaXRlbXMgdG9nZXRoZXIgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvciBpZiBwcm92aWRlZFxuICovXG5cbmZ1bmN0aW9uIGpvaW4obWF5YmVBcnJheSwgc2VwYXJhdG9yID0gJycpIHtcbiAgdmFyIF9tYXliZUFycmF5JGZpbHRlciRqbztcblxuICByZXR1cm4gKF9tYXliZUFycmF5JGZpbHRlciRqbyA9XG4gICAgbWF5YmVBcnJheSA9PT0gbnVsbCB8fCBtYXliZUFycmF5ID09PSB2b2lkIDBcbiAgICAgID8gdm9pZCAwXG4gICAgICA6IG1heWJlQXJyYXkuZmlsdGVyKCh4KSA9PiB4KS5qb2luKHNlcGFyYXRvcikpICE9PSBudWxsICYmXG4gICAgX21heWJlQXJyYXkkZmlsdGVyJGpvICE9PSB2b2lkIDBcbiAgICA/IF9tYXliZUFycmF5JGZpbHRlciRqb1xuICAgIDogJyc7XG59XG4vKipcbiAqIEdpdmVuIGFycmF5LCBwcmludCBlYWNoIGl0ZW0gb24gaXRzIG93biBsaW5lLCB3cmFwcGVkIGluIGFuIGluZGVudGVkIGB7IH1gIGJsb2NrLlxuICovXG5cbmZ1bmN0aW9uIGJsb2NrKGFycmF5KSB7XG4gIHJldHVybiB3cmFwKCd7XFxuJywgaW5kZW50KGpvaW4oYXJyYXksICdcXG4nKSksICdcXG59Jyk7XG59XG4vKipcbiAqIElmIG1heWJlU3RyaW5nIGlzIG5vdCBudWxsIG9yIGVtcHR5LCB0aGVuIHdyYXAgd2l0aCBzdGFydCBhbmQgZW5kLCBvdGhlcndpc2UgcHJpbnQgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIHdyYXAoc3RhcnQsIG1heWJlU3RyaW5nLCBlbmQgPSAnJykge1xuICByZXR1cm4gbWF5YmVTdHJpbmcgIT0gbnVsbCAmJiBtYXliZVN0cmluZyAhPT0gJydcbiAgICA/IHN0YXJ0ICsgbWF5YmVTdHJpbmcgKyBlbmRcbiAgICA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbmRlbnQoc3RyKSB7XG4gIHJldHVybiB3cmFwKCcgICcsIHN0ci5yZXBsYWNlKC9cXG4vZywgJ1xcbiAgJykpO1xufVxuXG5mdW5jdGlvbiBoYXNNdWx0aWxpbmVJdGVtcyhtYXliZUFycmF5KSB7XG4gIHZhciBfbWF5YmVBcnJheSRzb21lO1xuXG4gIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIChfbWF5YmVBcnJheSRzb21lID1cbiAgICBtYXliZUFycmF5ID09PSBudWxsIHx8IG1heWJlQXJyYXkgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogbWF5YmVBcnJheS5zb21lKChzdHIpID0+IHN0ci5pbmNsdWRlcygnXFxuJykpKSAhPT0gbnVsbCAmJlxuICAgIF9tYXliZUFycmF5JHNvbWUgIT09IHZvaWQgMFxuICAgID8gX21heWJlQXJyYXkkc29tZVxuICAgIDogZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/printer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/source.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/language/source.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.Source = void 0;\nexports.isSource = isSource;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _instanceOf = __webpack_require__(/*! ../jsutils/instanceOf.js */ \"(ssr)/./node_modules/graphql/jsutils/instanceOf.js\");\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nclass Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`,\n      );\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      (0, _devAssert.devAssert)(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      (0, _devAssert.devAssert)(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexports.Source = Source;\n\nfunction isSource(source) {\n  return (0, _instanceOf.instanceOf)(source, Source);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsY0FBYztBQUNkLGdCQUFnQjs7QUFFaEIsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQXlCOztBQUVsRCxlQUFlLG1CQUFPLENBQUMsOEVBQXVCOztBQUU5QyxrQkFBa0IsbUJBQU8sQ0FBQyxvRkFBMEI7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLHFCQUFxQjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsNEJBQTRCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYzs7QUFFZDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3NvdXJjZS5qcz80YjVmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5Tb3VyY2UgPSB2b2lkIDA7XG5leHBvcnRzLmlzU291cmNlID0gaXNTb3VyY2U7XG5cbnZhciBfZGV2QXNzZXJ0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9kZXZBc3NlcnQuanMnKTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW5zdGFuY2VPZi5qcycpO1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2Ygc291cmNlIGlucHV0IHRvIEdyYXBoUUwuIFRoZSBgbmFtZWAgYW5kIGBsb2NhdGlvbk9mZnNldGAgcGFyYW1ldGVycyBhcmVcbiAqIG9wdGlvbmFsLCBidXQgdGhleSBhcmUgdXNlZnVsIGZvciBjbGllbnRzIHdobyBzdG9yZSBHcmFwaFFMIGRvY3VtZW50cyBpbiBzb3VyY2UgZmlsZXMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIEdyYXBoUUwgaW5wdXQgc3RhcnRzIGF0IGxpbmUgNDAgaW4gYSBmaWxlIG5hbWVkIGBGb28uZ3JhcGhxbGAsIGl0IG1pZ2h0XG4gKiBiZSB1c2VmdWwgZm9yIGBuYW1lYCB0byBiZSBgXCJGb28uZ3JhcGhxbFwiYCBhbmQgbG9jYXRpb24gdG8gYmUgYHsgbGluZTogNDAsIGNvbHVtbjogMSB9YC5cbiAqIFRoZSBgbGluZWAgYW5kIGBjb2x1bW5gIHByb3BlcnRpZXMgaW4gYGxvY2F0aW9uT2Zmc2V0YCBhcmUgMS1pbmRleGVkLlxuICovXG5jbGFzcyBTb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBib2R5LFxuICAgIG5hbWUgPSAnR3JhcGhRTCByZXF1ZXN0JyxcbiAgICBsb2NhdGlvbk9mZnNldCA9IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDEsXG4gICAgfSxcbiAgKSB7XG4gICAgdHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEJvZHkgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQ6ICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGJvZHkpfS5gLFxuICAgICAgKTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldCA9IGxvY2F0aW9uT2Zmc2V0O1xuICAgIHRoaXMubG9jYXRpb25PZmZzZXQubGluZSA+IDAgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnbGluZSBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUuJyxcbiAgICAgICk7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldC5jb2x1bW4gPiAwIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ2NvbHVtbiBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUuJyxcbiAgICAgICk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdTb3VyY2UnO1xuICB9XG59XG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgU291cmNlIG9iamVjdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnRzLlNvdXJjZSA9IFNvdXJjZTtcblxuZnVuY3Rpb24gaXNTb3VyY2Uoc291cmNlKSB7XG4gIHJldHVybiAoMCwgX2luc3RhbmNlT2YuaW5zdGFuY2VPZikoc291cmNlLCBTb3VyY2UpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/source.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/tokenKind.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/language/tokenKind.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.TokenKind = void 0;\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\nexports.TokenKind = TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (exports.TokenKind = TokenKind = {}));\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS90b2tlbktpbmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0JBQWdCLGlCQUFpQixpQkFBaUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvdG9rZW5LaW5kLmpzPzc3YzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlRva2VuS2luZCA9IHZvaWQgMDtcblxuLyoqXG4gKiBBbiBleHBvcnRlZCBlbnVtIGRlc2NyaWJpbmcgdGhlIGRpZmZlcmVudCBraW5kcyBvZiB0b2tlbnMgdGhhdCB0aGVcbiAqIGxleGVyIGVtaXRzLlxuICovXG52YXIgVG9rZW5LaW5kO1xuZXhwb3J0cy5Ub2tlbktpbmQgPSBUb2tlbktpbmQ7XG5cbihmdW5jdGlvbiAoVG9rZW5LaW5kKSB7XG4gIFRva2VuS2luZFsnU09GJ10gPSAnPFNPRj4nO1xuICBUb2tlbktpbmRbJ0VPRiddID0gJzxFT0Y+JztcbiAgVG9rZW5LaW5kWydCQU5HJ10gPSAnISc7XG4gIFRva2VuS2luZFsnRE9MTEFSJ10gPSAnJCc7XG4gIFRva2VuS2luZFsnQU1QJ10gPSAnJic7XG4gIFRva2VuS2luZFsnUEFSRU5fTCddID0gJygnO1xuICBUb2tlbktpbmRbJ1BBUkVOX1InXSA9ICcpJztcbiAgVG9rZW5LaW5kWydTUFJFQUQnXSA9ICcuLi4nO1xuICBUb2tlbktpbmRbJ0NPTE9OJ10gPSAnOic7XG4gIFRva2VuS2luZFsnRVFVQUxTJ10gPSAnPSc7XG4gIFRva2VuS2luZFsnQVQnXSA9ICdAJztcbiAgVG9rZW5LaW5kWydCUkFDS0VUX0wnXSA9ICdbJztcbiAgVG9rZW5LaW5kWydCUkFDS0VUX1InXSA9ICddJztcbiAgVG9rZW5LaW5kWydCUkFDRV9MJ10gPSAneyc7XG4gIFRva2VuS2luZFsnUElQRSddID0gJ3wnO1xuICBUb2tlbktpbmRbJ0JSQUNFX1InXSA9ICd9JztcbiAgVG9rZW5LaW5kWydOQU1FJ10gPSAnTmFtZSc7XG4gIFRva2VuS2luZFsnSU5UJ10gPSAnSW50JztcbiAgVG9rZW5LaW5kWydGTE9BVCddID0gJ0Zsb2F0JztcbiAgVG9rZW5LaW5kWydTVFJJTkcnXSA9ICdTdHJpbmcnO1xuICBUb2tlbktpbmRbJ0JMT0NLX1NUUklORyddID0gJ0Jsb2NrU3RyaW5nJztcbiAgVG9rZW5LaW5kWydDT01NRU5UJ10gPSAnQ29tbWVudCc7XG59KShUb2tlbktpbmQgfHwgKGV4cG9ydHMuVG9rZW5LaW5kID0gVG9rZW5LaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHRva2VuIGtpbmRzIHZhbHVlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBUb2tlbktpbmRgLiBXaWxsIGJlIHJlbW92ZSBpbiB2MTcuXG4gKi9cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/tokenKind.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/visitor.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/language/visitor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.BREAK = void 0;\nexports.getEnterLeaveForKind = getEnterLeaveForKind;\nexports.getVisitFn = getVisitFn;\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _ast = __webpack_require__(/*! ./ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _kinds = __webpack_require__(/*! ./kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nconst BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexports.BREAK = BREAK;\n\nfunction visit(root, visitor, visitorKeys = _ast.QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(_kinds.Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = { ...node };\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      (0, _ast.isNode)(node) ||\n        (0, _devAssert.devAssert)(\n          false,\n          `Invalid AST Node: ${(0, _inspect.inspect)(node)}.`,\n        );\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if ((0, _ast.isNode)(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nfunction visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(_kinds.Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nfunction getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nfunction getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/visitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/assertName.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/type/assertName.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.assertEnumValueName = assertEnumValueName;\nexports.assertName = assertName;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _characterClasses = __webpack_require__(/*! ../language/characterClasses.js */ \"(ssr)/./node_modules/graphql/language/characterClasses.js\");\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertName(name) {\n  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');\n  typeof name === 'string' ||\n    (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new _GraphQLError.GraphQLError(\n      'Expected name to be a non-empty string.',\n    );\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {\n      throw new _GraphQLError.GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {\n    throw new _GraphQLError.GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nfunction assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new _GraphQLError.GraphQLError(\n      `Enum values cannot be named: ${name}`,\n    );\n  }\n\n  return assertName(name);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2Fzc2VydE5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkJBQTJCO0FBQzNCLGtCQUFrQjs7QUFFbEIsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQXlCOztBQUVsRCxvQkFBb0IsbUJBQU8sQ0FBQyxvRkFBMEI7O0FBRXRELHdCQUF3QixtQkFBTyxDQUFDLGtHQUFpQzs7QUFFakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQSxxREFBcUQsS0FBSztBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhDQUE4QyxLQUFLO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLEtBQUs7QUFDM0M7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2Fzc2VydE5hbWUuanM/OWZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuYXNzZXJ0RW51bVZhbHVlTmFtZSA9IGFzc2VydEVudW1WYWx1ZU5hbWU7XG5leHBvcnRzLmFzc2VydE5hbWUgPSBhc3NlcnROYW1lO1xuXG52YXIgX2RldkFzc2VydCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvZGV2QXNzZXJ0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfY2hhcmFjdGVyQ2xhc3NlcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2NoYXJhY3RlckNsYXNzZXMuanMnKTtcblxuLyoqXG4gKiBVcGhvbGRzIHRoZSBzcGVjIHJ1bGVzIGFib3V0IG5hbWluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0TmFtZShuYW1lKSB7XG4gIG5hbWUgIT0gbnVsbCB8fCAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKGZhbHNlLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fFxuICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoZmFsc2UsICdFeHBlY3RlZCBuYW1lIHRvIGJlIGEgc3RyaW5nLicpO1xuXG4gIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICdFeHBlY3RlZCBuYW1lIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nLFxuICAgICk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMTsgaSA8IG5hbWUubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoISgwLCBfY2hhcmFjdGVyQ2xhc3Nlcy5pc05hbWVDb250aW51ZSkobmFtZS5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICBgTmFtZXMgbXVzdCBvbmx5IGNvbnRhaW4gW19hLXpBLVowLTldIGJ1dCBcIiR7bmFtZX1cIiBkb2VzIG5vdC5gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoISgwLCBfY2hhcmFjdGVyQ2xhc3Nlcy5pc05hbWVTdGFydCkobmFtZS5jaGFyQ29kZUF0KDApKSkge1xuICAgIHRocm93IG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgIGBOYW1lcyBtdXN0IHN0YXJ0IHdpdGggW19hLXpBLVpdIGJ1dCBcIiR7bmFtZX1cIiBkb2VzIG5vdC5gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn1cbi8qKlxuICogVXBob2xkcyB0aGUgc3BlYyBydWxlcyBhYm91dCBuYW1pbmcgZW51bSB2YWx1ZXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0RW51bVZhbHVlTmFtZShuYW1lKSB7XG4gIGlmIChuYW1lID09PSAndHJ1ZScgfHwgbmFtZSA9PT0gJ2ZhbHNlJyB8fCBuYW1lID09PSAnbnVsbCcpIHtcbiAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICBgRW51bSB2YWx1ZXMgY2Fubm90IGJlIG5hbWVkOiAke25hbWV9YCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydE5hbWUobmFtZSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/assertName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/definition.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/type/definition.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.GraphQLUnionType =\n  exports.GraphQLScalarType =\n  exports.GraphQLObjectType =\n  exports.GraphQLNonNull =\n  exports.GraphQLList =\n  exports.GraphQLInterfaceType =\n  exports.GraphQLInputObjectType =\n  exports.GraphQLEnumType =\n    void 0;\nexports.argsToArgsConfig = argsToArgsConfig;\nexports.assertAbstractType = assertAbstractType;\nexports.assertCompositeType = assertCompositeType;\nexports.assertEnumType = assertEnumType;\nexports.assertInputObjectType = assertInputObjectType;\nexports.assertInputType = assertInputType;\nexports.assertInterfaceType = assertInterfaceType;\nexports.assertLeafType = assertLeafType;\nexports.assertListType = assertListType;\nexports.assertNamedType = assertNamedType;\nexports.assertNonNullType = assertNonNullType;\nexports.assertNullableType = assertNullableType;\nexports.assertObjectType = assertObjectType;\nexports.assertOutputType = assertOutputType;\nexports.assertScalarType = assertScalarType;\nexports.assertType = assertType;\nexports.assertUnionType = assertUnionType;\nexports.assertWrappingType = assertWrappingType;\nexports.defineArguments = defineArguments;\nexports.getNamedType = getNamedType;\nexports.getNullableType = getNullableType;\nexports.isAbstractType = isAbstractType;\nexports.isCompositeType = isCompositeType;\nexports.isEnumType = isEnumType;\nexports.isInputObjectType = isInputObjectType;\nexports.isInputType = isInputType;\nexports.isInterfaceType = isInterfaceType;\nexports.isLeafType = isLeafType;\nexports.isListType = isListType;\nexports.isNamedType = isNamedType;\nexports.isNonNullType = isNonNullType;\nexports.isNullableType = isNullableType;\nexports.isObjectType = isObjectType;\nexports.isOutputType = isOutputType;\nexports.isRequiredArgument = isRequiredArgument;\nexports.isRequiredInputField = isRequiredInputField;\nexports.isScalarType = isScalarType;\nexports.isType = isType;\nexports.isUnionType = isUnionType;\nexports.isWrappingType = isWrappingType;\nexports.resolveObjMapThunk = resolveObjMapThunk;\nexports.resolveReadonlyArrayThunk = resolveReadonlyArrayThunk;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _didYouMean = __webpack_require__(/*! ../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _identityFunc = __webpack_require__(/*! ../jsutils/identityFunc.js */ \"(ssr)/./node_modules/graphql/jsutils/identityFunc.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _instanceOf = __webpack_require__(/*! ../jsutils/instanceOf.js */ \"(ssr)/./node_modules/graphql/jsutils/instanceOf.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _keyMap = __webpack_require__(/*! ../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _keyValMap = __webpack_require__(/*! ../jsutils/keyValMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyValMap.js\");\n\nvar _mapValue = __webpack_require__(/*! ../jsutils/mapValue.js */ \"(ssr)/./node_modules/graphql/jsutils/mapValue.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _toObjMap = __webpack_require__(/*! ../jsutils/toObjMap.js */ \"(ssr)/./node_modules/graphql/jsutils/toObjMap.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _valueFromASTUntyped = __webpack_require__(/*! ../utilities/valueFromASTUntyped.js */ \"(ssr)/./node_modules/graphql/utilities/valueFromASTUntyped.js\");\n\nvar _assertName = __webpack_require__(/*! ./assertName.js */ \"(ssr)/./node_modules/graphql/type/assertName.js\");\n\nfunction isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\n\nfunction assertType(type) {\n  if (!isType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nfunction isScalarType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLScalarType);\n}\n\nfunction assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Scalar type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isObjectType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLObjectType);\n}\n\nfunction assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Object type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isInterfaceType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLInterfaceType);\n}\n\nfunction assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isUnionType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLUnionType);\n}\n\nfunction assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Union type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isEnumType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLEnumType);\n}\n\nfunction assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Enum type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isInputObjectType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLInputObjectType);\n}\n\nfunction assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(\n        type,\n      )} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isListType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLList);\n}\n\nfunction assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL List type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isNonNullType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLNonNull);\n}\n\nfunction assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Non-Null type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nfunction isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\n\nfunction assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL input type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nfunction isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\n\nfunction assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL output type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nfunction isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\n\nfunction assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL leaf type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nfunction isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\n\nfunction assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nfunction isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\n\nfunction assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL abstract type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nclass GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Expected ${(0, _inspect.inspect)(ofType)} to be a GraphQL type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexports.GraphQLList = GraphQLList;\n\nclass GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Expected ${(0, _inspect.inspect)(\n          ofType,\n        )} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexports.GraphQLNonNull = GraphQLNonNull;\n\nfunction isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\n\nfunction assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL wrapping type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nfunction isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\n\nfunction assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL nullable type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nfunction isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\n\nfunction assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL named type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\nfunction resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nclass GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : _identityFunc.identityFunc;\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : _identityFunc.identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) =>\n            parseValue(\n              (0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables),\n            );\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${(0, _inspect.inspect)(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        (0, _devAssert.devAssert)(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLScalarType = GraphQLScalarType;\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nclass GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${(0, _inspect.inspect)(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLObjectType = GraphQLObjectType;\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${(0, _inspect.inspect)(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: (0, _assertName.assertName)(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nfunction defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: (0, _assertName.assertName)(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: (0, _toObjMap.toObjMap)(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return (0, _isObjectLike.isObjectLike)(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return (0, _mapValue.mapValue)(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nfunction argsToArgsConfig(args) {\n  return (0, _keyValMap.keyValMap)(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\n\nfunction isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nclass GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${(0, _inspect.inspect)(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLInterfaceType = GraphQLInterfaceType;\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nclass GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${(0, _inspect.inspect)(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLUnionType = GraphQLUnionType;\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nclass GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values =\n      typeof config.values === 'function'\n        ? config.values\n        : defineEnumValues(this.name, config.values);\n    this._valueLookup = null;\n    this._nameLookup = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    if (typeof this._values === 'function') {\n      this._values = defineEnumValues(this.name, this._values());\n    }\n\n    return this._values;\n  }\n\n  getValue(name) {\n    if (this._nameLookup === null) {\n      this._nameLookup = (0, _keyMap.keyMap)(\n        this.getValues(),\n        (value) => value.name,\n      );\n    }\n\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    if (this._valueLookup === null) {\n      this._valueLookup = new Map(\n        this.getValues().map((enumValue) => [enumValue.value, enumValue]),\n      );\n    }\n\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new _GraphQLError.GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${(0, _inspect.inspect)(\n          outputValue,\n        )}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = (0, _inspect.inspect)(inputValue);\n      throw new _GraphQLError.GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new _GraphQLError.GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== _kinds.Kind.ENUM) {\n      const valueStr = (0, _printer.print)(valueNode);\n      throw new _GraphQLError.GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = (0, _printer.print)(valueNode);\n      throw new _GraphQLError.GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = (0, _keyValMap.keyValMap)(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLEnumType = GraphQLEnumType;\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = (0, _suggestionList.suggestionList)(\n    unknownValueStr,\n    allNames,\n  );\n  return (0, _didYouMean.didYouMean)('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${(0, _inspect.inspect)(\n            valueConfig,\n          )}.`,\n      );\n    return {\n      name: (0, _assertName.assertEnumValueName)(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: (0, _toObjMap.toObjMap)(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nclass GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6, _config$isOneOf;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this.isOneOf =\n      (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0\n        ? _config$isOneOf\n        : false;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = (0, _mapValue.mapValue)(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      isOneOf: this.isOneOf,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLInputObjectType = GraphQLInputObjectType;\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: (0, _assertName.assertName)(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nfunction isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/definition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/directives.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/type/directives.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.GraphQLSpecifiedByDirective =\n  exports.GraphQLSkipDirective =\n  exports.GraphQLOneOfDirective =\n  exports.GraphQLIncludeDirective =\n  exports.GraphQLDirective =\n  exports.GraphQLDeprecatedDirective =\n  exports.DEFAULT_DEPRECATION_REASON =\n    void 0;\nexports.assertDirective = assertDirective;\nexports.isDirective = isDirective;\nexports.isSpecifiedDirective = isSpecifiedDirective;\nexports.specifiedDirectives = void 0;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _instanceOf = __webpack_require__(/*! ../jsutils/instanceOf.js */ \"(ssr)/./node_modules/graphql/jsutils/instanceOf.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _toObjMap = __webpack_require__(/*! ../jsutils/toObjMap.js */ \"(ssr)/./node_modules/graphql/jsutils/toObjMap.js\");\n\nvar _directiveLocation = __webpack_require__(/*! ../language/directiveLocation.js */ \"(ssr)/./node_modules/graphql/language/directiveLocation.js\");\n\nvar _assertName = __webpack_require__(/*! ./assertName.js */ \"(ssr)/./node_modules/graphql/type/assertName.js\");\n\nvar _definition = __webpack_require__(/*! ./definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _scalars = __webpack_require__(/*! ./scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\n/**\n * Test if the given value is a GraphQL directive.\n */\nfunction isDirective(directive) {\n  return (0, _instanceOf.instanceOf)(directive, GraphQLDirective);\n}\n\nfunction assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nclass GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `@${config.name} locations must be an Array.`,\n      );\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    ((0, _isObjectLike.isObjectLike)(args) && !Array.isArray(args)) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = (0, _definition.defineArguments)(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: (0, _definition.argsToArgsConfig)(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLDirective = GraphQLDirective;\n\n/**\n * Used to conditionally include fields or fragments.\n */\nconst GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    _directiveLocation.DirectiveLocation.FIELD,\n    _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n    _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexports.GraphQLIncludeDirective = GraphQLIncludeDirective;\nconst GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    _directiveLocation.DirectiveLocation.FIELD,\n    _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n    _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexports.GraphQLSkipDirective = GraphQLSkipDirective;\nconst DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;\nconst GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    _directiveLocation.DirectiveLocation.FIELD_DEFINITION,\n    _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,\n    _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,\n    _directiveLocation.DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: _scalars.GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;\nconst GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [_directiveLocation.DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;\nconst GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [_directiveLocation.DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexports.GraphQLOneOfDirective = GraphQLOneOfDirective;\nconst specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexports.specifiedDirectives = specifiedDirectives;\n\nfunction isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2RpcmVjdGl2ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsbUNBQW1DO0FBQ25DLEVBQUUsNEJBQTRCO0FBQzlCLEVBQUUsNkJBQTZCO0FBQy9CLEVBQUUsK0JBQStCO0FBQ2pDLEVBQUUsd0JBQXdCO0FBQzFCLEVBQUUsa0NBQWtDO0FBQ3BDLEVBQUUsa0NBQWtDO0FBQ3BDO0FBQ0EsdUJBQXVCO0FBQ3ZCLG1CQUFtQjtBQUNuQiw0QkFBNEI7QUFDNUIsMkJBQTJCOztBQUUzQixpQkFBaUIsbUJBQU8sQ0FBQyxrRkFBeUI7O0FBRWxELGVBQWUsbUJBQU8sQ0FBQyw4RUFBdUI7O0FBRTlDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUEwQjs7QUFFcEQsb0JBQW9CLG1CQUFPLENBQUMsd0ZBQTRCOztBQUV4RCxnQkFBZ0IsbUJBQU8sQ0FBQyxnRkFBd0I7O0FBRWhELHlCQUF5QixtQkFBTyxDQUFDLG9HQUFrQzs7QUFFbkUsa0JBQWtCLG1CQUFPLENBQUMsd0VBQWlCOztBQUUzQyxrQkFBa0IsbUJBQU8sQ0FBQyx3RUFBaUI7O0FBRTNDLGVBQWUsbUJBQU8sQ0FBQyxrRUFBYzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQ0FBa0M7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9kaXJlY3RpdmVzLmpzP2ZlOWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLkdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZSA9XG4gIGV4cG9ydHMuR3JhcGhRTFNraXBEaXJlY3RpdmUgPVxuICBleHBvcnRzLkdyYXBoUUxPbmVPZkRpcmVjdGl2ZSA9XG4gIGV4cG9ydHMuR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUgPVxuICBleHBvcnRzLkdyYXBoUUxEaXJlY3RpdmUgPVxuICBleHBvcnRzLkdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlID1cbiAgZXhwb3J0cy5ERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTiA9XG4gICAgdm9pZCAwO1xuZXhwb3J0cy5hc3NlcnREaXJlY3RpdmUgPSBhc3NlcnREaXJlY3RpdmU7XG5leHBvcnRzLmlzRGlyZWN0aXZlID0gaXNEaXJlY3RpdmU7XG5leHBvcnRzLmlzU3BlY2lmaWVkRGlyZWN0aXZlID0gaXNTcGVjaWZpZWREaXJlY3RpdmU7XG5leHBvcnRzLnNwZWNpZmllZERpcmVjdGl2ZXMgPSB2b2lkIDA7XG5cbnZhciBfZGV2QXNzZXJ0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9kZXZBc3NlcnQuanMnKTtcblxudmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnNwZWN0LmpzJyk7XG5cbnZhciBfaW5zdGFuY2VPZiA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW5zdGFuY2VPZi5qcycpO1xuXG52YXIgX2lzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLmpzJyk7XG5cbnZhciBfdG9PYmpNYXAgPSByZXF1aXJlKCcuLi9qc3V0aWxzL3RvT2JqTWFwLmpzJyk7XG5cbnZhciBfZGlyZWN0aXZlTG9jYXRpb24gPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5qcycpO1xuXG52YXIgX2Fzc2VydE5hbWUgPSByZXF1aXJlKCcuL2Fzc2VydE5hbWUuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfc2NhbGFycyA9IHJlcXVpcmUoJy4vc2NhbGFycy5qcycpO1xuXG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgR3JhcGhRTCBkaXJlY3RpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICByZXR1cm4gKDAsIF9pbnN0YW5jZU9mLmluc3RhbmNlT2YpKGRpcmVjdGl2ZSwgR3JhcGhRTERpcmVjdGl2ZSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydERpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgaWYgKCFpc0RpcmVjdGl2ZShkaXJlY3RpdmUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkICR7KDAsIF9pbnNwZWN0Lmluc3BlY3QpKGRpcmVjdGl2ZSl9IHRvIGJlIGEgR3JhcGhRTCBkaXJlY3RpdmUuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGl2ZTtcbn1cbi8qKlxuICogQ3VzdG9tIGV4dGVuc2lvbnNcbiAqXG4gKiBAcmVtYXJrc1xuICogVXNlIGEgdW5pcXVlIGlkZW50aWZpZXIgbmFtZSBmb3IgeW91ciBleHRlbnNpb24sIGZvciBleGFtcGxlIHRoZSBuYW1lIG9mXG4gKiB5b3VyIGxpYnJhcnkgb3IgcHJvamVjdC4gRG8gbm90IHVzZSBhIHNob3J0ZW5lZCBpZGVudGlmaWVyIGFzIHRoaXMgaW5jcmVhc2VzXG4gKiB0aGUgcmlzayBvZiBjb25mbGljdHMuIFdlIHJlY29tbWVuZCB5b3UgYWRkIGF0IG1vc3Qgb25lIGV4dGVuc2lvbiBmaWVsZCxcbiAqIGFuIG9iamVjdCB3aGljaCBjYW4gY29udGFpbiBhbGwgdGhlIHZhbHVlcyB5b3UgbmVlZC5cbiAqL1xuXG4vKipcbiAqIERpcmVjdGl2ZXMgYXJlIHVzZWQgYnkgdGhlIEdyYXBoUUwgcnVudGltZSBhcyBhIHdheSBvZiBtb2RpZnlpbmcgZXhlY3V0aW9uXG4gKiBiZWhhdmlvci4gVHlwZSBzeXN0ZW0gY3JlYXRvcnMgd2lsbCB1c3VhbGx5IG5vdCBjcmVhdGUgdGhlc2UgZGlyZWN0bHkuXG4gKi9cbmNsYXNzIEdyYXBoUUxEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRpc1JlcGVhdGFibGUsIF9jb25maWckYXJncztcblxuICAgIHRoaXMubmFtZSA9ICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShjb25maWcubmFtZSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmxvY2F0aW9ucyA9IGNvbmZpZy5sb2NhdGlvbnM7XG4gICAgdGhpcy5pc1JlcGVhdGFibGUgPVxuICAgICAgKF9jb25maWckaXNSZXBlYXRhYmxlID0gY29uZmlnLmlzUmVwZWF0YWJsZSkgIT09IG51bGwgJiZcbiAgICAgIF9jb25maWckaXNSZXBlYXRhYmxlICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGlzUmVwZWF0YWJsZVxuICAgICAgICA6IGZhbHNlO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9ICgwLCBfdG9PYmpNYXAudG9PYmpNYXApKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICBBcnJheS5pc0FycmF5KGNvbmZpZy5sb2NhdGlvbnMpIHx8XG4gICAgICAoMCwgX2RldkFzc2VydC5kZXZBc3NlcnQpKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEAke2NvbmZpZy5uYW1lfSBsb2NhdGlvbnMgbXVzdCBiZSBhbiBBcnJheS5gLFxuICAgICAgKTtcbiAgICBjb25zdCBhcmdzID1cbiAgICAgIChfY29uZmlnJGFyZ3MgPSBjb25maWcuYXJncykgIT09IG51bGwgJiYgX2NvbmZpZyRhcmdzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfY29uZmlnJGFyZ3NcbiAgICAgICAgOiB7fTtcbiAgICAoKDAsIF9pc09iamVjdExpa2UuaXNPYmplY3RMaWtlKShhcmdzKSAmJiAhQXJyYXkuaXNBcnJheShhcmdzKSkgfHxcbiAgICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgQCR7Y29uZmlnLm5hbWV9IGFyZ3MgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhcmd1bWVudCBuYW1lcyBhcyBrZXlzLmAsXG4gICAgICApO1xuICAgIHRoaXMuYXJncyA9ICgwLCBfZGVmaW5pdGlvbi5kZWZpbmVBcmd1bWVudHMpKGFyZ3MpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnR3JhcGhRTERpcmVjdGl2ZSc7XG4gIH1cblxuICB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBsb2NhdGlvbnM6IHRoaXMubG9jYXRpb25zLFxuICAgICAgYXJnczogKDAsIF9kZWZpbml0aW9uLmFyZ3NUb0FyZ3NDb25maWcpKHRoaXMuYXJncyksXG4gICAgICBpc1JlcGVhdGFibGU6IHRoaXMuaXNSZXBlYXRhYmxlLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0AnICsgdGhpcy5uYW1lO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0cy5HcmFwaFFMRGlyZWN0aXZlID0gR3JhcGhRTERpcmVjdGl2ZTtcblxuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgaW5jbHVkZSBmaWVsZHMgb3IgZnJhZ21lbnRzLlxuICovXG5jb25zdCBHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2luY2x1ZGUnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gaW5jbHVkZSB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IG9ubHkgd2hlbiB0aGUgYGlmYCBhcmd1bWVudCBpcyB0cnVlLicsXG4gIGxvY2F0aW9uczogW1xuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRCxcbiAgICBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQsXG4gIF0sXG4gIGFyZ3M6IHtcbiAgICBpZjoge1xuICAgICAgdHlwZTogbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxOb25OdWxsKF9zY2FsYXJzLkdyYXBoUUxCb29sZWFuKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5jbHVkZWQgd2hlbiB0cnVlLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgc2tpcCAoZXhjbHVkZSkgZmllbGRzIG9yIGZyYWdtZW50cy5cbiAqL1xuXG5leHBvcnRzLkdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlID0gR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmU7XG5jb25zdCBHcmFwaFFMU2tpcERpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ3NraXAnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gc2tpcCB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IHdoZW4gdGhlIGBpZmAgYXJndW1lbnQgaXMgdHJ1ZS4nLFxuICBsb2NhdGlvbnM6IFtcbiAgICBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsXG4gICAgX2RpcmVjdGl2ZUxvY2F0aW9uLkRpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRCxcbiAgICBfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uSU5MSU5FX0ZSQUdNRU5ULFxuICBdLFxuICBhcmdzOiB7XG4gICAgaWY6IHtcbiAgICAgIHR5cGU6IG5ldyBfZGVmaW5pdGlvbi5HcmFwaFFMTm9uTnVsbChfc2NhbGFycy5HcmFwaFFMQm9vbGVhbiksXG4gICAgICBkZXNjcmlwdGlvbjogJ1NraXBwZWQgd2hlbiB0cnVlLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBDb25zdGFudCBzdHJpbmcgdXNlZCBmb3IgZGVmYXVsdCByZWFzb24gZm9yIGEgZGVwcmVjYXRpb24uXG4gKi9cblxuZXhwb3J0cy5HcmFwaFFMU2tpcERpcmVjdGl2ZSA9IEdyYXBoUUxTa2lwRGlyZWN0aXZlO1xuY29uc3QgREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT04gPSAnTm8gbG9uZ2VyIHN1cHBvcnRlZCc7XG4vKipcbiAqIFVzZWQgdG8gZGVjbGFyZSBlbGVtZW50IG9mIGEgR3JhcGhRTCBzY2hlbWEgYXMgZGVwcmVjYXRlZC5cbiAqL1xuXG5leHBvcnRzLkRFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OID0gREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT047XG5jb25zdCBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2RlcHJlY2F0ZWQnLFxuICBkZXNjcmlwdGlvbjogJ01hcmtzIGFuIGVsZW1lbnQgb2YgYSBHcmFwaFFMIHNjaGVtYSBhcyBubyBsb25nZXIgc3VwcG9ydGVkLicsXG4gIGxvY2F0aW9uczogW1xuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9GSUVMRF9ERUZJTklUSU9OLFxuICAgIF9kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLFxuICBdLFxuICBhcmdzOiB7XG4gICAgcmVhc29uOiB7XG4gICAgICB0eXBlOiBfc2NhbGFycy5HcmFwaFFMU3RyaW5nLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdFeHBsYWlucyB3aHkgdGhpcyBlbGVtZW50IHdhcyBkZXByZWNhdGVkLCB1c3VhbGx5IGFsc28gaW5jbHVkaW5nIGEgc3VnZ2VzdGlvbiBmb3IgaG93IHRvIGFjY2VzcyBzdXBwb3J0ZWQgc2ltaWxhciBkYXRhLiBGb3JtYXR0ZWQgdXNpbmcgdGhlIE1hcmtkb3duIHN5bnRheCwgYXMgc3BlY2lmaWVkIGJ5IFtDb21tb25NYXJrXShodHRwczovL2NvbW1vbm1hcmsub3JnLykuJyxcbiAgICAgIGRlZmF1bHRWYWx1ZTogREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT04sXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBVc2VkIHRvIHByb3ZpZGUgYSBVUkwgZm9yIHNwZWNpZnlpbmcgdGhlIGJlaGF2aW9yIG9mIGN1c3RvbSBzY2FsYXIgZGVmaW5pdGlvbnMuXG4gKi9cblxuZXhwb3J0cy5HcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSA9IEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlO1xuY29uc3QgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlID0gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICBuYW1lOiAnc3BlY2lmaWVkQnknLFxuICBkZXNjcmlwdGlvbjogJ0V4cG9zZXMgYSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgc2NhbGFyLicsXG4gIGxvY2F0aW9uczogW19kaXJlY3RpdmVMb2NhdGlvbi5EaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVJdLFxuICBhcmdzOiB7XG4gICAgdXJsOiB7XG4gICAgICB0eXBlOiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoX3NjYWxhcnMuR3JhcGhRTFN0cmluZyksXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW9yIG9mIHRoaXMgc2NhbGFyLicsXG4gICAgfSxcbiAgfSxcbn0pO1xuLyoqXG4gKiBVc2VkIHRvIGluZGljYXRlIGFuIElucHV0IE9iamVjdCBpcyBhIE9uZU9mIElucHV0IE9iamVjdC5cbiAqL1xuXG5leHBvcnRzLkdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZSA9IEdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZTtcbmNvbnN0IEdyYXBoUUxPbmVPZkRpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ29uZU9mJyxcbiAgZGVzY3JpcHRpb246XG4gICAgJ0luZGljYXRlcyBleGFjdGx5IG9uZSBmaWVsZCBtdXN0IGJlIHN1cHBsaWVkIGFuZCB0aGlzIGZpZWxkIG11c3Qgbm90IGJlIGBudWxsYC4nLFxuICBsb2NhdGlvbnM6IFtfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfT0JKRUNUXSxcbiAgYXJnczoge30sXG59KTtcbi8qKlxuICogVGhlIGZ1bGwgbGlzdCBvZiBzcGVjaWZpZWQgZGlyZWN0aXZlcy5cbiAqL1xuXG5leHBvcnRzLkdyYXBoUUxPbmVPZkRpcmVjdGl2ZSA9IEdyYXBoUUxPbmVPZkRpcmVjdGl2ZTtcbmNvbnN0IHNwZWNpZmllZERpcmVjdGl2ZXMgPSBPYmplY3QuZnJlZXplKFtcbiAgR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUsXG4gIEdyYXBoUUxTa2lwRGlyZWN0aXZlLFxuICBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSxcbiAgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlLFxuICBHcmFwaFFMT25lT2ZEaXJlY3RpdmUsXG5dKTtcbmV4cG9ydHMuc3BlY2lmaWVkRGlyZWN0aXZlcyA9IHNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbmZ1bmN0aW9uIGlzU3BlY2lmaWVkRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICByZXR1cm4gc3BlY2lmaWVkRGlyZWN0aXZlcy5zb21lKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gZGlyZWN0aXZlLm5hbWUpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/directives.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/index.js":
/*!********************************************!*\
  !*** ./node_modules/graphql/type/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"DEFAULT_DEPRECATION_REASON\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.DEFAULT_DEPRECATION_REASON;\n  },\n}));\nObject.defineProperty(exports, \"GRAPHQL_MAX_INT\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GRAPHQL_MAX_INT;\n  },\n}));\nObject.defineProperty(exports, \"GRAPHQL_MIN_INT\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GRAPHQL_MIN_INT;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLBoolean\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLBoolean;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLDeprecatedDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLDeprecatedDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLEnumType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLEnumType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLFloat\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLFloat;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLID\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLID;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLIncludeDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLIncludeDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLInputObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLInputObjectType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLInt\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLInt;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLInterfaceType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLInterfaceType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLList\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLList;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLNonNull\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLNonNull;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLObjectType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLOneOfDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLOneOfDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLScalarType;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _schema.GraphQLSchema;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLSkipDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLSkipDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLSpecifiedByDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLSpecifiedByDirective;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLString\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLString;\n  },\n}));\nObject.defineProperty(exports, \"GraphQLUnionType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLUnionType;\n  },\n}));\nObject.defineProperty(exports, \"SchemaMetaFieldDef\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.SchemaMetaFieldDef;\n  },\n}));\nObject.defineProperty(exports, \"TypeKind\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.TypeKind;\n  },\n}));\nObject.defineProperty(exports, \"TypeMetaFieldDef\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.TypeMetaFieldDef;\n  },\n}));\nObject.defineProperty(exports, \"TypeNameMetaFieldDef\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.TypeNameMetaFieldDef;\n  },\n}));\nObject.defineProperty(exports, \"__Directive\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__Directive;\n  },\n}));\nObject.defineProperty(exports, \"__DirectiveLocation\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__DirectiveLocation;\n  },\n}));\nObject.defineProperty(exports, \"__EnumValue\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__EnumValue;\n  },\n}));\nObject.defineProperty(exports, \"__Field\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__Field;\n  },\n}));\nObject.defineProperty(exports, \"__InputValue\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__InputValue;\n  },\n}));\nObject.defineProperty(exports, \"__Schema\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__Schema;\n  },\n}));\nObject.defineProperty(exports, \"__Type\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__Type;\n  },\n}));\nObject.defineProperty(exports, \"__TypeKind\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.__TypeKind;\n  },\n}));\nObject.defineProperty(exports, \"assertAbstractType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertAbstractType;\n  },\n}));\nObject.defineProperty(exports, \"assertCompositeType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertCompositeType;\n  },\n}));\nObject.defineProperty(exports, \"assertDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.assertDirective;\n  },\n}));\nObject.defineProperty(exports, \"assertEnumType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertEnumType;\n  },\n}));\nObject.defineProperty(exports, \"assertEnumValueName\", ({\n  enumerable: true,\n  get: function () {\n    return _assertName.assertEnumValueName;\n  },\n}));\nObject.defineProperty(exports, \"assertInputObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertInputObjectType;\n  },\n}));\nObject.defineProperty(exports, \"assertInputType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertInputType;\n  },\n}));\nObject.defineProperty(exports, \"assertInterfaceType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertInterfaceType;\n  },\n}));\nObject.defineProperty(exports, \"assertLeafType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertLeafType;\n  },\n}));\nObject.defineProperty(exports, \"assertListType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertListType;\n  },\n}));\nObject.defineProperty(exports, \"assertName\", ({\n  enumerable: true,\n  get: function () {\n    return _assertName.assertName;\n  },\n}));\nObject.defineProperty(exports, \"assertNamedType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertNamedType;\n  },\n}));\nObject.defineProperty(exports, \"assertNonNullType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertNonNullType;\n  },\n}));\nObject.defineProperty(exports, \"assertNullableType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertNullableType;\n  },\n}));\nObject.defineProperty(exports, \"assertObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertObjectType;\n  },\n}));\nObject.defineProperty(exports, \"assertOutputType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertOutputType;\n  },\n}));\nObject.defineProperty(exports, \"assertScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertScalarType;\n  },\n}));\nObject.defineProperty(exports, \"assertSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _schema.assertSchema;\n  },\n}));\nObject.defineProperty(exports, \"assertType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertType;\n  },\n}));\nObject.defineProperty(exports, \"assertUnionType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertUnionType;\n  },\n}));\nObject.defineProperty(exports, \"assertValidSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _validate.assertValidSchema;\n  },\n}));\nObject.defineProperty(exports, \"assertWrappingType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.assertWrappingType;\n  },\n}));\nObject.defineProperty(exports, \"getNamedType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.getNamedType;\n  },\n}));\nObject.defineProperty(exports, \"getNullableType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.getNullableType;\n  },\n}));\nObject.defineProperty(exports, \"introspectionTypes\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.introspectionTypes;\n  },\n}));\nObject.defineProperty(exports, \"isAbstractType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isAbstractType;\n  },\n}));\nObject.defineProperty(exports, \"isCompositeType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isCompositeType;\n  },\n}));\nObject.defineProperty(exports, \"isDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.isDirective;\n  },\n}));\nObject.defineProperty(exports, \"isEnumType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isEnumType;\n  },\n}));\nObject.defineProperty(exports, \"isInputObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isInputObjectType;\n  },\n}));\nObject.defineProperty(exports, \"isInputType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isInputType;\n  },\n}));\nObject.defineProperty(exports, \"isInterfaceType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isInterfaceType;\n  },\n}));\nObject.defineProperty(exports, \"isIntrospectionType\", ({\n  enumerable: true,\n  get: function () {\n    return _introspection.isIntrospectionType;\n  },\n}));\nObject.defineProperty(exports, \"isLeafType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isLeafType;\n  },\n}));\nObject.defineProperty(exports, \"isListType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isListType;\n  },\n}));\nObject.defineProperty(exports, \"isNamedType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isNamedType;\n  },\n}));\nObject.defineProperty(exports, \"isNonNullType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isNonNullType;\n  },\n}));\nObject.defineProperty(exports, \"isNullableType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isNullableType;\n  },\n}));\nObject.defineProperty(exports, \"isObjectType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isObjectType;\n  },\n}));\nObject.defineProperty(exports, \"isOutputType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isOutputType;\n  },\n}));\nObject.defineProperty(exports, \"isRequiredArgument\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isRequiredArgument;\n  },\n}));\nObject.defineProperty(exports, \"isRequiredInputField\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isRequiredInputField;\n  },\n}));\nObject.defineProperty(exports, \"isScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isScalarType;\n  },\n}));\nObject.defineProperty(exports, \"isSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _schema.isSchema;\n  },\n}));\nObject.defineProperty(exports, \"isSpecifiedDirective\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.isSpecifiedDirective;\n  },\n}));\nObject.defineProperty(exports, \"isSpecifiedScalarType\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.isSpecifiedScalarType;\n  },\n}));\nObject.defineProperty(exports, \"isType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isType;\n  },\n}));\nObject.defineProperty(exports, \"isUnionType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isUnionType;\n  },\n}));\nObject.defineProperty(exports, \"isWrappingType\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.isWrappingType;\n  },\n}));\nObject.defineProperty(exports, \"resolveObjMapThunk\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.resolveObjMapThunk;\n  },\n}));\nObject.defineProperty(exports, \"resolveReadonlyArrayThunk\", ({\n  enumerable: true,\n  get: function () {\n    return _definition.resolveReadonlyArrayThunk;\n  },\n}));\nObject.defineProperty(exports, \"specifiedDirectives\", ({\n  enumerable: true,\n  get: function () {\n    return _directives.specifiedDirectives;\n  },\n}));\nObject.defineProperty(exports, \"specifiedScalarTypes\", ({\n  enumerable: true,\n  get: function () {\n    return _scalars.specifiedScalarTypes;\n  },\n}));\nObject.defineProperty(exports, \"validateSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _validate.validateSchema;\n  },\n}));\n\nvar _schema = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/graphql/type/schema.js\");\n\nvar _definition = __webpack_require__(/*! ./definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ./directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _scalars = __webpack_require__(/*! ./scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\nvar _introspection = __webpack_require__(/*! ./introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _validate = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/graphql/type/validate.js\");\n\nvar _assertName = __webpack_require__(/*! ./assertName.js */ \"(ssr)/./node_modules/graphql/type/assertName.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/introspection.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/type/introspection.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.introspectionTypes =\n  exports.__TypeKind =\n  exports.__Type =\n  exports.__Schema =\n  exports.__InputValue =\n  exports.__Field =\n  exports.__EnumValue =\n  exports.__DirectiveLocation =\n  exports.__Directive =\n  exports.TypeNameMetaFieldDef =\n  exports.TypeMetaFieldDef =\n  exports.TypeKind =\n  exports.SchemaMetaFieldDef =\n    void 0;\nexports.isIntrospectionType = isIntrospectionType;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _directiveLocation = __webpack_require__(/*! ../language/directiveLocation.js */ \"(ssr)/./node_modules/graphql/language/directiveLocation.js\");\n\nvar _printer = __webpack_require__(/*! ../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _astFromValue = __webpack_require__(/*! ../utilities/astFromValue.js */ \"(ssr)/./node_modules/graphql/utilities/astFromValue.js\");\n\nvar _definition = __webpack_require__(/*! ./definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _scalars = __webpack_require__(/*! ./scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\nconst __Schema = new _definition.GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n      ),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new _definition.GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__Directive),\n        ),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\n\nexports.__Schema = __Schema;\n\nconst __Directive = new _definition.GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__DirectiveLocation),\n        ),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__InputValue),\n        ),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\n\nexports.__Directive = __Directive;\n\nconst __DirectiveLocation = new _definition.GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: _directiveLocation.DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: _directiveLocation.DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: _directiveLocation.DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: _directiveLocation.DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: _directiveLocation.DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: _directiveLocation.DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: _directiveLocation.DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: _directiveLocation.DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: _directiveLocation.DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: _directiveLocation.DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\n\nexports.__DirectiveLocation = __DirectiveLocation;\n\nconst __Type = new _definition.GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new _definition.GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if ((0, _definition.isScalarType)(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if ((0, _definition.isObjectType)(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if ((0, _definition.isInterfaceType)(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if ((0, _definition.isUnionType)(type)) {\n          return TypeKind.UNION;\n        }\n\n        if ((0, _definition.isEnumType)(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if ((0, _definition.isInputObjectType)(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if ((0, _definition.isListType)(type)) {\n          return TypeKind.LIST;\n        }\n\n        if ((0, _definition.isNonNullType)(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n         false ||\n          (0, _invariant.invariant)(\n            false,\n            `Unexpected type: \"${(0, _inspect.inspect)(type)}\".`,\n          );\n      },\n    },\n    name: {\n      type: _scalars.GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: _scalars.GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new _definition.GraphQLList(\n        new _definition.GraphQLNonNull(__Field),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (\n          (0, _definition.isObjectType)(type) ||\n          (0, _definition.isInterfaceType)(type)\n        ) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (\n          (0, _definition.isObjectType)(type) ||\n          (0, _definition.isInterfaceType)(type)\n        ) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if ((0, _definition.isAbstractType)(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new _definition.GraphQLList(\n        new _definition.GraphQLNonNull(__EnumValue),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if ((0, _definition.isEnumType)(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new _definition.GraphQLList(\n        new _definition.GraphQLNonNull(__InputValue),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if ((0, _definition.isInputObjectType)(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: _scalars.GraphQLBoolean,\n      resolve: (type) => {\n        if ((0, _definition.isInputObjectType)(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\n\nexports.__Type = __Type;\n\nconst __Field = new _definition.GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__InputValue),\n        ),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new _definition.GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: _scalars.GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\n\nexports.__Field = __Field;\n\nconst __InputValue = new _definition.GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new _definition.GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: _scalars.GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);\n        return valueAST ? (0, _printer.print)(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: _scalars.GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\n\nexports.__InputValue = __InputValue;\n\nconst __EnumValue = new _definition.GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: _scalars.GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\n\nexports.__EnumValue = __EnumValue;\nvar TypeKind;\nexports.TypeKind = TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (exports.TypeKind = TypeKind = {}));\n\nconst __TypeKind = new _definition.GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexports.__TypeKind = __TypeKind;\nconst SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new _definition.GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexports.SchemaMetaFieldDef = SchemaMetaFieldDef;\nconst TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexports.TypeMetaFieldDef = TypeMetaFieldDef;\nconst TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;\nconst introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexports.introspectionTypes = introspectionTypes;\n\nfunction isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/introspection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/scalars.js":
/*!**********************************************!*\
  !*** ./node_modules/graphql/type/scalars.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.GraphQLString =\n  exports.GraphQLInt =\n  exports.GraphQLID =\n  exports.GraphQLFloat =\n  exports.GraphQLBoolean =\n  exports.GRAPHQL_MIN_INT =\n  exports.GRAPHQL_MAX_INT =\n    void 0;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\nexports.specifiedScalarTypes = void 0;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ./definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\nconst GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;\nconst GRAPHQL_MIN_INT = -2147483648;\nexports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;\nconst GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          (0, _inspect.inspect)(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexports.GraphQLInt = GraphQLInt;\nconst GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.FLOAT &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexports.GraphQLFloat = GraphQLFloat;\nconst GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING) {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLString = GraphQLString;\nconst GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n        coercedValue,\n      )}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLBoolean = GraphQLBoolean;\nconst GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`,\n    );\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.STRING &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          (0, _printer.print)(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLID = GraphQLID;\nconst specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexports.specifiedScalarTypes = specifiedScalarTypes;\n\nfunction isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if ((0, _isObjectLike.isObjectLike)(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/scalars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/schema.js":
/*!*********************************************!*\
  !*** ./node_modules/graphql/type/schema.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.GraphQLSchema = void 0;\nexports.assertSchema = assertSchema;\nexports.isSchema = isSchema;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _instanceOf = __webpack_require__(/*! ../jsutils/instanceOf.js */ \"(ssr)/./node_modules/graphql/jsutils/instanceOf.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _toObjMap = __webpack_require__(/*! ../jsutils/toObjMap.js */ \"(ssr)/./node_modules/graphql/jsutils/toObjMap.js\");\n\nvar _ast = __webpack_require__(/*! ../language/ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _definition = __webpack_require__(/*! ./definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ./directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _introspection = __webpack_require__(/*! ./introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\n/**\n * Test if the given value is a GraphQL schema.\n */\nfunction isSchema(schema) {\n  return (0, _instanceOf.instanceOf)(schema, GraphQLSchema);\n}\n\nfunction assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(schema)} to be a GraphQL schema.`,\n    );\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nclass GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    (0, _isObjectLike.isObjectLike)(config) ||\n      (0, _devAssert.devAssert)(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `\"types\" must be Array if provided but got: ${(0, _inspect.inspect)(\n          config.types,\n        )}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      (0, _devAssert.devAssert)(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${(0, _inspect.inspect)(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if ((0, _directives.isDirective)(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        (0, _devAssert.devAssert)(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if ((0, _definition.isInterfaceType)(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if ((0, _definition.isInterfaceType)(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if ((0, _definition.isObjectType)(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if ((0, _definition.isInterfaceType)(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case _ast.OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case _ast.OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case _ast.OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return (0, _definition.isUnionType)(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if ((0, _definition.isUnionType)(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nexports.GraphQLSchema = GraphQLSchema;\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = (0, _definition.getNamedType)(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if ((0, _definition.isUnionType)(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (\n      (0, _definition.isObjectType)(namedType) ||\n      (0, _definition.isInterfaceType)(namedType)\n    ) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if ((0, _definition.isInputObjectType)(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/type/validate.js":
/*!***********************************************!*\
  !*** ./node_modules/graphql/type/validate.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.assertValidSchema = assertValidSchema;\nexports.validateSchema = validateSchema;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _ast = __webpack_require__(/*! ../language/ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _typeComparators = __webpack_require__(/*! ../utilities/typeComparators.js */ \"(ssr)/./node_modules/graphql/utilities/typeComparators.js\");\n\nvar _definition = __webpack_require__(/*! ./definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ./directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _introspection = __webpack_require__(/*! ./introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _schema = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/graphql/type/schema.js\");\n\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\nfunction validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nfunction assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new _GraphQLError.GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!(0, _definition.isObjectType)(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${(0,\n      _inspect.inspect)(queryType)}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        _ast.OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${(0, _inspect.inspect)(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        _ast.OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${(0, _inspect.inspect)(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        _ast.OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!(0, _directives.isDirective)(directive)) {\n      context.reportError(\n        `Expected directive but got: ${(0, _inspect.inspect)(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive);\n\n    if (directive.locations.length === 0) {\n      context.reportError(\n        `Directive @${directive.name} must include 1 or more locations.`,\n        directive.astNode,\n      );\n    } // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!(0, _definition.isInputType)(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${(0, _inspect.inspect)(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (\n        (0, _definition.isRequiredArgument)(arg) &&\n        arg.deprecationReason != null\n      ) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!(0, _definition.isNamedType)(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${(0, _inspect.inspect)(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!(0, _introspection.isIntrospectionType)(type)) {\n      validateName(context, type);\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if ((0, _definition.isInterfaceType)(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if ((0, _definition.isUnionType)(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if ((0, _definition.isEnumType)(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if ((0, _definition.isInputObjectType)(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!(0, _definition.isOutputType)(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${(0, _inspect.inspect)(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!(0, _definition.isInputType)(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${(0, _inspect.inspect)(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (\n        (0, _definition.isRequiredArgument)(arg) &&\n        arg.deprecationReason != null\n      ) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!(0, _definition.isInterfaceType)(iface)) {\n      context.reportError(\n        `Type ${(0, _inspect.inspect)(\n          type,\n        )} must only implement Interface types, ` +\n          `it cannot implement ${(0, _inspect.inspect)(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (\n      !(0, _typeComparators.isTypeSubTypeOf)(\n        context.schema,\n        typeField.type,\n        ifaceField.type,\n      )\n    ) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${(0, _inspect.inspect)(ifaceField.type)} but ${\n            type.name\n          }.${fieldName} ` +\n          `is type ${(0, _inspect.inspect)(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${(0, _inspect.inspect)(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${(0, _inspect.inspect)(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!(0, _definition.isObjectType)(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${(0, _inspect.inspect)(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!(0, _definition.isInputType)(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${(0, _inspect.inspect)(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (\n      (0, _definition.isRequiredInputField)(field) &&\n      field.deprecationReason != null\n    ) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n\n    if (inputObj.isOneOf) {\n      validateOneOfInputObjectField(inputObj, field, context);\n    }\n  }\n}\n\nfunction validateOneOfInputObjectField(type, field, context) {\n  if ((0, _definition.isNonNullType)(field.type)) {\n    var _field$astNode4;\n\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} must be nullable.`,\n      (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0\n        ? void 0\n        : _field$astNode4.type,\n    );\n  }\n\n  if (field.defaultValue !== undefined) {\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} cannot have a default value.`,\n      field.astNode,\n    );\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (\n        (0, _definition.isNonNullType)(field.type) &&\n        (0, _definition.isInputObjectType)(field.type.ofType)\n      ) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) =>\n          node.name.value === _directives.GraphQLDeprecatedDirective.name,\n      );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/type/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/TypeInfo.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql/utilities/TypeInfo.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.TypeInfo = void 0;\nexports.visitWithTypeInfo = visitWithTypeInfo;\n\nvar _ast = __webpack_require__(/*! ../language/ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _visitor = __webpack_require__(/*! ../language/visitor.js */ \"(ssr)/./node_modules/graphql/language/visitor.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _introspection = __webpack_require__(/*! ../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ./typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\nclass TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if ((0, _definition.isInputType)(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if ((0, _definition.isCompositeType)(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if ((0, _definition.isOutputType)(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case _kinds.Kind.SELECTION_SET: {\n        const namedType = (0, _definition.getNamedType)(this.getType());\n\n        this._parentTypeStack.push(\n          (0, _definition.isCompositeType)(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(\n          (0, _definition.isOutputType)(fieldType) ? fieldType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case _kinds.Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(\n          (0, _definition.isObjectType)(rootType) ? rootType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.INLINE_FRAGMENT:\n      case _kinds.Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST)\n          : (0, _definition.getNamedType)(this.getType());\n\n        this._typeStack.push(\n          (0, _definition.isOutputType)(outputType) ? outputType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.VARIABLE_DEFINITION: {\n        const inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);\n\n        this._inputTypeStack.push(\n          (0, _definition.isInputType)(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(\n          (0, _definition.isInputType)(argType) ? argType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.LIST: {\n        const listType = (0, _definition.getNullableType)(this.getInputType());\n        const itemType = (0, _definition.isListType)(listType)\n          ? listType.ofType\n          : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(\n          (0, _definition.isInputType)(itemType) ? itemType : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.OBJECT_FIELD: {\n        const objectType = (0, _definition.getNamedType)(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if ((0, _definition.isInputObjectType)(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          (0, _definition.isInputType)(inputFieldType)\n            ? inputFieldType\n            : undefined,\n        );\n\n        break;\n      }\n\n      case _kinds.Kind.ENUM: {\n        const enumType = (0, _definition.getNamedType)(this.getInputType());\n        let enumValue;\n\n        if ((0, _definition.isEnumType)(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case _kinds.Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case _kinds.Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case _kinds.Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case _kinds.Kind.OPERATION_DEFINITION:\n      case _kinds.Kind.INLINE_FRAGMENT:\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case _kinds.Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case _kinds.Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case _kinds.Kind.LIST:\n      case _kinds.Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case _kinds.Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\nexports.TypeInfo = TypeInfo;\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === _introspection.SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n\n  if (\n    name === _introspection.TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return _introspection.TypeMetaFieldDef;\n  }\n\n  if (\n    name === _introspection.TypeNameMetaFieldDef.name &&\n    (0, _definition.isCompositeType)(parentType)\n  ) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  if (\n    (0, _definition.isObjectType)(parentType) ||\n    (0, _definition.isInterfaceType)(parentType)\n  ) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nfunction visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if ((0, _ast.isNode)(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/TypeInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/assertValidName.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql/utilities/assertValidName.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.assertValidName = assertValidName;\nexports.isValidNameError = isValidNameError;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _assertName = __webpack_require__(/*! ../type/assertName.js */ \"(ssr)/./node_modules/graphql/type/assertName.js\");\n\n/* c8 ignore start */\n\n/**\n * Upholds the spec rules about naming.\n * @deprecated Please use `assertName` instead. Will be removed in v17\n */\nfunction assertValidName(name) {\n  const error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n * @deprecated Please use `assertName` instead. Will be removed in v17\n */\n\nfunction isValidNameError(name) {\n  typeof name === 'string' ||\n    (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.startsWith('__')) {\n    return new _GraphQLError.GraphQLError(\n      `Name \"${name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n    );\n  }\n\n  try {\n    (0, _assertName.assertName)(name);\n  } catch (error) {\n    return error;\n  }\n}\n/* c8 ignore stop */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYXNzZXJ0VmFsaWROYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHVCQUF1QjtBQUN2Qix3QkFBd0I7O0FBRXhCLGlCQUFpQixtQkFBTyxDQUFDLGtGQUF5Qjs7QUFFbEQsb0JBQW9CLG1CQUFPLENBQUMsb0ZBQTBCOztBQUV0RCxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBdUI7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxLQUFLO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2Fzc2VydFZhbGlkTmFtZS5qcz8xZWJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5hc3NlcnRWYWxpZE5hbWUgPSBhc3NlcnRWYWxpZE5hbWU7XG5leHBvcnRzLmlzVmFsaWROYW1lRXJyb3IgPSBpc1ZhbGlkTmFtZUVycm9yO1xuXG52YXIgX2RldkFzc2VydCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvZGV2QXNzZXJ0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfYXNzZXJ0TmFtZSA9IHJlcXVpcmUoJy4uL3R5cGUvYXNzZXJ0TmFtZS5qcycpO1xuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cblxuLyoqXG4gKiBVcGhvbGRzIHRoZSBzcGVjIHJ1bGVzIGFib3V0IG5hbWluZy5cbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYGFzc2VydE5hbWVgIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2MTdcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VmFsaWROYW1lKG5hbWUpIHtcbiAgY29uc3QgZXJyb3IgPSBpc1ZhbGlkTmFtZUVycm9yKG5hbWUpO1xuXG4gIGlmIChlcnJvcikge1xuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG4vKipcbiAqIFJldHVybnMgYW4gRXJyb3IgaWYgYSBuYW1lIGlzIGludmFsaWQuXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBhc3NlcnROYW1lYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjE3XG4gKi9cblxuZnVuY3Rpb24gaXNWYWxpZE5hbWVFcnJvcihuYW1lKSB7XG4gIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fFxuICAgICgwLCBfZGV2QXNzZXJ0LmRldkFzc2VydCkoZmFsc2UsICdFeHBlY3RlZCBuYW1lIHRvIGJlIGEgc3RyaW5nLicpO1xuXG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ19fJykpIHtcbiAgICByZXR1cm4gbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgYE5hbWUgXCIke25hbWV9XCIgbXVzdCBub3QgYmVnaW4gd2l0aCBcIl9fXCIsIHdoaWNoIGlzIHJlc2VydmVkIGJ5IEdyYXBoUUwgaW50cm9zcGVjdGlvbi5gLFxuICAgICk7XG4gIH1cblxuICB0cnkge1xuICAgICgwLCBfYXNzZXJ0TmFtZS5hc3NlcnROYW1lKShuYW1lKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/assertValidName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/astFromValue.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/utilities/astFromValue.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.astFromValue = astFromValue;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _isIterableObject = __webpack_require__(/*! ../jsutils/isIterableObject.js */ \"(ssr)/./node_modules/graphql/jsutils/isIterableObject.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _scalars = __webpack_require__(/*! ../type/scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      _kinds.Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: _kinds.Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: _kinds.Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: {\n            kind: _kinds.Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: _kinds.Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: _kinds.Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: _kinds.Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: _kinds.Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return {\n          kind: _kinds.Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: _kinds.Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(\n      `Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`,\n    );\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/astFromValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/buildASTSchema.js":
/*!**********************************************************!*\
  !*** ./node_modules/graphql/utilities/buildASTSchema.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.buildASTSchema = buildASTSchema;\nexports.buildSchema = buildSchema;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _parser = __webpack_require__(/*! ../language/parser.js */ \"(ssr)/./node_modules/graphql/language/parser.js\");\n\nvar _directives = __webpack_require__(/*! ../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _schema = __webpack_require__(/*! ../type/schema.js */ \"(ssr)/./node_modules/graphql/type/schema.js\");\n\nvar _validate = __webpack_require__(/*! ../validation/validate.js */ \"(ssr)/./node_modules/graphql/validation/validate.js\");\n\nvar _extendSchema = __webpack_require__(/*! ./extendSchema.js */ \"(ssr)/./node_modules/graphql/utilities/extendSchema.js\");\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nfunction buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||\n    (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    (0, _validate.assertValidSDL)(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = (0, _extendSchema.extendSchemaImpl)(\n    emptySchemaConfig,\n    documentAST,\n    options,\n  );\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ..._directives.specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new _schema.GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nfunction buildSchema(source, options) {\n  const document = (0, _parser.parse)(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYnVpbGRBU1RTY2hlbWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLG1CQUFtQjs7QUFFbkIsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQXlCOztBQUVsRCxhQUFhLG1CQUFPLENBQUMsNEVBQXNCOztBQUUzQyxjQUFjLG1CQUFPLENBQUMsOEVBQXVCOztBQUU3QyxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBdUI7O0FBRWpELGNBQWMsbUJBQU8sQ0FBQyxzRUFBbUI7O0FBRXpDLGdCQUFnQixtQkFBTyxDQUFDLHNGQUEyQjs7QUFFbkQsb0JBQW9CLG1CQUFPLENBQUMsaUZBQW1COztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx1QkFBdUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9idWlsZEFTVFNjaGVtYS5qcz9hZGU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5idWlsZEFTVFNjaGVtYSA9IGJ1aWxkQVNUU2NoZW1hO1xuZXhwb3J0cy5idWlsZFNjaGVtYSA9IGJ1aWxkU2NoZW1hO1xuXG52YXIgX2RldkFzc2VydCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvZGV2QXNzZXJ0LmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX3BhcnNlciA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL3BhcnNlci5qcycpO1xuXG52YXIgX2RpcmVjdGl2ZXMgPSByZXF1aXJlKCcuLi90eXBlL2RpcmVjdGl2ZXMuanMnKTtcblxudmFyIF9zY2hlbWEgPSByZXF1aXJlKCcuLi90eXBlL3NjaGVtYS5qcycpO1xuXG52YXIgX3ZhbGlkYXRlID0gcmVxdWlyZSgnLi4vdmFsaWRhdGlvbi92YWxpZGF0ZS5qcycpO1xuXG52YXIgX2V4dGVuZFNjaGVtYSA9IHJlcXVpcmUoJy4vZXh0ZW5kU2NoZW1hLmpzJyk7XG5cbi8qKlxuICogVGhpcyB0YWtlcyB0aGUgYXN0IG9mIGEgc2NoZW1hIGRvY3VtZW50IHByb2R1Y2VkIGJ5IHRoZSBwYXJzZSBmdW5jdGlvbiBpblxuICogc3JjL2xhbmd1YWdlL3BhcnNlci5qcy5cbiAqXG4gKiBJZiBubyBzY2hlbWEgZGVmaW5pdGlvbiBpcyBwcm92aWRlZCwgdGhlbiBpdCB3aWxsIGxvb2sgZm9yIHR5cGVzIG5hbWVkIFF1ZXJ5LFxuICogTXV0YXRpb24gYW5kIFN1YnNjcmlwdGlvbi5cbiAqXG4gKiBHaXZlbiB0aGF0IEFTVCBpdCBjb25zdHJ1Y3RzIGEgR3JhcGhRTFNjaGVtYS4gVGhlIHJlc3VsdGluZyBzY2hlbWFcbiAqIGhhcyBubyByZXNvbHZlIG1ldGhvZHMsIHNvIGV4ZWN1dGlvbiB3aWxsIHVzZSBkZWZhdWx0IHJlc29sdmVycy5cbiAqL1xuZnVuY3Rpb24gYnVpbGRBU1RTY2hlbWEoZG9jdW1lbnRBU1QsIG9wdGlvbnMpIHtcbiAgKGRvY3VtZW50QVNUICE9IG51bGwgJiYgZG9jdW1lbnRBU1Qua2luZCA9PT0gX2tpbmRzLktpbmQuRE9DVU1FTlQpIHx8XG4gICAgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShmYWxzZSwgJ011c3QgcHJvdmlkZSB2YWxpZCBEb2N1bWVudCBBU1QuJyk7XG5cbiAgaWYgKFxuICAgIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXNzdW1lVmFsaWQpICE9PVxuICAgICAgdHJ1ZSAmJlxuICAgIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogb3B0aW9ucy5hc3N1bWVWYWxpZFNETCkgIT09IHRydWVcbiAgKSB7XG4gICAgKDAsIF92YWxpZGF0ZS5hc3NlcnRWYWxpZFNETCkoZG9jdW1lbnRBU1QpO1xuICB9XG5cbiAgY29uc3QgZW1wdHlTY2hlbWFDb25maWcgPSB7XG4gICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICB0eXBlczogW10sXG4gICAgZGlyZWN0aXZlczogW10sXG4gICAgZXh0ZW5zaW9uczogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBleHRlbnNpb25BU1ROb2RlczogW10sXG4gICAgYXNzdW1lVmFsaWQ6IGZhbHNlLFxuICB9O1xuICBjb25zdCBjb25maWcgPSAoMCwgX2V4dGVuZFNjaGVtYS5leHRlbmRTY2hlbWFJbXBsKShcbiAgICBlbXB0eVNjaGVtYUNvbmZpZyxcbiAgICBkb2N1bWVudEFTVCxcbiAgICBvcHRpb25zLFxuICApO1xuXG4gIGlmIChjb25maWcuYXN0Tm9kZSA9PSBudWxsKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIGNvbmZpZy50eXBlcykge1xuICAgICAgc3dpdGNoICh0eXBlLm5hbWUpIHtcbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGVhcmx5IGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHlcbiAgICAgICAgLy8gdHlwZWQgdmFsdWVzIGJlbG93LCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtXG4gICAgICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICAgICAgY2FzZSAnUXVlcnknOlxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdmFsaWRhdGVkIGluIGB2YWxpZGF0ZVNjaGVtYWBcbiAgICAgICAgICBjb25maWcucXVlcnkgPSB0eXBlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ011dGF0aW9uJzpcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHZhbGlkYXRlZCBpbiBgdmFsaWRhdGVTY2hlbWFgXG4gICAgICAgICAgY29uZmlnLm11dGF0aW9uID0gdHlwZTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdTdWJzY3JpcHRpb24nOlxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdmFsaWRhdGVkIGluIGB2YWxpZGF0ZVNjaGVtYWBcbiAgICAgICAgICBjb25maWcuc3Vic2NyaXB0aW9uID0gdHlwZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBkaXJlY3RpdmVzID0gW1xuICAgIC4uLmNvbmZpZy5kaXJlY3RpdmVzLCAvLyBJZiBzcGVjaWZpZWQgZGlyZWN0aXZlcyB3ZXJlIG5vdCBleHBsaWNpdGx5IGRlY2xhcmVkLCBhZGQgdGhlbS5cbiAgICAuLi5fZGlyZWN0aXZlcy5zcGVjaWZpZWREaXJlY3RpdmVzLmZpbHRlcigoc3RkRGlyZWN0aXZlKSA9PlxuICAgICAgY29uZmlnLmRpcmVjdGl2ZXMuZXZlcnkoXG4gICAgICAgIChkaXJlY3RpdmUpID0+IGRpcmVjdGl2ZS5uYW1lICE9PSBzdGREaXJlY3RpdmUubmFtZSxcbiAgICAgICksXG4gICAgKSxcbiAgXTtcbiAgcmV0dXJuIG5ldyBfc2NoZW1hLkdyYXBoUUxTY2hlbWEoeyAuLi5jb25maWcsIGRpcmVjdGl2ZXMgfSk7XG59XG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGJ1aWxkIGEgR3JhcGhRTFNjaGVtYSBkaXJlY3RseSBmcm9tIGEgc291cmNlXG4gKiBkb2N1bWVudC5cbiAqL1xuXG5mdW5jdGlvbiBidWlsZFNjaGVtYShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSAoMCwgX3BhcnNlci5wYXJzZSkoc291cmNlLCB7XG4gICAgbm9Mb2NhdGlvbjpcbiAgICAgIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ub0xvY2F0aW9uLFxuICAgIGFsbG93TGVnYWN5RnJhZ21lbnRWYXJpYWJsZXM6XG4gICAgICBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMFxuICAgICAgICA/IHZvaWQgMFxuICAgICAgICA6IG9wdGlvbnMuYWxsb3dMZWdhY3lGcmFnbWVudFZhcmlhYmxlcyxcbiAgfSk7XG4gIHJldHVybiBidWlsZEFTVFNjaGVtYShkb2N1bWVudCwge1xuICAgIGFzc3VtZVZhbGlkU0RMOlxuICAgICAgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkU0RMLFxuICAgIGFzc3VtZVZhbGlkOlxuICAgICAgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/buildASTSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/buildClientSchema.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphql/utilities/buildClientSchema.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.buildClientSchema = buildClientSchema;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _keyValMap = __webpack_require__(/*! ../jsutils/keyValMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyValMap.js\");\n\nvar _parser = __webpack_require__(/*! ../language/parser.js */ \"(ssr)/./node_modules/graphql/language/parser.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _introspection = __webpack_require__(/*! ../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _scalars = __webpack_require__(/*! ../type/scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\nvar _schema = __webpack_require__(/*! ../type/schema.js */ \"(ssr)/./node_modules/graphql/type/schema.js\");\n\nvar _valueFromAST = __webpack_require__(/*! ./valueFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/valueFromAST.js\");\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nfunction buildClientSchema(introspection, options) {\n  ((0, _isObjectLike.isObjectLike)(introspection) &&\n    (0, _isObjectLike.isObjectLike)(introspection.__schema)) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ${(0,\n      _inspect.inspect)(introspection)}.`,\n    ); // Get the schema from the introspection result.\n\n  const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  const typeMap = (0, _keyValMap.keyValMap)(\n    schemaIntrospection.types,\n    (typeIntrospection) => typeIntrospection.name,\n    (typeIntrospection) => buildType(typeIntrospection),\n  ); // Include standard types only if they are used.\n\n  for (const stdType of [\n    ..._scalars.specifiedScalarTypes,\n    ..._introspection.introspectionTypes,\n  ]) {\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n  const queryType = schemaIntrospection.queryType\n    ? getObjectType(schemaIntrospection.queryType)\n    : null;\n  const mutationType = schemaIntrospection.mutationType\n    ? getObjectType(schemaIntrospection.mutationType)\n    : null;\n  const subscriptionType = schemaIntrospection.subscriptionType\n    ? getObjectType(schemaIntrospection.subscriptionType)\n    : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  const directives = schemaIntrospection.directives\n    ? schemaIntrospection.directives.map(buildDirective)\n    : []; // Then produce and return a Schema with these types.\n\n  return new _schema.GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: Object.values(typeMap),\n    directives,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === _introspection.TypeKind.LIST) {\n      const itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new _definition.GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {\n      const nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      const nullableType = getType(nullableRef);\n      return new _definition.GraphQLNonNull(\n        (0, _definition.assertNullableType)(nullableType),\n      );\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    const typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(\n        `Unknown type reference: ${(0, _inspect.inspect)(typeRef)}.`,\n      );\n    }\n\n    const type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\n        `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`,\n      );\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return (0, _definition.assertObjectType)(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return (0, _definition.assertInterfaceType)(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n  function buildType(type) {\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (type != null && type.name != null && type.kind != null) {\n      // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (type.kind) {\n        case _introspection.TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case _introspection.TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case _introspection.TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case _introspection.TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case _introspection.TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case _introspection.TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    const typeStr = (0, _inspect.inspect)(type);\n    throw new Error(\n      `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`,\n    );\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new _definition.GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByURL: scalarIntrospection.specifiedByURL,\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (\n      implementingIntrospection.interfaces === null &&\n      implementingIntrospection.kind === _introspection.TypeKind.INTERFACE\n    ) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      const implementingIntrospectionStr = (0, _inspect.inspect)(\n        implementingIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing interfaces: ${implementingIntrospectionStr}.`,\n      );\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new _definition.GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: () => buildImplementationsList(objectIntrospection),\n      fields: () => buildFieldDefMap(objectIntrospection),\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new _definition.GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: () => buildImplementationsList(interfaceIntrospection),\n      fields: () => buildFieldDefMap(interfaceIntrospection),\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      const unionIntrospectionStr = (0, _inspect.inspect)(unionIntrospection);\n      throw new Error(\n        `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`,\n      );\n    }\n\n    return new _definition.GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: () => unionIntrospection.possibleTypes.map(getObjectType),\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      const enumIntrospectionStr = (0, _inspect.inspect)(enumIntrospection);\n      throw new Error(\n        `Introspection result missing enumValues: ${enumIntrospectionStr}.`,\n      );\n    }\n\n    return new _definition.GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: (0, _keyValMap.keyValMap)(\n        enumIntrospection.enumValues,\n        (valueIntrospection) => valueIntrospection.name,\n        (valueIntrospection) => ({\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason,\n        }),\n      ),\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      const inputObjectIntrospectionStr = (0, _inspect.inspect)(\n        inputObjectIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`,\n      );\n    }\n\n    return new _definition.GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),\n      isOneOf: inputObjectIntrospection.isOneOf,\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\n        `Introspection result missing fields: ${(0, _inspect.inspect)(\n          typeIntrospection,\n        )}.`,\n      );\n    }\n\n    return (0, _keyValMap.keyValMap)(\n      typeIntrospection.fields,\n      (fieldIntrospection) => fieldIntrospection.name,\n      buildField,\n    );\n  }\n\n  function buildField(fieldIntrospection) {\n    const type = getType(fieldIntrospection.type);\n\n    if (!(0, _definition.isOutputType)(type)) {\n      const typeStr = (0, _inspect.inspect)(type);\n      throw new Error(\n        `Introspection must provide output type for fields, but received: ${typeStr}.`,\n      );\n    }\n\n    if (!fieldIntrospection.args) {\n      const fieldIntrospectionStr = (0, _inspect.inspect)(fieldIntrospection);\n      throw new Error(\n        `Introspection result missing field args: ${fieldIntrospectionStr}.`,\n      );\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type,\n      args: buildInputValueDefMap(fieldIntrospection.args),\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return (0, _keyValMap.keyValMap)(\n      inputValueIntrospections,\n      (inputValue) => inputValue.name,\n      buildInputValue,\n    );\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    const type = getType(inputValueIntrospection.type);\n\n    if (!(0, _definition.isInputType)(type)) {\n      const typeStr = (0, _inspect.inspect)(type);\n      throw new Error(\n        `Introspection must provide input type for arguments, but received: ${typeStr}.`,\n      );\n    }\n\n    const defaultValue =\n      inputValueIntrospection.defaultValue != null\n        ? (0, _valueFromAST.valueFromAST)(\n            (0, _parser.parseValue)(inputValueIntrospection.defaultValue),\n            type,\n          )\n        : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type,\n      defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason,\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      const directiveIntrospectionStr = (0, _inspect.inspect)(\n        directiveIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing directive args: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    if (!directiveIntrospection.locations) {\n      const directiveIntrospectionStr = (0, _inspect.inspect)(\n        directiveIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing directive locations: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    return new _directives.GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args),\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/buildClientSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/coerceInputValue.js":
/*!************************************************************!*\
  !*** ./node_modules/graphql/utilities/coerceInputValue.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.coerceInputValue = coerceInputValue;\n\nvar _didYouMean = __webpack_require__(/*! ../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _isIterableObject = __webpack_require__(/*! ../jsutils/isIterableObject.js */ \"(ssr)/./node_modules/graphql/jsutils/isIterableObject.js\");\n\nvar _isObjectLike = __webpack_require__(/*! ../jsutils/isObjectLike.js */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.js\");\n\nvar _Path = __webpack_require__(/*! ../jsutils/Path.js */ \"(ssr)/./node_modules/graphql/jsutils/Path.js\");\n\nvar _printPathArray = __webpack_require__(/*! ../jsutils/printPathArray.js */ \"(ssr)/./node_modules/graphql/jsutils/printPathArray.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nfunction coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${(0, _printPathArray.printPathArray)(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if ((0, _definition.isNonNullType)(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      (0, _Path.pathToArray)(path),\n      inputValue,\n      new _GraphQLError.GraphQLError(\n        `Expected non-nullable type \"${(0, _inspect.inspect)(\n          type,\n        )}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = (0, _Path.addPath)(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (\n      !(0, _isObjectLike.isObjectLike)(inputValue) ||\n      Array.isArray(inputValue)\n    ) {\n      onError(\n        (0, _Path.pathToArray)(path),\n        inputValue,\n        new _GraphQLError.GraphQLError(\n          `Expected type \"${type.name}\" to be an object.`,\n        ),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          const typeStr = (0, _inspect.inspect)(field.type);\n          onError(\n            (0, _Path.pathToArray)(path),\n            inputValue,\n            new _GraphQLError.GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        (0, _Path.addPath)(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = (0, _suggestionList.suggestionList)(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n          ),\n        );\n      }\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedValue);\n\n      if (keys.length !== 1) {\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Exactly one key must be specified for OneOf type \"${type.name}\".`,\n          ),\n        );\n      }\n\n      const key = keys[0];\n      const value = coercedValue[key];\n\n      if (value === null) {\n        onError(\n          (0, _Path.pathToArray)(path).concat(key),\n          value,\n          new _GraphQLError.GraphQLError(`Field \"${key}\" must be non-null.`),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof _GraphQLError.GraphQLError) {\n        onError((0, _Path.pathToArray)(path), inputValue, error);\n      } else {\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Expected type \"${type.name}\". ` + error.message,\n            {\n              originalError: error,\n            },\n          ),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        (0, _Path.pathToArray)(path),\n        inputValue,\n        new _GraphQLError.GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/coerceInputValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/concatAST.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/utilities/concatAST.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.concatAST = concatAST;\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\n/**\n * Provided a collection of ASTs, presumably each from different files,\n * concatenate the ASTs together into batched AST, useful for validating many\n * GraphQL source files which together represent one conceptual application.\n */\nfunction concatAST(documents) {\n  const definitions = [];\n\n  for (const doc of documents) {\n    definitions.push(...doc.definitions);\n  }\n\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvY29uY2F0QVNULmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGlCQUFpQjs7QUFFakIsYUFBYSxtQkFBTyxDQUFDLDRFQUFzQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9jb25jYXRBU1QuanM/YzZmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuY29uY2F0QVNUID0gY29uY2F0QVNUO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxuLyoqXG4gKiBQcm92aWRlZCBhIGNvbGxlY3Rpb24gb2YgQVNUcywgcHJlc3VtYWJseSBlYWNoIGZyb20gZGlmZmVyZW50IGZpbGVzLFxuICogY29uY2F0ZW5hdGUgdGhlIEFTVHMgdG9nZXRoZXIgaW50byBiYXRjaGVkIEFTVCwgdXNlZnVsIGZvciB2YWxpZGF0aW5nIG1hbnlcbiAqIEdyYXBoUUwgc291cmNlIGZpbGVzIHdoaWNoIHRvZ2V0aGVyIHJlcHJlc2VudCBvbmUgY29uY2VwdHVhbCBhcHBsaWNhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29uY2F0QVNUKGRvY3VtZW50cykge1xuICBjb25zdCBkZWZpbml0aW9ucyA9IFtdO1xuXG4gIGZvciAoY29uc3QgZG9jIG9mIGRvY3VtZW50cykge1xuICAgIGRlZmluaXRpb25zLnB1c2goLi4uZG9jLmRlZmluaXRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogX2tpbmRzLktpbmQuRE9DVU1FTlQsXG4gICAgZGVmaW5pdGlvbnMsXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/concatAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/extendSchema.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/utilities/extendSchema.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.extendSchema = extendSchema;\nexports.extendSchemaImpl = extendSchemaImpl;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _keyMap = __webpack_require__(/*! ../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _mapValue = __webpack_require__(/*! ../jsutils/mapValue.js */ \"(ssr)/./node_modules/graphql/jsutils/mapValue.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _predicates = __webpack_require__(/*! ../language/predicates.js */ \"(ssr)/./node_modules/graphql/language/predicates.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _introspection = __webpack_require__(/*! ../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _scalars = __webpack_require__(/*! ../type/scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\nvar _schema = __webpack_require__(/*! ../type/schema.js */ \"(ssr)/./node_modules/graphql/type/schema.js\");\n\nvar _validate = __webpack_require__(/*! ../validation/validate.js */ \"(ssr)/./node_modules/graphql/validation/validate.js\");\n\nvar _values = __webpack_require__(/*! ../execution/values.js */ \"(ssr)/./node_modules/graphql/execution/values.js\");\n\nvar _valueFromAST = __webpack_require__(/*! ./valueFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/valueFromAST.js\");\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nfunction extendSchema(schema, documentAST, options) {\n  (0, _schema.assertSchema)(schema);\n  (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||\n    (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    (0, _validate.assertValidSDLExtension)(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new _schema.GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nfunction extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      typeDefs.push(def);\n    } else if ((0, _predicates.isTypeExtensionNode)(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    }\n\n    if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      args: (0, _mapValue.mapValue)(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (\n      (0, _introspection.isIntrospectionType)(type) ||\n      (0, _scalars.isSpecifiedScalarType)(type)\n    ) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if ((0, _definition.isScalarType)(type)) {\n      return extendScalarType(type);\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      return extendObjectType(type);\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      return extendUnionType(type);\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      return extendEnumType(type);\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n     false ||\n      (0, _invariant.invariant)(\n        false,\n        'Unexpected type: ' + (0, _inspect.inspect)(type),\n      );\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new _definition.GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...(0, _mapValue.mapValue)(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new _definition.GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new _definition.GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new _definition.GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...(0, _mapValue.mapValue)(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new _definition.GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...(0, _mapValue.mapValue)(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new _definition.GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && (0, _mapValue.mapValue)(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === _kinds.Kind.LIST_TYPE) {\n      return new _definition.GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === _kinds.Kind.NON_NULL_TYPE) {\n      return new _definition.GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new _directives.GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: (0, _valueFromAST.valueFromAST)(\n            field.defaultValue,\n            type,\n          ),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new _definition.GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n          isOneOf: isOneOf(astNode),\n        });\n      }\n    }\n  }\n}\n\nconst stdTypeMap = (0, _keyMap.keyMap)(\n  [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = (0, _values.getDirectiveValues)(\n    _directives.GraphQLDeprecatedDirective,\n    node,\n  ); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = (0, _values.getDirectiveValues)(\n    _directives.GraphQLSpecifiedByDirective,\n    node,\n  ); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n/**\n * Given an input object node, returns if the node should be OneOf.\n */\n\nfunction isOneOf(node) {\n  return Boolean(\n    (0, _values.getDirectiveValues)(_directives.GraphQLOneOfDirective, node),\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/extendSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/findBreakingChanges.js":
/*!***************************************************************!*\
  !*** ./node_modules/graphql/utilities/findBreakingChanges.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.DangerousChangeType = exports.BreakingChangeType = void 0;\nexports.findBreakingChanges = findBreakingChanges;\nexports.findDangerousChanges = findDangerousChanges;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _keyMap = __webpack_require__(/*! ../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _printer = __webpack_require__(/*! ../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _scalars = __webpack_require__(/*! ../type/scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\nvar _astFromValue = __webpack_require__(/*! ./astFromValue.js */ \"(ssr)/./node_modules/graphql/utilities/astFromValue.js\");\n\nvar _sortValueNode = __webpack_require__(/*! ./sortValueNode.js */ \"(ssr)/./node_modules/graphql/utilities/sortValueNode.js\");\n\nvar BreakingChangeType;\nexports.BreakingChangeType = BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(\n  BreakingChangeType || (exports.BreakingChangeType = BreakingChangeType = {}),\n);\n\nvar DangerousChangeType;\nexports.DangerousChangeType = DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(\n  DangerousChangeType ||\n    (exports.DangerousChangeType = DangerousChangeType = {}),\n);\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nfunction findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nfunction findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if ((0, _definition.isRequiredArgument)(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: (0, _scalars.isSpecifiedScalarType)(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (\n      (0, _definition.isEnumType)(oldType) &&\n      (0, _definition.isEnumType)(newType)\n    ) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (\n      (0, _definition.isUnionType)(oldType) &&\n      (0, _definition.isUnionType)(newType)\n    ) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (\n      (0, _definition.isInputObjectType)(oldType) &&\n      (0, _definition.isInputObjectType)(newType)\n    ) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (\n      (0, _definition.isObjectType)(oldType) &&\n      (0, _definition.isObjectType)(newType)\n    ) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (\n      (0, _definition.isInterfaceType)(oldType) &&\n      (0, _definition.isInterfaceType)(newType)\n    ) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if ((0, _definition.isRequiredInputField)(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if ((0, _definition.isRequiredArgument)(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if ((0, _definition.isListType)(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      ((0, _definition.isListType)(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      ((0, _definition.isNonNullType)(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if ((0, _definition.isNonNullType)(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      (0, _definition.isNonNullType)(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    ((0, _definition.isNamedType)(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    ((0, _definition.isNonNullType)(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if ((0, _definition.isListType)(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      (0, _definition.isListType)(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if ((0, _definition.isNonNullType)(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      ((0, _definition.isNonNullType)(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!(0, _definition.isNonNullType)(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return 'a Scalar type';\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    return 'an Object type';\n  }\n\n  if ((0, _definition.isInterfaceType)(type)) {\n    return 'an Interface type';\n  }\n\n  if ((0, _definition.isUnionType)(type)) {\n    return 'a Union type';\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    return 'an Enum type';\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected type: ' + (0, _inspect.inspect)(type),\n    );\n}\n\nfunction stringifyValue(value, type) {\n  const ast = (0, _astFromValue.astFromValue)(value, type);\n  ast != null || (0, _invariant.invariant)(false);\n  return (0, _printer.print)((0, _sortValueNode.sortValueNode)(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = (0, _keyMap.keyMap)(oldArray, ({ name }) => name);\n  const newMap = (0, _keyMap.keyMap)(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/findBreakingChanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/getIntrospectionQuery.js":
/*!*****************************************************************!*\
  !*** ./node_modules/graphql/utilities/getIntrospectionQuery.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.getIntrospectionQuery = getIntrospectionQuery;\n\n/**\n * Produce the GraphQL query recommended for a full schema introspection.\n * Accepts optional IntrospectionOptions.\n */\nfunction getIntrospectionQuery(options) {\n  const optionsWithDefault = {\n    descriptions: true,\n    specifiedByUrl: false,\n    directiveIsRepeatable: false,\n    schemaDescription: false,\n    inputValueDeprecation: false,\n    oneOf: false,\n    ...options,\n  };\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl\n    ? 'specifiedByURL'\n    : '';\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable\n    ? 'isRepeatable'\n    : '';\n  const schemaDescription = optionsWithDefault.schemaDescription\n    ? descriptions\n    : '';\n\n  function inputDeprecation(str) {\n    return optionsWithDefault.inputValueDeprecation ? str : '';\n  }\n\n  const oneOf = optionsWithDefault.oneOf ? 'isOneOf' : '';\n  return `\n    query IntrospectionQuery {\n      __schema {\n        ${schemaDescription}\n        queryType { name kind }\n        mutationType { name kind }\n        subscriptionType { name kind }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${descriptions}\n          ${directiveIsRepeatable}\n          locations\n          args${inputDeprecation('(includeDeprecated: true)')} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${descriptions}\n      ${specifiedByUrl}\n      ${oneOf}\n      fields(includeDeprecated: true) {\n        name\n        ${descriptions}\n        args${inputDeprecation('(includeDeprecated: true)')} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${descriptions}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${descriptions}\n      type { ...TypeRef }\n      defaultValue\n      ${inputDeprecation('isDeprecated')}\n      ${inputDeprecation('deprecationReason')}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZ2V0SW50cm9zcGVjdGlvblF1ZXJ5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixvQkFBb0I7QUFDcEIsdUJBQXVCO0FBQ3ZCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUixhQUFhO0FBQ2I7QUFDQSxRQUFRO0FBQ1IsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2dldEludHJvc3BlY3Rpb25RdWVyeS5qcz84MWU4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5nZXRJbnRyb3NwZWN0aW9uUXVlcnkgPSBnZXRJbnRyb3NwZWN0aW9uUXVlcnk7XG5cbi8qKlxuICogUHJvZHVjZSB0aGUgR3JhcGhRTCBxdWVyeSByZWNvbW1lbmRlZCBmb3IgYSBmdWxsIHNjaGVtYSBpbnRyb3NwZWN0aW9uLlxuICogQWNjZXB0cyBvcHRpb25hbCBJbnRyb3NwZWN0aW9uT3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZ2V0SW50cm9zcGVjdGlvblF1ZXJ5KG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0aW9uc1dpdGhEZWZhdWx0ID0ge1xuICAgIGRlc2NyaXB0aW9uczogdHJ1ZSxcbiAgICBzcGVjaWZpZWRCeVVybDogZmFsc2UsXG4gICAgZGlyZWN0aXZlSXNSZXBlYXRhYmxlOiBmYWxzZSxcbiAgICBzY2hlbWFEZXNjcmlwdGlvbjogZmFsc2UsXG4gICAgaW5wdXRWYWx1ZURlcHJlY2F0aW9uOiBmYWxzZSxcbiAgICBvbmVPZjogZmFsc2UsXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcbiAgY29uc3QgZGVzY3JpcHRpb25zID0gb3B0aW9uc1dpdGhEZWZhdWx0LmRlc2NyaXB0aW9ucyA/ICdkZXNjcmlwdGlvbicgOiAnJztcbiAgY29uc3Qgc3BlY2lmaWVkQnlVcmwgPSBvcHRpb25zV2l0aERlZmF1bHQuc3BlY2lmaWVkQnlVcmxcbiAgICA/ICdzcGVjaWZpZWRCeVVSTCdcbiAgICA6ICcnO1xuICBjb25zdCBkaXJlY3RpdmVJc1JlcGVhdGFibGUgPSBvcHRpb25zV2l0aERlZmF1bHQuZGlyZWN0aXZlSXNSZXBlYXRhYmxlXG4gICAgPyAnaXNSZXBlYXRhYmxlJ1xuICAgIDogJyc7XG4gIGNvbnN0IHNjaGVtYURlc2NyaXB0aW9uID0gb3B0aW9uc1dpdGhEZWZhdWx0LnNjaGVtYURlc2NyaXB0aW9uXG4gICAgPyBkZXNjcmlwdGlvbnNcbiAgICA6ICcnO1xuXG4gIGZ1bmN0aW9uIGlucHV0RGVwcmVjYXRpb24oc3RyKSB7XG4gICAgcmV0dXJuIG9wdGlvbnNXaXRoRGVmYXVsdC5pbnB1dFZhbHVlRGVwcmVjYXRpb24gPyBzdHIgOiAnJztcbiAgfVxuXG4gIGNvbnN0IG9uZU9mID0gb3B0aW9uc1dpdGhEZWZhdWx0Lm9uZU9mID8gJ2lzT25lT2YnIDogJyc7XG4gIHJldHVybiBgXG4gICAgcXVlcnkgSW50cm9zcGVjdGlvblF1ZXJ5IHtcbiAgICAgIF9fc2NoZW1hIHtcbiAgICAgICAgJHtzY2hlbWFEZXNjcmlwdGlvbn1cbiAgICAgICAgcXVlcnlUeXBlIHsgbmFtZSBraW5kIH1cbiAgICAgICAgbXV0YXRpb25UeXBlIHsgbmFtZSBraW5kIH1cbiAgICAgICAgc3Vic2NyaXB0aW9uVHlwZSB7IG5hbWUga2luZCB9XG4gICAgICAgIHR5cGVzIHtcbiAgICAgICAgICAuLi5GdWxsVHlwZVxuICAgICAgICB9XG4gICAgICAgIGRpcmVjdGl2ZXMge1xuICAgICAgICAgIG5hbWVcbiAgICAgICAgICAke2Rlc2NyaXB0aW9uc31cbiAgICAgICAgICAke2RpcmVjdGl2ZUlzUmVwZWF0YWJsZX1cbiAgICAgICAgICBsb2NhdGlvbnNcbiAgICAgICAgICBhcmdzJHtpbnB1dERlcHJlY2F0aW9uKCcoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpJyl9IHtcbiAgICAgICAgICAgIC4uLklucHV0VmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFnbWVudCBGdWxsVHlwZSBvbiBfX1R5cGUge1xuICAgICAga2luZFxuICAgICAgbmFtZVxuICAgICAgJHtkZXNjcmlwdGlvbnN9XG4gICAgICAke3NwZWNpZmllZEJ5VXJsfVxuICAgICAgJHtvbmVPZn1cbiAgICAgIGZpZWxkcyhpbmNsdWRlRGVwcmVjYXRlZDogdHJ1ZSkge1xuICAgICAgICBuYW1lXG4gICAgICAgICR7ZGVzY3JpcHRpb25zfVxuICAgICAgICBhcmdzJHtpbnB1dERlcHJlY2F0aW9uKCcoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpJyl9IHtcbiAgICAgICAgICAuLi5JbnB1dFZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgdHlwZSB7XG4gICAgICAgICAgLi4uVHlwZVJlZlxuICAgICAgICB9XG4gICAgICAgIGlzRGVwcmVjYXRlZFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvblxuICAgICAgfVxuICAgICAgaW5wdXRGaWVsZHMke2lucHV0RGVwcmVjYXRpb24oJyhpbmNsdWRlRGVwcmVjYXRlZDogdHJ1ZSknKX0ge1xuICAgICAgICAuLi5JbnB1dFZhbHVlXG4gICAgICB9XG4gICAgICBpbnRlcmZhY2VzIHtcbiAgICAgICAgLi4uVHlwZVJlZlxuICAgICAgfVxuICAgICAgZW51bVZhbHVlcyhpbmNsdWRlRGVwcmVjYXRlZDogdHJ1ZSkge1xuICAgICAgICBuYW1lXG4gICAgICAgICR7ZGVzY3JpcHRpb25zfVxuICAgICAgICBpc0RlcHJlY2F0ZWRcbiAgICAgICAgZGVwcmVjYXRpb25SZWFzb25cbiAgICAgIH1cbiAgICAgIHBvc3NpYmxlVHlwZXMge1xuICAgICAgICAuLi5UeXBlUmVmXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJhZ21lbnQgSW5wdXRWYWx1ZSBvbiBfX0lucHV0VmFsdWUge1xuICAgICAgbmFtZVxuICAgICAgJHtkZXNjcmlwdGlvbnN9XG4gICAgICB0eXBlIHsgLi4uVHlwZVJlZiB9XG4gICAgICBkZWZhdWx0VmFsdWVcbiAgICAgICR7aW5wdXREZXByZWNhdGlvbignaXNEZXByZWNhdGVkJyl9XG4gICAgICAke2lucHV0RGVwcmVjYXRpb24oJ2RlcHJlY2F0aW9uUmVhc29uJyl9XG4gICAgfVxuXG4gICAgZnJhZ21lbnQgVHlwZVJlZiBvbiBfX1R5cGUge1xuICAgICAga2luZFxuICAgICAgbmFtZVxuICAgICAgb2ZUeXBlIHtcbiAgICAgICAga2luZFxuICAgICAgICBuYW1lXG4gICAgICAgIG9mVHlwZSB7XG4gICAgICAgICAga2luZFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgICBvZlR5cGUge1xuICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgb2ZUeXBlIHtcbiAgICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgIG9mVHlwZSB7XG4gICAgICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICBvZlR5cGUge1xuICAgICAgICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgICAgb2ZUeXBlIHtcbiAgICAgICAgICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgICAgIG9mVHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICBvZlR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgYDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/getIntrospectionQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/getOperationAST.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql/utilities/getOperationAST.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.getOperationAST = getOperationAST;\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nfunction getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uQVNULmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHVCQUF1Qjs7QUFFdkIsYUFBYSxtQkFBTyxDQUFDLDRFQUFzQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uQVNULmpzP2ViOWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmdldE9wZXJhdGlvbkFTVCA9IGdldE9wZXJhdGlvbkFTVDtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbi8qKlxuICogUmV0dXJucyBhbiBvcGVyYXRpb24gQVNUIGdpdmVuIGEgZG9jdW1lbnQgQVNUIGFuZCBvcHRpb25hbGx5IGFuIG9wZXJhdGlvblxuICogbmFtZS4gSWYgYSBuYW1lIGlzIG5vdCBwcm92aWRlZCwgYW4gb3BlcmF0aW9uIGlzIG9ubHkgcmV0dXJuZWQgaWYgb25seSBvbmUgaXNcbiAqIHByb3ZpZGVkIGluIHRoZSBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQVNUKGRvY3VtZW50QVNULCBvcGVyYXRpb25OYW1lKSB7XG4gIGxldCBvcGVyYXRpb24gPSBudWxsO1xuXG4gIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBkb2N1bWVudEFTVC5kZWZpbml0aW9ucykge1xuICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IF9raW5kcy5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OKSB7XG4gICAgICB2YXIgX2RlZmluaXRpb24kbmFtZTtcblxuICAgICAgaWYgKG9wZXJhdGlvbk5hbWUgPT0gbnVsbCkge1xuICAgICAgICAvLyBJZiBubyBvcGVyYXRpb24gbmFtZSB3YXMgcHJvdmlkZWQsIG9ubHkgcmV0dXJuIGFuIE9wZXJhdGlvbiBpZiB0aGVyZVxuICAgICAgICAvLyBpcyBvbmUgZGVmaW5lZCBpbiB0aGUgZG9jdW1lbnQuIFVwb24gZW5jb3VudGVyaW5nIHRoZSBzZWNvbmQsIHJldHVyblxuICAgICAgICAvLyBudWxsLlxuICAgICAgICBpZiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBvcGVyYXRpb24gPSBkZWZpbml0aW9uO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKChfZGVmaW5pdGlvbiRuYW1lID0gZGVmaW5pdGlvbi5uYW1lKSA9PT0gbnVsbCB8fFxuICAgICAgICBfZGVmaW5pdGlvbiRuYW1lID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogX2RlZmluaXRpb24kbmFtZS52YWx1ZSkgPT09IG9wZXJhdGlvbk5hbWVcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3BlcmF0aW9uO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/getOperationAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/getOperationRootType.js":
/*!****************************************************************!*\
  !*** ./node_modules/graphql/utilities/getOperationRootType.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.getOperationRootType = getOperationRootType;\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Extracts the root type of the operation from the schema.\n *\n * @deprecated Please use `GraphQLSchema.getRootType` instead. Will be removed in v17\n */\nfunction getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    const queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new _GraphQLError.GraphQLError(\n        'Schema does not define the required query root type.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    const mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new _GraphQLError.GraphQLError(\n        'Schema is not configured for mutations.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    const subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new _GraphQLError.GraphQLError(\n        'Schema is not configured for subscriptions.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return subscriptionType;\n  }\n\n  throw new _GraphQLError.GraphQLError(\n    'Can only have query, mutation and subscription operations.',\n    {\n      nodes: operation,\n    },\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uUm9vdFR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNEJBQTRCOztBQUU1QixvQkFBb0IsbUJBQU8sQ0FBQyxvRkFBMEI7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9nZXRPcGVyYXRpb25Sb290VHlwZS5qcz83ZDMwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5nZXRPcGVyYXRpb25Sb290VHlwZSA9IGdldE9wZXJhdGlvblJvb3RUeXBlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSByb290IHR5cGUgb2YgdGhlIG9wZXJhdGlvbiBmcm9tIHRoZSBzY2hlbWEuXG4gKlxuICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgR3JhcGhRTFNjaGVtYS5nZXRSb290VHlwZWAgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIHYxN1xuICovXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25Sb290VHlwZShzY2hlbWEsIG9wZXJhdGlvbikge1xuICBpZiAob3BlcmF0aW9uLm9wZXJhdGlvbiA9PT0gJ3F1ZXJ5Jykge1xuICAgIGNvbnN0IHF1ZXJ5VHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcblxuICAgIGlmICghcXVlcnlUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICdTY2hlbWEgZG9lcyBub3QgZGVmaW5lIHRoZSByZXF1aXJlZCBxdWVyeSByb290IHR5cGUuJyxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBxdWVyeVR5cGU7XG4gIH1cblxuICBpZiAob3BlcmF0aW9uLm9wZXJhdGlvbiA9PT0gJ211dGF0aW9uJykge1xuICAgIGNvbnN0IG11dGF0aW9uVHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcblxuICAgIGlmICghbXV0YXRpb25UeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICdTY2hlbWEgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIG11dGF0aW9ucy4nLFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZXM6IG9wZXJhdGlvbixcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG11dGF0aW9uVHlwZTtcbiAgfVxuXG4gIGlmIChvcGVyYXRpb24ub3BlcmF0aW9uID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gICAgaWYgKCFzdWJzY3JpcHRpb25UeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICdTY2hlbWEgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIHN1YnNjcmlwdGlvbnMuJyxcbiAgICAgICAge1xuICAgICAgICAgIG5vZGVzOiBvcGVyYXRpb24sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzY3JpcHRpb25UeXBlO1xuICB9XG5cbiAgdGhyb3cgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICdDYW4gb25seSBoYXZlIHF1ZXJ5LCBtdXRhdGlvbiBhbmQgc3Vic2NyaXB0aW9uIG9wZXJhdGlvbnMuJyxcbiAgICB7XG4gICAgICBub2Rlczogb3BlcmF0aW9uLFxuICAgIH0sXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/getOperationRootType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/index.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/utilities/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"BreakingChangeType\", ({\n  enumerable: true,\n  get: function () {\n    return _findBreakingChanges.BreakingChangeType;\n  },\n}));\nObject.defineProperty(exports, \"DangerousChangeType\", ({\n  enumerable: true,\n  get: function () {\n    return _findBreakingChanges.DangerousChangeType;\n  },\n}));\nObject.defineProperty(exports, \"TypeInfo\", ({\n  enumerable: true,\n  get: function () {\n    return _TypeInfo.TypeInfo;\n  },\n}));\nObject.defineProperty(exports, \"assertValidName\", ({\n  enumerable: true,\n  get: function () {\n    return _assertValidName.assertValidName;\n  },\n}));\nObject.defineProperty(exports, \"astFromValue\", ({\n  enumerable: true,\n  get: function () {\n    return _astFromValue.astFromValue;\n  },\n}));\nObject.defineProperty(exports, \"buildASTSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _buildASTSchema.buildASTSchema;\n  },\n}));\nObject.defineProperty(exports, \"buildClientSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _buildClientSchema.buildClientSchema;\n  },\n}));\nObject.defineProperty(exports, \"buildSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _buildASTSchema.buildSchema;\n  },\n}));\nObject.defineProperty(exports, \"coerceInputValue\", ({\n  enumerable: true,\n  get: function () {\n    return _coerceInputValue.coerceInputValue;\n  },\n}));\nObject.defineProperty(exports, \"concatAST\", ({\n  enumerable: true,\n  get: function () {\n    return _concatAST.concatAST;\n  },\n}));\nObject.defineProperty(exports, \"doTypesOverlap\", ({\n  enumerable: true,\n  get: function () {\n    return _typeComparators.doTypesOverlap;\n  },\n}));\nObject.defineProperty(exports, \"extendSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _extendSchema.extendSchema;\n  },\n}));\nObject.defineProperty(exports, \"findBreakingChanges\", ({\n  enumerable: true,\n  get: function () {\n    return _findBreakingChanges.findBreakingChanges;\n  },\n}));\nObject.defineProperty(exports, \"findDangerousChanges\", ({\n  enumerable: true,\n  get: function () {\n    return _findBreakingChanges.findDangerousChanges;\n  },\n}));\nObject.defineProperty(exports, \"getIntrospectionQuery\", ({\n  enumerable: true,\n  get: function () {\n    return _getIntrospectionQuery.getIntrospectionQuery;\n  },\n}));\nObject.defineProperty(exports, \"getOperationAST\", ({\n  enumerable: true,\n  get: function () {\n    return _getOperationAST.getOperationAST;\n  },\n}));\nObject.defineProperty(exports, \"getOperationRootType\", ({\n  enumerable: true,\n  get: function () {\n    return _getOperationRootType.getOperationRootType;\n  },\n}));\nObject.defineProperty(exports, \"introspectionFromSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _introspectionFromSchema.introspectionFromSchema;\n  },\n}));\nObject.defineProperty(exports, \"isEqualType\", ({\n  enumerable: true,\n  get: function () {\n    return _typeComparators.isEqualType;\n  },\n}));\nObject.defineProperty(exports, \"isTypeSubTypeOf\", ({\n  enumerable: true,\n  get: function () {\n    return _typeComparators.isTypeSubTypeOf;\n  },\n}));\nObject.defineProperty(exports, \"isValidNameError\", ({\n  enumerable: true,\n  get: function () {\n    return _assertValidName.isValidNameError;\n  },\n}));\nObject.defineProperty(exports, \"lexicographicSortSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _lexicographicSortSchema.lexicographicSortSchema;\n  },\n}));\nObject.defineProperty(exports, \"printIntrospectionSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _printSchema.printIntrospectionSchema;\n  },\n}));\nObject.defineProperty(exports, \"printSchema\", ({\n  enumerable: true,\n  get: function () {\n    return _printSchema.printSchema;\n  },\n}));\nObject.defineProperty(exports, \"printType\", ({\n  enumerable: true,\n  get: function () {\n    return _printSchema.printType;\n  },\n}));\nObject.defineProperty(exports, \"separateOperations\", ({\n  enumerable: true,\n  get: function () {\n    return _separateOperations.separateOperations;\n  },\n}));\nObject.defineProperty(exports, \"stripIgnoredCharacters\", ({\n  enumerable: true,\n  get: function () {\n    return _stripIgnoredCharacters.stripIgnoredCharacters;\n  },\n}));\nObject.defineProperty(exports, \"typeFromAST\", ({\n  enumerable: true,\n  get: function () {\n    return _typeFromAST.typeFromAST;\n  },\n}));\nObject.defineProperty(exports, \"valueFromAST\", ({\n  enumerable: true,\n  get: function () {\n    return _valueFromAST.valueFromAST;\n  },\n}));\nObject.defineProperty(exports, \"valueFromASTUntyped\", ({\n  enumerable: true,\n  get: function () {\n    return _valueFromASTUntyped.valueFromASTUntyped;\n  },\n}));\nObject.defineProperty(exports, \"visitWithTypeInfo\", ({\n  enumerable: true,\n  get: function () {\n    return _TypeInfo.visitWithTypeInfo;\n  },\n}));\n\nvar _getIntrospectionQuery = __webpack_require__(/*! ./getIntrospectionQuery.js */ \"(ssr)/./node_modules/graphql/utilities/getIntrospectionQuery.js\");\n\nvar _getOperationAST = __webpack_require__(/*! ./getOperationAST.js */ \"(ssr)/./node_modules/graphql/utilities/getOperationAST.js\");\n\nvar _getOperationRootType = __webpack_require__(/*! ./getOperationRootType.js */ \"(ssr)/./node_modules/graphql/utilities/getOperationRootType.js\");\n\nvar _introspectionFromSchema = __webpack_require__(/*! ./introspectionFromSchema.js */ \"(ssr)/./node_modules/graphql/utilities/introspectionFromSchema.js\");\n\nvar _buildClientSchema = __webpack_require__(/*! ./buildClientSchema.js */ \"(ssr)/./node_modules/graphql/utilities/buildClientSchema.js\");\n\nvar _buildASTSchema = __webpack_require__(/*! ./buildASTSchema.js */ \"(ssr)/./node_modules/graphql/utilities/buildASTSchema.js\");\n\nvar _extendSchema = __webpack_require__(/*! ./extendSchema.js */ \"(ssr)/./node_modules/graphql/utilities/extendSchema.js\");\n\nvar _lexicographicSortSchema = __webpack_require__(/*! ./lexicographicSortSchema.js */ \"(ssr)/./node_modules/graphql/utilities/lexicographicSortSchema.js\");\n\nvar _printSchema = __webpack_require__(/*! ./printSchema.js */ \"(ssr)/./node_modules/graphql/utilities/printSchema.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ./typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\nvar _valueFromAST = __webpack_require__(/*! ./valueFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/valueFromAST.js\");\n\nvar _valueFromASTUntyped = __webpack_require__(/*! ./valueFromASTUntyped.js */ \"(ssr)/./node_modules/graphql/utilities/valueFromASTUntyped.js\");\n\nvar _astFromValue = __webpack_require__(/*! ./astFromValue.js */ \"(ssr)/./node_modules/graphql/utilities/astFromValue.js\");\n\nvar _TypeInfo = __webpack_require__(/*! ./TypeInfo.js */ \"(ssr)/./node_modules/graphql/utilities/TypeInfo.js\");\n\nvar _coerceInputValue = __webpack_require__(/*! ./coerceInputValue.js */ \"(ssr)/./node_modules/graphql/utilities/coerceInputValue.js\");\n\nvar _concatAST = __webpack_require__(/*! ./concatAST.js */ \"(ssr)/./node_modules/graphql/utilities/concatAST.js\");\n\nvar _separateOperations = __webpack_require__(/*! ./separateOperations.js */ \"(ssr)/./node_modules/graphql/utilities/separateOperations.js\");\n\nvar _stripIgnoredCharacters = __webpack_require__(/*! ./stripIgnoredCharacters.js */ \"(ssr)/./node_modules/graphql/utilities/stripIgnoredCharacters.js\");\n\nvar _typeComparators = __webpack_require__(/*! ./typeComparators.js */ \"(ssr)/./node_modules/graphql/utilities/typeComparators.js\");\n\nvar _assertValidName = __webpack_require__(/*! ./assertValidName.js */ \"(ssr)/./node_modules/graphql/utilities/assertValidName.js\");\n\nvar _findBreakingChanges = __webpack_require__(/*! ./findBreakingChanges.js */ \"(ssr)/./node_modules/graphql/utilities/findBreakingChanges.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/introspectionFromSchema.js":
/*!*******************************************************************!*\
  !*** ./node_modules/graphql/utilities/introspectionFromSchema.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.introspectionFromSchema = introspectionFromSchema;\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _parser = __webpack_require__(/*! ../language/parser.js */ \"(ssr)/./node_modules/graphql/language/parser.js\");\n\nvar _execute = __webpack_require__(/*! ../execution/execute.js */ \"(ssr)/./node_modules/graphql/execution/execute.js\");\n\nvar _getIntrospectionQuery = __webpack_require__(/*! ./getIntrospectionQuery.js */ \"(ssr)/./node_modules/graphql/utilities/getIntrospectionQuery.js\");\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nfunction introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    oneOf: true,\n    ...options,\n  };\n  const document = (0, _parser.parse)(\n    (0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults),\n  );\n  const result = (0, _execute.executeSync)({\n    schema,\n    document,\n  });\n  (!result.errors && result.data) || (0, _invariant.invariant)(false);\n  return result.data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvaW50cm9zcGVjdGlvbkZyb21TY2hlbWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsK0JBQStCOztBQUUvQixpQkFBaUIsbUJBQU8sQ0FBQyxrRkFBeUI7O0FBRWxELGNBQWMsbUJBQU8sQ0FBQyw4RUFBdUI7O0FBRTdDLGVBQWUsbUJBQU8sQ0FBQyxrRkFBeUI7O0FBRWhELDZCQUE2QixtQkFBTyxDQUFDLG1HQUE0Qjs7QUFFakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2ludHJvc3BlY3Rpb25Gcm9tU2NoZW1hLmpzPzg3ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmludHJvc3BlY3Rpb25Gcm9tU2NoZW1hID0gaW50cm9zcGVjdGlvbkZyb21TY2hlbWE7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxudmFyIF9wYXJzZXIgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9wYXJzZXIuanMnKTtcblxudmFyIF9leGVjdXRlID0gcmVxdWlyZSgnLi4vZXhlY3V0aW9uL2V4ZWN1dGUuanMnKTtcblxudmFyIF9nZXRJbnRyb3NwZWN0aW9uUXVlcnkgPSByZXF1aXJlKCcuL2dldEludHJvc3BlY3Rpb25RdWVyeS5qcycpO1xuXG4vKipcbiAqIEJ1aWxkIGFuIEludHJvc3BlY3Rpb25RdWVyeSBmcm9tIGEgR3JhcGhRTFNjaGVtYVxuICpcbiAqIEludHJvc3BlY3Rpb25RdWVyeSBpcyB1c2VmdWwgZm9yIHV0aWxpdGllcyB0aGF0IGNhcmUgYWJvdXQgdHlwZSBhbmQgZmllbGRcbiAqIHJlbGF0aW9uc2hpcHMsIGJ1dCBkbyBub3QgbmVlZCB0byB0cmF2ZXJzZSB0aHJvdWdoIHRob3NlIHJlbGF0aW9uc2hpcHMuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBidWlsZENsaWVudFNjaGVtYS4gVGhlIHByaW1hcnkgdXNlIGNhc2UgaXMgb3V0c2lkZVxuICogb2YgdGhlIHNlcnZlciBjb250ZXh0LCBmb3IgaW5zdGFuY2Ugd2hlbiBkb2luZyBzY2hlbWEgY29tcGFyaXNvbnMuXG4gKi9cbmZ1bmN0aW9uIGludHJvc3BlY3Rpb25Gcm9tU2NoZW1hKHNjaGVtYSwgb3B0aW9ucykge1xuICBjb25zdCBvcHRpb25zV2l0aERlZmF1bHRzID0ge1xuICAgIHNwZWNpZmllZEJ5VXJsOiB0cnVlLFxuICAgIGRpcmVjdGl2ZUlzUmVwZWF0YWJsZTogdHJ1ZSxcbiAgICBzY2hlbWFEZXNjcmlwdGlvbjogdHJ1ZSxcbiAgICBpbnB1dFZhbHVlRGVwcmVjYXRpb246IHRydWUsXG4gICAgb25lT2Y6IHRydWUsXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcbiAgY29uc3QgZG9jdW1lbnQgPSAoMCwgX3BhcnNlci5wYXJzZSkoXG4gICAgKDAsIF9nZXRJbnRyb3NwZWN0aW9uUXVlcnkuZ2V0SW50cm9zcGVjdGlvblF1ZXJ5KShvcHRpb25zV2l0aERlZmF1bHRzKSxcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gKDAsIF9leGVjdXRlLmV4ZWN1dGVTeW5jKSh7XG4gICAgc2NoZW1hLFxuICAgIGRvY3VtZW50LFxuICB9KTtcbiAgKCFyZXN1bHQuZXJyb3JzICYmIHJlc3VsdC5kYXRhKSB8fCAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcbiAgcmV0dXJuIHJlc3VsdC5kYXRhO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/introspectionFromSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/lexicographicSortSchema.js":
/*!*******************************************************************!*\
  !*** ./node_modules/graphql/utilities/lexicographicSortSchema.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _keyValMap = __webpack_require__(/*! ../jsutils/keyValMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyValMap.js\");\n\nvar _naturalCompare = __webpack_require__(/*! ../jsutils/naturalCompare.js */ \"(ssr)/./node_modules/graphql/jsutils/naturalCompare.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _introspection = __webpack_require__(/*! ../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _schema = __webpack_require__(/*! ../type/schema.js */ \"(ssr)/./node_modules/graphql/type/schema.js\");\n\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = (0, _keyValMap.keyValMap)(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new _schema.GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (\n      (0, _definition.isScalarType)(type) ||\n      (0, _introspection.isIntrospectionType)(type)\n    ) {\n      return type;\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n     false ||\n      (0, _invariant.invariant)(\n        false,\n        'Unexpected type: ' + (0, _inspect.inspect)(type),\n      );\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return (0, _naturalCompare.naturalCompare)(key1, key2);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/lexicographicSortSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/printSchema.js":
/*!*******************************************************!*\
  !*** ./node_modules/graphql/utilities/printSchema.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.printIntrospectionSchema = printIntrospectionSchema;\nexports.printSchema = printSchema;\nexports.printType = printType;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _blockString = __webpack_require__(/*! ../language/blockString.js */ \"(ssr)/./node_modules/graphql/language/blockString.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\nvar _introspection = __webpack_require__(/*! ../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _scalars = __webpack_require__(/*! ../type/scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\nvar _astFromValue = __webpack_require__(/*! ./astFromValue.js */ \"(ssr)/./node_modules/graphql/utilities/astFromValue.js\");\n\nfunction printSchema(schema) {\n  return printFilteredSchema(\n    schema,\n    (n) => !(0, _directives.isSpecifiedDirective)(n),\n    isDefinedType,\n  );\n}\n\nfunction printIntrospectionSchema(schema) {\n  return printFilteredSchema(\n    schema,\n    _directives.isSpecifiedDirective,\n    _introspection.isIntrospectionType,\n  );\n}\n\nfunction isDefinedType(type) {\n  return (\n    !(0, _scalars.isSpecifiedScalarType)(type) &&\n    !(0, _introspection.isIntrospectionType)(type)\n  );\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter) {\n  const directives = schema.getDirectives().filter(directiveFilter);\n  const types = Object.values(schema.getTypeMap()).filter(typeFilter);\n  return [\n    printSchemaDefinition(schema),\n    ...directives.map((directive) => printDirective(directive)),\n    ...types.map((type) => printType(type)),\n  ]\n    .filter(Boolean)\n    .join('\\n\\n');\n}\n\nfunction printSchemaDefinition(schema) {\n  if (schema.description == null && isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  const operationTypes = [];\n  const queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(`  query: ${queryType.name}`);\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(`  mutation: ${mutationType.name}`);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(`  subscription: ${subscriptionType.name}`);\n  }\n\n  return printDescription(schema) + `schema {\\n${operationTypes.join('\\n')}\\n}`;\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n * ```graphql\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *     subscription: Subscription\n *   }\n * ```\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\nfunction isSchemaOfCommonNames(schema) {\n  const queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction printType(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return printScalar(type);\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    return printObject(type);\n  }\n\n  if ((0, _definition.isInterfaceType)(type)) {\n    return printInterface(type);\n  }\n\n  if ((0, _definition.isUnionType)(type)) {\n    return printUnion(type);\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    return printEnum(type);\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    return printInputObject(type);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected type: ' + (0, _inspect.inspect)(type),\n    );\n}\n\nfunction printScalar(type) {\n  return (\n    printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type)\n  );\n}\n\nfunction printImplementedInterfaces(type) {\n  const interfaces = type.getInterfaces();\n  return interfaces.length\n    ? ' implements ' + interfaces.map((i) => i.name).join(' & ')\n    : '';\n}\n\nfunction printObject(type) {\n  return (\n    printDescription(type) +\n    `type ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printInterface(type) {\n  return (\n    printDescription(type) +\n    `interface ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printUnion(type) {\n  const types = type.getTypes();\n  const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(type) + 'union ' + type.name + possibleTypes;\n}\n\nfunction printEnum(type) {\n  const values = type\n    .getValues()\n    .map(\n      (value, i) =>\n        printDescription(value, '  ', !i) +\n        '  ' +\n        value.name +\n        printDeprecated(value.deprecationReason),\n    );\n  return printDescription(type) + `enum ${type.name}` + printBlock(values);\n}\n\nfunction printInputObject(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f),\n  );\n  return (\n    printDescription(type) +\n    `input ${type.name}` +\n    (type.isOneOf ? ' @oneOf' : '') +\n    printBlock(fields)\n  );\n}\n\nfunction printFields(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) =>\n      printDescription(f, '  ', !i) +\n      '  ' +\n      f.name +\n      printArgs(f.args, '  ') +\n      ': ' +\n      String(f.type) +\n      printDeprecated(f.deprecationReason),\n  );\n  return printBlock(fields);\n}\n\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\n\nfunction printArgs(args, indentation = '') {\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n  if (args.every((arg) => !arg.description)) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return (\n    '(\\n' +\n    args\n      .map(\n        (arg, i) =>\n          printDescription(arg, '  ' + indentation, !i) +\n          '  ' +\n          indentation +\n          printInputValue(arg),\n      )\n      .join('\\n') +\n    '\\n' +\n    indentation +\n    ')'\n  );\n}\n\nfunction printInputValue(arg) {\n  const defaultAST = (0, _astFromValue.astFromValue)(\n    arg.defaultValue,\n    arg.type,\n  );\n  let argDecl = arg.name + ': ' + String(arg.type);\n\n  if (defaultAST) {\n    argDecl += ` = ${(0, _printer.print)(defaultAST)}`;\n  }\n\n  return argDecl + printDeprecated(arg.deprecationReason);\n}\n\nfunction printDirective(directive) {\n  return (\n    printDescription(directive) +\n    'directive @' +\n    directive.name +\n    printArgs(directive.args) +\n    (directive.isRepeatable ? ' repeatable' : '') +\n    ' on ' +\n    directive.locations.join(' | ')\n  );\n}\n\nfunction printDeprecated(reason) {\n  if (reason == null) {\n    return '';\n  }\n\n  if (reason !== _directives.DEFAULT_DEPRECATION_REASON) {\n    const astValue = (0, _printer.print)({\n      kind: _kinds.Kind.STRING,\n      value: reason,\n    });\n    return ` @deprecated(reason: ${astValue})`;\n  }\n\n  return ' @deprecated';\n}\n\nfunction printSpecifiedByURL(scalar) {\n  if (scalar.specifiedByURL == null) {\n    return '';\n  }\n\n  const astValue = (0, _printer.print)({\n    kind: _kinds.Kind.STRING,\n    value: scalar.specifiedByURL,\n  });\n  return ` @specifiedBy(url: ${astValue})`;\n}\n\nfunction printDescription(def, indentation = '', firstInBlock = true) {\n  const { description } = def;\n\n  if (description == null) {\n    return '';\n  }\n\n  const blockString = (0, _printer.print)({\n    kind: _kinds.Kind.STRING,\n    value: description,\n    block: (0, _blockString.isPrintableAsBlockString)(description),\n  });\n  const prefix =\n    indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/printSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/separateOperations.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql/utilities/separateOperations.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.separateOperations = separateOperations;\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _visitor = __webpack_require__(/*! ../language/visitor.js */ \"(ssr)/./node_modules/graphql/language/visitor.js\");\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nfunction separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(\n          definitionNode.selectionSet,\n        );\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: _kinds.Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(\n        (node) =>\n          node === operation ||\n          (node.kind === _kinds.Kind.FRAGMENT_DEFINITION &&\n            dependencies.has(node.name.value)),\n      ),\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  (0, _visitor.visit)(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    },\n  });\n  return dependencies;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc2VwYXJhdGVPcGVyYXRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDBCQUEwQjs7QUFFMUIsYUFBYSxtQkFBTyxDQUFDLDRFQUFzQjs7QUFFM0MsZUFBZSxtQkFBTyxDQUFDLGdGQUF3Qjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixzRUFBc0U7QUFDdEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3NlcGFyYXRlT3BlcmF0aW9ucy5qcz9jN2QyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5zZXBhcmF0ZU9wZXJhdGlvbnMgPSBzZXBhcmF0ZU9wZXJhdGlvbnM7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX3Zpc2l0b3IgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS92aXNpdG9yLmpzJyk7XG5cbi8qKlxuICogc2VwYXJhdGVPcGVyYXRpb25zIGFjY2VwdHMgYSBzaW5nbGUgQVNUIGRvY3VtZW50IHdoaWNoIG1heSBjb250YWluIG1hbnlcbiAqIG9wZXJhdGlvbnMgYW5kIGZyYWdtZW50cyBhbmQgcmV0dXJucyBhIGNvbGxlY3Rpb24gb2YgQVNUIGRvY3VtZW50cyBlYWNoIG9mXG4gKiB3aGljaCBjb250YWlucyBhIHNpbmdsZSBvcGVyYXRpb24gYXMgd2VsbCB0aGUgZnJhZ21lbnQgZGVmaW5pdGlvbnMgaXRcbiAqIHJlZmVycyB0by5cbiAqL1xuZnVuY3Rpb24gc2VwYXJhdGVPcGVyYXRpb25zKGRvY3VtZW50QVNUKSB7XG4gIGNvbnN0IG9wZXJhdGlvbnMgPSBbXTtcbiAgY29uc3QgZGVwR3JhcGggPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBQb3B1bGF0ZSBtZXRhZGF0YSBhbmQgYnVpbGQgYSBkZXBlbmRlbmN5IGdyYXBoLlxuXG4gIGZvciAoY29uc3QgZGVmaW5pdGlvbk5vZGUgb2YgZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMpIHtcbiAgICBzd2l0Y2ggKGRlZmluaXRpb25Ob2RlLmtpbmQpIHtcbiAgICAgIGNhc2UgX2tpbmRzLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT046XG4gICAgICAgIG9wZXJhdGlvbnMucHVzaChkZWZpbml0aW9uTm9kZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICAgIGRlcEdyYXBoW2RlZmluaXRpb25Ob2RlLm5hbWUudmFsdWVdID0gY29sbGVjdERlcGVuZGVuY2llcyhcbiAgICAgICAgICBkZWZpbml0aW9uTm9kZS5zZWxlY3Rpb25TZXQsXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OiAvLyBpZ25vcmUgbm9uLWV4ZWN1dGFibGUgZGVmaW5pdGlvbnNcbiAgICB9XG4gIH0gLy8gRm9yIGVhY2ggb3BlcmF0aW9uLCBwcm9kdWNlIGEgbmV3IHN5bnRoZXNpemVkIEFTVCB3aGljaCBpbmNsdWRlcyBvbmx5IHdoYXRcbiAgLy8gaXMgbmVjZXNzYXJ5IGZvciBjb21wbGV0aW5nIHRoYXQgb3BlcmF0aW9uLlxuXG4gIGNvbnN0IHNlcGFyYXRlZERvY3VtZW50QVNUcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChjb25zdCBvcGVyYXRpb24gb2Ygb3BlcmF0aW9ucykge1xuICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IG5ldyBTZXQoKTtcblxuICAgIGZvciAoY29uc3QgZnJhZ21lbnROYW1lIG9mIGNvbGxlY3REZXBlbmRlbmNpZXMob3BlcmF0aW9uLnNlbGVjdGlvblNldCkpIHtcbiAgICAgIGNvbGxlY3RUcmFuc2l0aXZlRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcywgZGVwR3JhcGgsIGZyYWdtZW50TmFtZSk7XG4gICAgfSAvLyBQcm92aWRlcyB0aGUgZW1wdHkgc3RyaW5nIGZvciBhbm9ueW1vdXMgb3BlcmF0aW9ucy5cblxuICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBvcGVyYXRpb24ubmFtZSA/IG9wZXJhdGlvbi5uYW1lLnZhbHVlIDogJyc7IC8vIFRoZSBsaXN0IG9mIGRlZmluaXRpb24gbm9kZXMgdG8gYmUgaW5jbHVkZWQgZm9yIHRoaXMgb3BlcmF0aW9uLCBzb3J0ZWRcbiAgICAvLyB0byByZXRhaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIG9yaWdpbmFsIGRvY3VtZW50LlxuXG4gICAgc2VwYXJhdGVkRG9jdW1lbnRBU1RzW29wZXJhdGlvbk5hbWVdID0ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuRE9DVU1FTlQsXG4gICAgICBkZWZpbml0aW9uczogZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMuZmlsdGVyKFxuICAgICAgICAobm9kZSkgPT5cbiAgICAgICAgICBub2RlID09PSBvcGVyYXRpb24gfHxcbiAgICAgICAgICAobm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OICYmXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMuaGFzKG5vZGUubmFtZS52YWx1ZSkpLFxuICAgICAgKSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHNlcGFyYXRlZERvY3VtZW50QVNUcztcbn1cblxuLy8gRnJvbSBhIGRlcGVuZGVuY3kgZ3JhcGgsIGNvbGxlY3RzIGEgbGlzdCBvZiB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcyBieVxuLy8gcmVjdXJzaW5nIHRocm91Z2ggYSBkZXBlbmRlbmN5IGdyYXBoLlxuZnVuY3Rpb24gY29sbGVjdFRyYW5zaXRpdmVEZXBlbmRlbmNpZXMoY29sbGVjdGVkLCBkZXBHcmFwaCwgZnJvbU5hbWUpIHtcbiAgaWYgKCFjb2xsZWN0ZWQuaGFzKGZyb21OYW1lKSkge1xuICAgIGNvbGxlY3RlZC5hZGQoZnJvbU5hbWUpO1xuICAgIGNvbnN0IGltbWVkaWF0ZURlcHMgPSBkZXBHcmFwaFtmcm9tTmFtZV07XG5cbiAgICBpZiAoaW1tZWRpYXRlRGVwcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IHRvTmFtZSBvZiBpbW1lZGlhdGVEZXBzKSB7XG4gICAgICAgIGNvbGxlY3RUcmFuc2l0aXZlRGVwZW5kZW5jaWVzKGNvbGxlY3RlZCwgZGVwR3JhcGgsIHRvTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3REZXBlbmRlbmNpZXMoc2VsZWN0aW9uU2V0KSB7XG4gIGNvbnN0IGRlcGVuZGVuY2llcyA9IFtdO1xuICAoMCwgX3Zpc2l0b3IudmlzaXQpKHNlbGVjdGlvblNldCwge1xuICAgIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/separateOperations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/sortValueNode.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql/utilities/sortValueNode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.sortValueNode = sortValueNode;\n\nvar _naturalCompare = __webpack_require__(/*! ../jsutils/naturalCompare.js */ \"(ssr)/./node_modules/graphql/jsutils/naturalCompare.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\nfunction sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case _kinds.Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case _kinds.Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case _kinds.Kind.INT:\n    case _kinds.Kind.FLOAT:\n    case _kinds.Kind.STRING:\n    case _kinds.Kind.BOOLEAN:\n    case _kinds.Kind.NULL:\n    case _kinds.Kind.ENUM:\n    case _kinds.Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      (0, _naturalCompare.naturalCompare)(fieldA.name.value, fieldB.name.value),\n    );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc29ydFZhbHVlTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixxQkFBcUI7O0FBRXJCLHNCQUFzQixtQkFBTyxDQUFDLDRGQUE4Qjs7QUFFNUQsYUFBYSxtQkFBTyxDQUFDLDRFQUFzQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlOztBQUVmO0FBQ0EsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc29ydFZhbHVlTm9kZS5qcz9lMzA3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5zb3J0VmFsdWVOb2RlID0gc29ydFZhbHVlTm9kZTtcblxudmFyIF9uYXR1cmFsQ29tcGFyZSA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvbmF0dXJhbENvbXBhcmUuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbi8qKlxuICogU29ydCBWYWx1ZU5vZGUuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgc29ydGVkIGNvcHkgb2YgdGhlIGdpdmVuIFZhbHVlTm9kZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gc29ydFZhbHVlTm9kZSh2YWx1ZU5vZGUpIHtcbiAgc3dpdGNoICh2YWx1ZU5vZGUua2luZCkge1xuICAgIGNhc2UgX2tpbmRzLktpbmQuT0JKRUNUOlxuICAgICAgcmV0dXJuIHsgLi4udmFsdWVOb2RlLCBmaWVsZHM6IHNvcnRGaWVsZHModmFsdWVOb2RlLmZpZWxkcykgfTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuTElTVDpcbiAgICAgIHJldHVybiB7IC4uLnZhbHVlTm9kZSwgdmFsdWVzOiB2YWx1ZU5vZGUudmFsdWVzLm1hcChzb3J0VmFsdWVOb2RlKSB9O1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5JTlQ6XG4gICAgY2FzZSBfa2luZHMuS2luZC5GTE9BVDpcbiAgICBjYXNlIF9raW5kcy5LaW5kLlNUUklORzpcbiAgICBjYXNlIF9raW5kcy5LaW5kLkJPT0xFQU46XG4gICAgY2FzZSBfa2luZHMuS2luZC5OVUxMOlxuICAgIGNhc2UgX2tpbmRzLktpbmQuRU5VTTpcbiAgICBjYXNlIF9raW5kcy5LaW5kLlZBUklBQkxFOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzb3J0RmllbGRzKGZpZWxkcykge1xuICByZXR1cm4gZmllbGRzXG4gICAgLm1hcCgoZmllbGROb2RlKSA9PiAoe1xuICAgICAgLi4uZmllbGROb2RlLFxuICAgICAgdmFsdWU6IHNvcnRWYWx1ZU5vZGUoZmllbGROb2RlLnZhbHVlKSxcbiAgICB9KSlcbiAgICAuc29ydCgoZmllbGRBLCBmaWVsZEIpID0+XG4gICAgICAoMCwgX25hdHVyYWxDb21wYXJlLm5hdHVyYWxDb21wYXJlKShmaWVsZEEubmFtZS52YWx1ZSwgZmllbGRCLm5hbWUudmFsdWUpLFxuICAgICk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/sortValueNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/stripIgnoredCharacters.js":
/*!******************************************************************!*\
  !*** ./node_modules/graphql/utilities/stripIgnoredCharacters.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.stripIgnoredCharacters = stripIgnoredCharacters;\n\nvar _blockString = __webpack_require__(/*! ../language/blockString.js */ \"(ssr)/./node_modules/graphql/language/blockString.js\");\n\nvar _lexer = __webpack_require__(/*! ../language/lexer.js */ \"(ssr)/./node_modules/graphql/language/lexer.js\");\n\nvar _source = __webpack_require__(/*! ../language/source.js */ \"(ssr)/./node_modules/graphql/language/source.js\");\n\nvar _tokenKind = __webpack_require__(/*! ../language/tokenKind.js */ \"(ssr)/./node_modules/graphql/language/tokenKind.js\");\n\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\nfunction stripIgnoredCharacters(source) {\n  const sourceObj = (0, _source.isSource)(source)\n    ? source\n    : new _source.Source(source);\n  const body = sourceObj.body;\n  const lexer = new _lexer.Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(\n      currentToken.kind,\n    );\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (\n        isNonPunctuator ||\n        currentToken.kind === _tokenKind.TokenKind.SPREAD\n      ) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {\n      strippedBody += (0, _blockString.printBlockString)(currentToken.value, {\n        minimize: true,\n      });\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc3RyaXBJZ25vcmVkQ2hhcmFjdGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw4QkFBOEI7O0FBRTlCLG1CQUFtQixtQkFBTyxDQUFDLHdGQUE0Qjs7QUFFdkQsYUFBYSxtQkFBTyxDQUFDLDRFQUFzQjs7QUFFM0MsY0FBYyxtQkFBTyxDQUFDLDhFQUF1Qjs7QUFFN0MsaUJBQWlCLG1CQUFPLENBQUMsb0ZBQTBCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyw2QkFBNkIsSUFBSTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9zdHJpcElnbm9yZWRDaGFyYWN0ZXJzLmpzPzM5MDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnN0cmlwSWdub3JlZENoYXJhY3RlcnMgPSBzdHJpcElnbm9yZWRDaGFyYWN0ZXJzO1xuXG52YXIgX2Jsb2NrU3RyaW5nID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvYmxvY2tTdHJpbmcuanMnKTtcblxudmFyIF9sZXhlciA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2xleGVyLmpzJyk7XG5cbnZhciBfc291cmNlID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2Uvc291cmNlLmpzJyk7XG5cbnZhciBfdG9rZW5LaW5kID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvdG9rZW5LaW5kLmpzJyk7XG5cbi8qKlxuICogU3RyaXBzIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IHNpZ25pZmljYW50IHRvIHRoZSB2YWxpZGl0eSBvciBleGVjdXRpb25cbiAqIG9mIGEgR3JhcGhRTCBkb2N1bWVudDpcbiAqICAgLSBVbmljb2RlQk9NXG4gKiAgIC0gV2hpdGVTcGFjZVxuICogICAtIExpbmVUZXJtaW5hdG9yXG4gKiAgIC0gQ29tbWVudFxuICogICAtIENvbW1hXG4gKiAgIC0gQmxvY2tTdHJpbmcgaW5kZW50YXRpb25cbiAqXG4gKiBOb3RlOiBJdCBpcyByZXF1aXJlZCB0byBoYXZlIGEgZGVsaW1pdGVyIGNoYXJhY3RlciBiZXR3ZWVuIG5laWdoYm9yaW5nXG4gKiBub24tcHVuY3R1YXRvciB0b2tlbnMgYW5kIHRoaXMgZnVuY3Rpb24gYWx3YXlzIHVzZXMgc2luZ2xlIHNwYWNlIGFzIGRlbGltaXRlci5cbiAqXG4gKiBJdCBpcyBndWFyYW50ZWVkIHRoYXQgYm90aCBpbnB1dCBhbmQgb3V0cHV0IGRvY3VtZW50cyBpZiBwYXJzZWQgd291bGQgcmVzdWx0XG4gKiBpbiB0aGUgZXhhY3Qgc2FtZSBBU1QgZXhjZXB0IGZvciBub2RlcyBsb2NhdGlvbi5cbiAqXG4gKiBXYXJuaW5nOiBJdCBpcyBndWFyYW50ZWVkIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsIGFsd2F5cyBwcm9kdWNlIHN0YWJsZSByZXN1bHRzLlxuICogSG93ZXZlciwgaXQncyBub3QgZ3VhcmFudGVlZCB0aGF0IGl0IHdpbGwgc3RheSB0aGUgc2FtZSBiZXR3ZWVuIGRpZmZlcmVudFxuICogcmVsZWFzZXMgZHVlIHRvIGJ1Z2ZpeGVzIG9yIGNoYW5nZXMgaW4gdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBRdWVyeSBleGFtcGxlOlxuICpcbiAqIGBgYGdyYXBocWxcbiAqIHF1ZXJ5IFNvbWVRdWVyeSgkZm9vOiBTdHJpbmchLCAkYmFyOiBTdHJpbmcpIHtcbiAqICAgc29tZUZpZWxkKGZvbzogJGZvbywgYmFyOiAkYmFyKSB7XG4gKiAgICAgYVxuICogICAgIGIge1xuICogICAgICAgY1xuICogICAgICAgZFxuICogICAgIH1cbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQmVjb21lczpcbiAqXG4gKiBgYGBncmFwaHFsXG4gKiBxdWVyeSBTb21lUXVlcnkoJGZvbzpTdHJpbmchJGJhcjpTdHJpbmcpe3NvbWVGaWVsZChmb286JGZvbyBiYXI6JGJhcil7YSBie2MgZH19fVxuICogYGBgXG4gKlxuICogU0RMIGV4YW1wbGU6XG4gKlxuICogYGBgZ3JhcGhxbFxuICogXCJcIlwiXG4gKiBUeXBlIGRlc2NyaXB0aW9uXG4gKiBcIlwiXCJcbiAqIHR5cGUgRm9vIHtcbiAqICAgXCJcIlwiXG4gKiAgIEZpZWxkIGRlc2NyaXB0aW9uXG4gKiAgIFwiXCJcIlxuICogICBiYXI6IFN0cmluZ1xuICogfVxuICogYGBgXG4gKlxuICogQmVjb21lczpcbiAqXG4gKiBgYGBncmFwaHFsXG4gKiBcIlwiXCJUeXBlIGRlc2NyaXB0aW9uXCJcIlwiIHR5cGUgRm9ve1wiXCJcIkZpZWxkIGRlc2NyaXB0aW9uXCJcIlwiIGJhcjpTdHJpbmd9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gc3RyaXBJZ25vcmVkQ2hhcmFjdGVycyhzb3VyY2UpIHtcbiAgY29uc3Qgc291cmNlT2JqID0gKDAsIF9zb3VyY2UuaXNTb3VyY2UpKHNvdXJjZSlcbiAgICA/IHNvdXJjZVxuICAgIDogbmV3IF9zb3VyY2UuU291cmNlKHNvdXJjZSk7XG4gIGNvbnN0IGJvZHkgPSBzb3VyY2VPYmouYm9keTtcbiAgY29uc3QgbGV4ZXIgPSBuZXcgX2xleGVyLkxleGVyKHNvdXJjZU9iaik7XG4gIGxldCBzdHJpcHBlZEJvZHkgPSAnJztcbiAgbGV0IHdhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvciA9IGZhbHNlO1xuXG4gIHdoaWxlIChsZXhlci5hZHZhbmNlKCkua2luZCAhPT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuRU9GKSB7XG4gICAgY29uc3QgY3VycmVudFRva2VuID0gbGV4ZXIudG9rZW47XG4gICAgY29uc3QgdG9rZW5LaW5kID0gY3VycmVudFRva2VuLmtpbmQ7XG4gICAgLyoqXG4gICAgICogRXZlcnkgdHdvIG5vbi1wdW5jdHVhdG9yIHRva2VucyBzaG91bGQgaGF2ZSBzcGFjZSBiZXR3ZWVuIHRoZW0uXG4gICAgICogQWxzbyBwcmV2ZW50IGNhc2Ugb2Ygbm9uLXB1bmN0dWF0b3IgdG9rZW4gZm9sbG93aW5nIGJ5IHNwcmVhZCByZXN1bHRpbmdcbiAgICAgKiBpbiBpbnZhbGlkIHRva2VuIChlLmcuIGAxLi4uYCBpcyBpbnZhbGlkIEZsb2F0IHRva2VuKS5cbiAgICAgKi9cblxuICAgIGNvbnN0IGlzTm9uUHVuY3R1YXRvciA9ICEoMCwgX2xleGVyLmlzUHVuY3R1YXRvclRva2VuS2luZCkoXG4gICAgICBjdXJyZW50VG9rZW4ua2luZCxcbiAgICApO1xuXG4gICAgaWYgKHdhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvcikge1xuICAgICAgaWYgKFxuICAgICAgICBpc05vblB1bmN0dWF0b3IgfHxcbiAgICAgICAgY3VycmVudFRva2VuLmtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLlNQUkVBRFxuICAgICAgKSB7XG4gICAgICAgIHN0cmlwcGVkQm9keSArPSAnICc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5Cb2R5ID0gYm9keS5zbGljZShjdXJyZW50VG9rZW4uc3RhcnQsIGN1cnJlbnRUb2tlbi5lbmQpO1xuXG4gICAgaWYgKHRva2VuS2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuQkxPQ0tfU1RSSU5HKSB7XG4gICAgICBzdHJpcHBlZEJvZHkgKz0gKDAsIF9ibG9ja1N0cmluZy5wcmludEJsb2NrU3RyaW5nKShjdXJyZW50VG9rZW4udmFsdWUsIHtcbiAgICAgICAgbWluaW1pemU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyaXBwZWRCb2R5ICs9IHRva2VuQm9keTtcbiAgICB9XG5cbiAgICB3YXNMYXN0QWRkZWRUb2tlbk5vblB1bmN0dWF0b3IgPSBpc05vblB1bmN0dWF0b3I7XG4gIH1cblxuICByZXR1cm4gc3RyaXBwZWRCb2R5O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/stripIgnoredCharacters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/typeComparators.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql/utilities/typeComparators.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.doTypesOverlap = doTypesOverlap;\nexports.isEqualType = isEqualType;\nexports.isTypeSubTypeOf = isTypeSubTypeOf;\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nfunction isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (\n    (0, _definition.isNonNullType)(typeA) &&\n    (0, _definition.isNonNullType)(typeB)\n  ) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (\n    (0, _definition.isListType)(typeA) &&\n    (0, _definition.isListType)(typeB)\n  ) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nfunction isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if ((0, _definition.isNonNullType)(superType)) {\n    if ((0, _definition.isNonNullType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if ((0, _definition.isNonNullType)(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if ((0, _definition.isListType)(superType)) {\n    if ((0, _definition.isListType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if ((0, _definition.isListType)(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    (0, _definition.isAbstractType)(superType) &&\n    ((0, _definition.isInterfaceType)(maybeSubType) ||\n      (0, _definition.isObjectType)(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nfunction doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if ((0, _definition.isAbstractType)(typeA)) {\n    if ((0, _definition.isAbstractType)(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if ((0, _definition.isAbstractType)(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdHlwZUNvbXBhcmF0b3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjtBQUN0QixtQkFBbUI7QUFDbkIsdUJBQXVCOztBQUV2QixrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBdUI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5qcz8xZjYxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5kb1R5cGVzT3ZlcmxhcCA9IGRvVHlwZXNPdmVybGFwO1xuZXhwb3J0cy5pc0VxdWFsVHlwZSA9IGlzRXF1YWxUeXBlO1xuZXhwb3J0cy5pc1R5cGVTdWJUeXBlT2YgPSBpc1R5cGVTdWJUeXBlT2Y7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIFByb3ZpZGVkIHR3byB0eXBlcywgcmV0dXJuIHRydWUgaWYgdGhlIHR5cGVzIGFyZSBlcXVhbCAoaW52YXJpYW50KS5cbiAqL1xuZnVuY3Rpb24gaXNFcXVhbFR5cGUodHlwZUEsIHR5cGVCKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZXMgYXJlIGVxdWFsLlxuICBpZiAodHlwZUEgPT09IHR5cGVCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSWYgZWl0aGVyIHR5cGUgaXMgbm9uLW51bGwsIHRoZSBvdGhlciBtdXN0IGFsc28gYmUgbm9uLW51bGwuXG5cbiAgaWYgKFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKSh0eXBlQSkgJiZcbiAgICAoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkodHlwZUIpXG4gICkge1xuICAgIHJldHVybiBpc0VxdWFsVHlwZSh0eXBlQS5vZlR5cGUsIHR5cGVCLm9mVHlwZSk7XG4gIH0gLy8gSWYgZWl0aGVyIHR5cGUgaXMgYSBsaXN0LCB0aGUgb3RoZXIgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuICBpZiAoXG4gICAgKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKHR5cGVBKSAmJlxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0xpc3RUeXBlKSh0eXBlQilcbiAgKSB7XG4gICAgcmV0dXJuIGlzRXF1YWxUeXBlKHR5cGVBLm9mVHlwZSwgdHlwZUIub2ZUeXBlKTtcbiAgfSAvLyBPdGhlcndpc2UgdGhlIHR5cGVzIGFyZSBub3QgZXF1YWwuXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBQcm92aWRlZCBhIHR5cGUgYW5kIGEgc3VwZXIgdHlwZSwgcmV0dXJuIHRydWUgaWYgdGhlIGZpcnN0IHR5cGUgaXMgZWl0aGVyXG4gKiBlcXVhbCBvciBhIHN1YnNldCBvZiB0aGUgc2Vjb25kIHN1cGVyIHR5cGUgKGNvdmFyaWFudCkuXG4gKi9cblxuZnVuY3Rpb24gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLCBzdXBlclR5cGUpIHtcbiAgLy8gRXF1aXZhbGVudCB0eXBlIGlzIGEgdmFsaWQgc3VidHlwZVxuICBpZiAobWF5YmVTdWJUeXBlID09PSBzdXBlclR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgaXMgbm9uLW51bGwsIG1heWJlU3ViVHlwZSBtdXN0IGFsc28gYmUgbm9uLW51bGwuXG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShzdXBlclR5cGUpKSB7XG4gICAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShtYXliZVN1YlR5cGUpKSB7XG4gICAgICByZXR1cm4gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLm9mVHlwZSwgc3VwZXJUeXBlLm9mVHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCgwLCBfZGVmaW5pdGlvbi5pc05vbk51bGxUeXBlKShtYXliZVN1YlR5cGUpKSB7XG4gICAgLy8gSWYgc3VwZXJUeXBlIGlzIG51bGxhYmxlLCBtYXliZVN1YlR5cGUgbWF5IGJlIG5vbi1udWxsIG9yIG51bGxhYmxlLlxuICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUpO1xuICB9IC8vIElmIHN1cGVyVHlwZSB0eXBlIGlzIGEgbGlzdCwgbWF5YmVTdWJUeXBlIHR5cGUgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKHN1cGVyVHlwZSkpIHtcbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKG1heWJlU3ViVHlwZSkpIHtcbiAgICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUub2ZUeXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGlzdFR5cGUpKG1heWJlU3ViVHlwZSkpIHtcbiAgICAvLyBJZiBzdXBlclR5cGUgaXMgbm90IGEgbGlzdCwgbWF5YmVTdWJUeXBlIG11c3QgYWxzbyBiZSBub3QgYSBsaXN0LlxuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgdHlwZSBpcyBhbiBhYnN0cmFjdCB0eXBlLCBjaGVjayBpZiBpdCBpcyBzdXBlciB0eXBlIG9mIG1heWJlU3ViVHlwZS5cbiAgLy8gT3RoZXJ3aXNlLCB0aGUgY2hpbGQgdHlwZSBpcyBub3QgYSB2YWxpZCBzdWJ0eXBlIG9mIHRoZSBwYXJlbnQgdHlwZS5cblxuICByZXR1cm4gKFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0Fic3RyYWN0VHlwZSkoc3VwZXJUeXBlKSAmJlxuICAgICgoMCwgX2RlZmluaXRpb24uaXNJbnRlcmZhY2VUeXBlKShtYXliZVN1YlR5cGUpIHx8XG4gICAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKShtYXliZVN1YlR5cGUpKSAmJlxuICAgIHNjaGVtYS5pc1N1YlR5cGUoc3VwZXJUeXBlLCBtYXliZVN1YlR5cGUpXG4gICk7XG59XG4vKipcbiAqIFByb3ZpZGVkIHR3byBjb21wb3NpdGUgdHlwZXMsIGRldGVybWluZSBpZiB0aGV5IFwib3ZlcmxhcFwiLiBUd28gY29tcG9zaXRlXG4gKiB0eXBlcyBvdmVybGFwIHdoZW4gdGhlIFNldHMgb2YgcG9zc2libGUgY29uY3JldGUgdHlwZXMgZm9yIGVhY2ggaW50ZXJzZWN0LlxuICpcbiAqIFRoaXMgaXMgb2Z0ZW4gdXNlZCB0byBkZXRlcm1pbmUgaWYgYSBmcmFnbWVudCBvZiBhIGdpdmVuIHR5cGUgY291bGQgcG9zc2libHlcbiAqIGJlIHZpc2l0ZWQgaW4gYSBjb250ZXh0IG9mIGFub3RoZXIgdHlwZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGNvbW11dGF0aXZlLlxuICovXG5cbmZ1bmN0aW9uIGRvVHlwZXNPdmVybGFwKHNjaGVtYSwgdHlwZUEsIHR5cGVCKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZXMgb3ZlcmxhcFxuICBpZiAodHlwZUEgPT09IHR5cGVCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlQSkpIHtcbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlQikpIHtcbiAgICAgIC8vIElmIGJvdGggdHlwZXMgYXJlIGFic3RyYWN0LCB0aGVuIGRldGVybWluZSBpZiB0aGVyZSBpcyBhbnkgaW50ZXJzZWN0aW9uXG4gICAgICAvLyBiZXR3ZWVuIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGVzIG9mIGVhY2guXG4gICAgICByZXR1cm4gc2NoZW1hXG4gICAgICAgIC5nZXRQb3NzaWJsZVR5cGVzKHR5cGVBKVxuICAgICAgICAuc29tZSgodHlwZSkgPT4gc2NoZW1hLmlzU3ViVHlwZSh0eXBlQiwgdHlwZSkpO1xuICAgIH0gLy8gRGV0ZXJtaW5lIGlmIHRoZSBsYXR0ZXIgdHlwZSBpcyBhIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGUgb2YgdGhlIGZvcm1lci5cblxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVBLCB0eXBlQik7XG4gIH1cblxuICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlQikpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGZvcm1lciB0eXBlIGlzIGEgcG9zc2libGUgY29uY3JldGUgdHlwZSBvZiB0aGUgbGF0dGVyLlxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlQSk7XG4gIH0gLy8gT3RoZXJ3aXNlIHRoZSB0eXBlcyBkbyBub3Qgb3ZlcmxhcC5cblxuICByZXR1cm4gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/typeComparators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/typeFromAST.js":
/*!*******************************************************!*\
  !*** ./node_modules/graphql/utilities/typeFromAST.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.typeFromAST = typeFromAST;\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nfunction typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case _kinds.Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new _definition.GraphQLList(innerType);\n    }\n\n    case _kinds.Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new _definition.GraphQLNonNull(innerType);\n    }\n\n    case _kinds.Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdHlwZUZyb21BU1QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsbUJBQW1COztBQUVuQixhQUFhLG1CQUFPLENBQUMsNEVBQXNCOztBQUUzQyxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBdUI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3R5cGVGcm9tQVNULmpzP2FlZjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLnR5cGVGcm9tQVNUID0gdHlwZUZyb21BU1Q7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxuZnVuY3Rpb24gdHlwZUZyb21BU1Qoc2NoZW1hLCB0eXBlTm9kZSkge1xuICBzd2l0Y2ggKHR5cGVOb2RlLmtpbmQpIHtcbiAgICBjYXNlIF9raW5kcy5LaW5kLkxJU1RfVFlQRToge1xuICAgICAgY29uc3QgaW5uZXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB0eXBlTm9kZS50eXBlKTtcbiAgICAgIHJldHVybiBpbm5lclR5cGUgJiYgbmV3IF9kZWZpbml0aW9uLkdyYXBoUUxMaXN0KGlubmVyVHlwZSk7XG4gICAgfVxuXG4gICAgY2FzZSBfa2luZHMuS2luZC5OT05fTlVMTF9UWVBFOiB7XG4gICAgICBjb25zdCBpbm5lclR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVOb2RlLnR5cGUpO1xuICAgICAgcmV0dXJuIGlubmVyVHlwZSAmJiBuZXcgX2RlZmluaXRpb24uR3JhcGhRTE5vbk51bGwoaW5uZXJUeXBlKTtcbiAgICB9XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLk5BTUVEX1RZUEU6XG4gICAgICByZXR1cm4gc2NoZW1hLmdldFR5cGUodHlwZU5vZGUubmFtZS52YWx1ZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/typeFromAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/valueFromAST.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql/utilities/valueFromAST.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.valueFromAST = valueFromAST;\n\nvar _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _keyMap = __webpack_require__(/*! ../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _definition = __webpack_require__(/*! ../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === _kinds.Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && (0, _definition.isNonNullType)(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if ((0, _definition.isNonNullType)(type)) {\n    if (valueNode.kind === _kinds.Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === _kinds.Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === _kinds.Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if ((0, _definition.isNonNullType)(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = (0, _keyMap.keyMap)(\n      valueNode.fields,\n      (field) => field.name.value,\n    );\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedObj);\n\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n\n      if (coercedObj[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n\n    return coercedObj;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === _kinds.Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/valueFromAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/utilities/valueFromASTUntyped.js":
/*!***************************************************************!*\
  !*** ./node_modules/graphql/utilities/valueFromASTUntyped.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.valueFromASTUntyped = valueFromASTUntyped;\n\nvar _keyValMap = __webpack_require__(/*! ../jsutils/keyValMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyValMap.js\");\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nfunction valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case _kinds.Kind.NULL:\n      return null;\n\n    case _kinds.Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case _kinds.Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case _kinds.Kind.STRING:\n    case _kinds.Kind.ENUM:\n    case _kinds.Kind.BOOLEAN:\n      return valueNode.value;\n\n    case _kinds.Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case _kinds.Kind.OBJECT:\n      return (0, _keyValMap.keyValMap)(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case _kinds.Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdmFsdWVGcm9tQVNUVW50eXBlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQkFBMkI7O0FBRTNCLGlCQUFpQixtQkFBTyxDQUFDLGtGQUF5Qjs7QUFFbEQsYUFBYSxtQkFBTyxDQUFDLDRFQUFzQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVFVudHlwZWQuanM/YTZmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMudmFsdWVGcm9tQVNUVW50eXBlZCA9IHZhbHVlRnJvbUFTVFVudHlwZWQ7XG5cbnZhciBfa2V5VmFsTWFwID0gcmVxdWlyZSgnLi4vanN1dGlscy9rZXlWYWxNYXAuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbi8qKlxuICogUHJvZHVjZXMgYSBKYXZhU2NyaXB0IHZhbHVlIGdpdmVuIGEgR3JhcGhRTCBWYWx1ZSBBU1QuXG4gKlxuICogVW5saWtlIGB2YWx1ZUZyb21BU1QoKWAsIG5vIHR5cGUgaXMgcHJvdmlkZWQuIFRoZSByZXN1bHRpbmcgSmF2YVNjcmlwdCB2YWx1ZVxuICogd2lsbCByZWZsZWN0IHRoZSBwcm92aWRlZCBHcmFwaFFMIHZhbHVlIEFTVC5cbiAqXG4gKiB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHwgSmF2YVNjcmlwdCBWYWx1ZSB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8IElucHV0IE9iamVjdCAgICAgICAgIHwgT2JqZWN0ICAgICAgICAgICB8XG4gKiB8IExpc3QgICAgICAgICAgICAgICAgIHwgQXJyYXkgICAgICAgICAgICB8XG4gKiB8IEJvb2xlYW4gICAgICAgICAgICAgIHwgQm9vbGVhbiAgICAgICAgICB8XG4gKiB8IFN0cmluZyAvIEVudW0gICAgICAgIHwgU3RyaW5nICAgICAgICAgICB8XG4gKiB8IEludCAvIEZsb2F0ICAgICAgICAgIHwgTnVtYmVyICAgICAgICAgICB8XG4gKiB8IE51bGwgICAgICAgICAgICAgICAgIHwgbnVsbCAgICAgICAgICAgICB8XG4gKlxuICovXG5mdW5jdGlvbiB2YWx1ZUZyb21BU1RVbnR5cGVkKHZhbHVlTm9kZSwgdmFyaWFibGVzKSB7XG4gIHN3aXRjaCAodmFsdWVOb2RlLmtpbmQpIHtcbiAgICBjYXNlIF9raW5kcy5LaW5kLk5VTEw6XG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuSU5UOlxuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlTm9kZS52YWx1ZSwgMTApO1xuXG4gICAgY2FzZSBfa2luZHMuS2luZC5GTE9BVDpcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlTm9kZS52YWx1ZSk7XG5cbiAgICBjYXNlIF9raW5kcy5LaW5kLlNUUklORzpcbiAgICBjYXNlIF9raW5kcy5LaW5kLkVOVU06XG4gICAgY2FzZSBfa2luZHMuS2luZC5CT09MRUFOOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuTElTVDpcbiAgICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWVzLm1hcCgobm9kZSkgPT5cbiAgICAgICAgdmFsdWVGcm9tQVNUVW50eXBlZChub2RlLCB2YXJpYWJsZXMpLFxuICAgICAgKTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuT0JKRUNUOlxuICAgICAgcmV0dXJuICgwLCBfa2V5VmFsTWFwLmtleVZhbE1hcCkoXG4gICAgICAgIHZhbHVlTm9kZS5maWVsZHMsXG4gICAgICAgIChmaWVsZCkgPT4gZmllbGQubmFtZS52YWx1ZSxcbiAgICAgICAgKGZpZWxkKSA9PiB2YWx1ZUZyb21BU1RVbnR5cGVkKGZpZWxkLnZhbHVlLCB2YXJpYWJsZXMpLFxuICAgICAgKTtcblxuICAgIGNhc2UgX2tpbmRzLktpbmQuVkFSSUFCTEU6XG4gICAgICByZXR1cm4gdmFyaWFibGVzID09PSBudWxsIHx8IHZhcmlhYmxlcyA9PT0gdm9pZCAwXG4gICAgICAgID8gdm9pZCAwXG4gICAgICAgIDogdmFyaWFibGVzW3ZhbHVlTm9kZS5uYW1lLnZhbHVlXTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/utilities/valueFromASTUntyped.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/ValidationContext.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql/validation/ValidationContext.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.ValidationContext =\n  exports.SDLValidationContext =\n  exports.ASTValidationContext =\n    void 0;\n\nvar _kinds = __webpack_require__(/*! ../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _visitor = __webpack_require__(/*! ../language/visitor.js */ \"(ssr)/./node_modules/graphql/language/visitor.js\");\n\nvar _TypeInfo = __webpack_require__(/*! ../utilities/TypeInfo.js */ \"(ssr)/./node_modules/graphql/utilities/TypeInfo.js\");\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nclass ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\n\nexports.ASTValidationContext = ASTValidationContext;\n\nclass SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\n\nexports.SDLValidationContext = SDLValidationContext;\n\nclass ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new _TypeInfo.TypeInfo(this._schema);\n      (0, _visitor.visit)(\n        node,\n        (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n              parentType: typeInfo.getParentInputType(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n\nexports.ValidationContext = ValidationContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/ValidationContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/index.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/validation/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nObject.defineProperty(exports, \"ExecutableDefinitionsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;\n  },\n}));\nObject.defineProperty(exports, \"FieldsOnCorrectTypeRule\", ({\n  enumerable: true,\n  get: function () {\n    return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;\n  },\n}));\nObject.defineProperty(exports, \"FragmentsOnCompositeTypesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownArgumentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _KnownArgumentNamesRule.KnownArgumentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownDirectivesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _KnownDirectivesRule.KnownDirectivesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownFragmentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _KnownFragmentNamesRule.KnownFragmentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"KnownTypeNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _KnownTypeNamesRule.KnownTypeNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"LoneAnonymousOperationRule\", ({\n  enumerable: true,\n  get: function () {\n    return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;\n  },\n}));\nObject.defineProperty(exports, \"LoneSchemaDefinitionRule\", ({\n  enumerable: true,\n  get: function () {\n    return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;\n  },\n}));\nObject.defineProperty(exports, \"MaxIntrospectionDepthRule\", ({\n  enumerable: true,\n  get: function () {\n    return _MaxIntrospectionDepthRule.MaxIntrospectionDepthRule;\n  },\n}));\nObject.defineProperty(exports, \"NoDeprecatedCustomRule\", ({\n  enumerable: true,\n  get: function () {\n    return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;\n  },\n}));\nObject.defineProperty(exports, \"NoFragmentCyclesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _NoFragmentCyclesRule.NoFragmentCyclesRule;\n  },\n}));\nObject.defineProperty(exports, \"NoSchemaIntrospectionCustomRule\", ({\n  enumerable: true,\n  get: function () {\n    return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;\n  },\n}));\nObject.defineProperty(exports, \"NoUndefinedVariablesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;\n  },\n}));\nObject.defineProperty(exports, \"NoUnusedFragmentsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;\n  },\n}));\nObject.defineProperty(exports, \"NoUnusedVariablesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _NoUnusedVariablesRule.NoUnusedVariablesRule;\n  },\n}));\nObject.defineProperty(exports, \"OverlappingFieldsCanBeMergedRule\", ({\n  enumerable: true,\n  get: function () {\n    return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;\n  },\n}));\nObject.defineProperty(exports, \"PossibleFragmentSpreadsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;\n  },\n}));\nObject.defineProperty(exports, \"PossibleTypeExtensionsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;\n  },\n}));\nObject.defineProperty(exports, \"ProvidedRequiredArgumentsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;\n  },\n}));\nObject.defineProperty(exports, \"ScalarLeafsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _ScalarLeafsRule.ScalarLeafsRule;\n  },\n}));\nObject.defineProperty(exports, \"SingleFieldSubscriptionsRule\", ({\n  enumerable: true,\n  get: function () {\n    return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueArgumentDefinitionNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueArgumentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueDirectiveNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueDirectivesPerLocationRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueEnumValueNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueFieldDefinitionNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueFragmentNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueInputFieldNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueOperationNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueOperationNamesRule.UniqueOperationNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueOperationTypesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueOperationTypesRule.UniqueOperationTypesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueTypeNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueTypeNamesRule.UniqueTypeNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"UniqueVariableNamesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _UniqueVariableNamesRule.UniqueVariableNamesRule;\n  },\n}));\nObject.defineProperty(exports, \"ValidationContext\", ({\n  enumerable: true,\n  get: function () {\n    return _ValidationContext.ValidationContext;\n  },\n}));\nObject.defineProperty(exports, \"ValuesOfCorrectTypeRule\", ({\n  enumerable: true,\n  get: function () {\n    return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;\n  },\n}));\nObject.defineProperty(exports, \"VariablesAreInputTypesRule\", ({\n  enumerable: true,\n  get: function () {\n    return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;\n  },\n}));\nObject.defineProperty(exports, \"VariablesInAllowedPositionRule\", ({\n  enumerable: true,\n  get: function () {\n    return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;\n  },\n}));\nObject.defineProperty(exports, \"recommendedRules\", ({\n  enumerable: true,\n  get: function () {\n    return _specifiedRules.recommendedRules;\n  },\n}));\nObject.defineProperty(exports, \"specifiedRules\", ({\n  enumerable: true,\n  get: function () {\n    return _specifiedRules.specifiedRules;\n  },\n}));\nObject.defineProperty(exports, \"validate\", ({\n  enumerable: true,\n  get: function () {\n    return _validate.validate;\n  },\n}));\n\nvar _validate = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/graphql/validation/validate.js\");\n\nvar _ValidationContext = __webpack_require__(/*! ./ValidationContext.js */ \"(ssr)/./node_modules/graphql/validation/ValidationContext.js\");\n\nvar _specifiedRules = __webpack_require__(/*! ./specifiedRules.js */ \"(ssr)/./node_modules/graphql/validation/specifiedRules.js\");\n\nvar _ExecutableDefinitionsRule = __webpack_require__(/*! ./rules/ExecutableDefinitionsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js\");\n\nvar _FieldsOnCorrectTypeRule = __webpack_require__(/*! ./rules/FieldsOnCorrectTypeRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js\");\n\nvar _FragmentsOnCompositeTypesRule = __webpack_require__(/*! ./rules/FragmentsOnCompositeTypesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js\");\n\nvar _KnownArgumentNamesRule = __webpack_require__(/*! ./rules/KnownArgumentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownArgumentNamesRule.js\");\n\nvar _KnownDirectivesRule = __webpack_require__(/*! ./rules/KnownDirectivesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownDirectivesRule.js\");\n\nvar _KnownFragmentNamesRule = __webpack_require__(/*! ./rules/KnownFragmentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownFragmentNamesRule.js\");\n\nvar _KnownTypeNamesRule = __webpack_require__(/*! ./rules/KnownTypeNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownTypeNamesRule.js\");\n\nvar _LoneAnonymousOperationRule = __webpack_require__(/*! ./rules/LoneAnonymousOperationRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js\");\n\nvar _NoFragmentCyclesRule = __webpack_require__(/*! ./rules/NoFragmentCyclesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoFragmentCyclesRule.js\");\n\nvar _NoUndefinedVariablesRule = __webpack_require__(/*! ./rules/NoUndefinedVariablesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js\");\n\nvar _NoUnusedFragmentsRule = __webpack_require__(/*! ./rules/NoUnusedFragmentsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js\");\n\nvar _NoUnusedVariablesRule = __webpack_require__(/*! ./rules/NoUnusedVariablesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoUnusedVariablesRule.js\");\n\nvar _OverlappingFieldsCanBeMergedRule = __webpack_require__(/*! ./rules/OverlappingFieldsCanBeMergedRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js\");\n\nvar _PossibleFragmentSpreadsRule = __webpack_require__(/*! ./rules/PossibleFragmentSpreadsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js\");\n\nvar _ProvidedRequiredArgumentsRule = __webpack_require__(/*! ./rules/ProvidedRequiredArgumentsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js\");\n\nvar _ScalarLeafsRule = __webpack_require__(/*! ./rules/ScalarLeafsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ScalarLeafsRule.js\");\n\nvar _SingleFieldSubscriptionsRule = __webpack_require__(/*! ./rules/SingleFieldSubscriptionsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js\");\n\nvar _UniqueArgumentNamesRule = __webpack_require__(/*! ./rules/UniqueArgumentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js\");\n\nvar _UniqueDirectivesPerLocationRule = __webpack_require__(/*! ./rules/UniqueDirectivesPerLocationRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js\");\n\nvar _UniqueFragmentNamesRule = __webpack_require__(/*! ./rules/UniqueFragmentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js\");\n\nvar _UniqueInputFieldNamesRule = __webpack_require__(/*! ./rules/UniqueInputFieldNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js\");\n\nvar _UniqueOperationNamesRule = __webpack_require__(/*! ./rules/UniqueOperationNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueOperationNamesRule.js\");\n\nvar _UniqueVariableNamesRule = __webpack_require__(/*! ./rules/UniqueVariableNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueVariableNamesRule.js\");\n\nvar _ValuesOfCorrectTypeRule = __webpack_require__(/*! ./rules/ValuesOfCorrectTypeRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js\");\n\nvar _VariablesAreInputTypesRule = __webpack_require__(/*! ./rules/VariablesAreInputTypesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js\");\n\nvar _VariablesInAllowedPositionRule = __webpack_require__(/*! ./rules/VariablesInAllowedPositionRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js\");\n\nvar _MaxIntrospectionDepthRule = __webpack_require__(/*! ./rules/MaxIntrospectionDepthRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js\");\n\nvar _LoneSchemaDefinitionRule = __webpack_require__(/*! ./rules/LoneSchemaDefinitionRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js\");\n\nvar _UniqueOperationTypesRule = __webpack_require__(/*! ./rules/UniqueOperationTypesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueOperationTypesRule.js\");\n\nvar _UniqueTypeNamesRule = __webpack_require__(/*! ./rules/UniqueTypeNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueTypeNamesRule.js\");\n\nvar _UniqueEnumValueNamesRule = __webpack_require__(/*! ./rules/UniqueEnumValueNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js\");\n\nvar _UniqueFieldDefinitionNamesRule = __webpack_require__(/*! ./rules/UniqueFieldDefinitionNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js\");\n\nvar _UniqueArgumentDefinitionNamesRule = __webpack_require__(/*! ./rules/UniqueArgumentDefinitionNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js\");\n\nvar _UniqueDirectiveNamesRule = __webpack_require__(/*! ./rules/UniqueDirectiveNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js\");\n\nvar _PossibleTypeExtensionsRule = __webpack_require__(/*! ./rules/PossibleTypeExtensionsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js\");\n\nvar _NoDeprecatedCustomRule = __webpack_require__(/*! ./rules/custom/NoDeprecatedCustomRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js\");\n\nvar _NoSchemaIntrospectionCustomRule = __webpack_require__(/*! ./rules/custom/NoSchemaIntrospectionCustomRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js":
/*!****************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _predicates = __webpack_require__(/*! ../../language/predicates.js */ \"(ssr)/./node_modules/graphql/language/predicates.js\");\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nfunction ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {\n          const defName =\n            definition.kind === _kinds.Kind.SCHEMA_DEFINITION ||\n            definition.kind === _kinds.Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `The ${defName} definition is not executable.`,\n              {\n                nodes: definition,\n              },\n            ),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0V4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUNBQWlDOztBQUVqQyxvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpELGFBQWEsbUJBQU8sQ0FBQywrRUFBeUI7O0FBRTlDLGtCQUFrQixtQkFBTyxDQUFDLHlGQUE4Qjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLmpzPzNkYTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLkV4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUgPSBFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF9wcmVkaWNhdGVzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5qcycpO1xuXG4vKipcbiAqIEV4ZWN1dGFibGUgZGVmaW5pdGlvbnNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBmb3IgZXhlY3V0aW9uIGlmIGFsbCBkZWZpbml0aW9ucyBhcmUgZWl0aGVyXG4gKiBvcGVyYXRpb24gb3IgZnJhZ21lbnQgZGVmaW5pdGlvbnMuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUV4ZWN1dGFibGUtRGVmaW5pdGlvbnNcbiAqL1xuZnVuY3Rpb24gRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRG9jdW1lbnQobm9kZSkge1xuICAgICAgZm9yIChjb25zdCBkZWZpbml0aW9uIG9mIG5vZGUuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKCEoMCwgX3ByZWRpY2F0ZXMuaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUpKGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgY29uc3QgZGVmTmFtZSA9XG4gICAgICAgICAgICBkZWZpbml0aW9uLmtpbmQgPT09IF9raW5kcy5LaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8XG4gICAgICAgICAgICBkZWZpbml0aW9uLmtpbmQgPT09IF9raW5kcy5LaW5kLlNDSEVNQV9FWFRFTlNJT05cbiAgICAgICAgICAgICAgPyAnc2NoZW1hJ1xuICAgICAgICAgICAgICA6ICdcIicgKyBkZWZpbml0aW9uLm5hbWUudmFsdWUgKyAnXCInO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgIGBUaGUgJHtkZWZOYW1lfSBkZWZpbml0aW9uIGlzIG5vdCBleGVjdXRhYmxlLmAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2RlczogZGVmaW5pdGlvbixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;\n\nvar _didYouMean = __webpack_require__(/*! ../../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _naturalCompare = __webpack_require__(/*! ../../jsutils/naturalCompare.js */ \"(ssr)/./node_modules/graphql/jsutils/naturalCompare.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nfunction FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = (0, _didYouMean.didYouMean)(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = (0, _didYouMean.didYouMean)(\n              getSuggestedFieldNames(type, fieldName),\n            );\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!(0, _definition.isAbstractType)(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (\n        (0, _definition.isInterfaceType)(typeA) &&\n        schema.isSubType(typeA, typeB)\n      ) {\n        return -1;\n      }\n\n      if (\n        (0, _definition.isInterfaceType)(typeB) &&\n        schema.isSubType(typeB, typeA)\n      ) {\n        return 1;\n      }\n\n      return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (\n    (0, _definition.isObjectType)(type) ||\n    (0, _definition.isInterfaceType)(type)\n  ) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0ZpZWxkc09uQ29ycmVjdFR5cGVSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLCtCQUErQjs7QUFFL0Isa0JBQWtCLG1CQUFPLENBQUMsdUZBQTZCOztBQUV2RCxzQkFBc0IsbUJBQU8sQ0FBQywrRkFBaUM7O0FBRS9ELHNCQUFzQixtQkFBTyxDQUFDLCtGQUFpQzs7QUFFL0Qsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RCxrQkFBa0IsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBLHFDQUFxQyxVQUFVLGFBQWEsVUFBVTtBQUN0RTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUuanM/YmNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUgPSBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZTtcblxudmFyIF9kaWRZb3VNZWFuID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLmpzJyk7XG5cbnZhciBfbmF0dXJhbENvbXBhcmUgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL25hdHVyYWxDb21wYXJlLmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIEZpZWxkcyBvbiBjb3JyZWN0IHR5cGVcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBkZWZpbmVkIGJ5IHRoZVxuICogcGFyZW50IHR5cGUsIG9yIGFyZSBhbiBhbGxvd2VkIG1ldGEgZmllbGQgc3VjaCBhcyBfX3R5cGVuYW1lLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1GaWVsZC1TZWxlY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIEZpZWxkc09uQ29ycmVjdFR5cGVSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZChub2RlKSB7XG4gICAgICBjb25zdCB0eXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG5cbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuXG4gICAgICAgIGlmICghZmllbGREZWYpIHtcbiAgICAgICAgICAvLyBUaGlzIGZpZWxkIGRvZXNuJ3QgZXhpc3QsIGxldHMgbG9vayBmb3Igc3VnZ2VzdGlvbnMuXG4gICAgICAgICAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7IC8vIEZpcnN0IGRldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IHN1Z2dlc3RlZCB0eXBlcyB0byBjb25kaXRpb24gb24uXG5cbiAgICAgICAgICBsZXQgc3VnZ2VzdGlvbiA9ICgwLCBfZGlkWW91TWVhbi5kaWRZb3VNZWFuKShcbiAgICAgICAgICAgICd0byB1c2UgYW4gaW5saW5lIGZyYWdtZW50IG9uJyxcbiAgICAgICAgICAgIGdldFN1Z2dlc3RlZFR5cGVOYW1lcyhzY2hlbWEsIHR5cGUsIGZpZWxkTmFtZSksXG4gICAgICAgICAgKTsgLy8gSWYgdGhlcmUgYXJlIG5vIHN1Z2dlc3RlZCB0eXBlcywgdGhlbiBwZXJoYXBzIHRoaXMgd2FzIGEgdHlwbz9cblxuICAgICAgICAgIGlmIChzdWdnZXN0aW9uID09PSAnJykge1xuICAgICAgICAgICAgc3VnZ2VzdGlvbiA9ICgwLCBfZGlkWW91TWVhbi5kaWRZb3VNZWFuKShcbiAgICAgICAgICAgICAgZ2V0U3VnZ2VzdGVkRmllbGROYW1lcyh0eXBlLCBmaWVsZE5hbWUpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IC8vIFJlcG9ydCBhbiBlcnJvciwgaW5jbHVkaW5nIGhlbHBmdWwgc3VnZ2VzdGlvbnMuXG5cbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgQ2Fubm90IHF1ZXJ5IGZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgb24gdHlwZSBcIiR7dHlwZS5uYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb24sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4vKipcbiAqIEdvIHRocm91Z2ggYWxsIG9mIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdHlwZSwgYXMgd2VsbCBhcyB0aGUgaW50ZXJmYWNlcyB0aGF0XG4gKiB0aGV5IGltcGxlbWVudC4gSWYgYW55IG9mIHRob3NlIHR5cGVzIGluY2x1ZGUgdGhlIHByb3ZpZGVkIGZpZWxkLCBzdWdnZXN0IHRoZW0sXG4gKiBzb3J0ZWQgYnkgaG93IG9mdGVuIHRoZSB0eXBlIGlzIHJlZmVyZW5jZWQuXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzKHNjaGVtYSwgdHlwZSwgZmllbGROYW1lKSB7XG4gIGlmICghKDAsIF9kZWZpbml0aW9uLmlzQWJzdHJhY3RUeXBlKSh0eXBlKSkge1xuICAgIC8vIE11c3QgYmUgYW4gT2JqZWN0IHR5cGUsIHdoaWNoIGRvZXMgbm90IGhhdmUgcG9zc2libGUgZmllbGRzLlxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHN1Z2dlc3RlZFR5cGVzID0gbmV3IFNldCgpO1xuICBjb25zdCB1c2FnZUNvdW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IHBvc3NpYmxlVHlwZSBvZiBzY2hlbWEuZ2V0UG9zc2libGVUeXBlcyh0eXBlKSkge1xuICAgIGlmICghcG9zc2libGVUeXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gVGhpcyBvYmplY3QgdHlwZSBkZWZpbmVzIHRoaXMgZmllbGQuXG5cbiAgICBzdWdnZXN0ZWRUeXBlcy5hZGQocG9zc2libGVUeXBlKTtcbiAgICB1c2FnZUNvdW50W3Bvc3NpYmxlVHlwZS5uYW1lXSA9IDE7XG5cbiAgICBmb3IgKGNvbnN0IHBvc3NpYmxlSW50ZXJmYWNlIG9mIHBvc3NpYmxlVHlwZS5nZXRJbnRlcmZhY2VzKCkpIHtcbiAgICAgIHZhciBfdXNhZ2VDb3VudCRwb3NzaWJsZUk7XG5cbiAgICAgIGlmICghcG9zc2libGVJbnRlcmZhY2UuZ2V0RmllbGRzKClbZmllbGROYW1lXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gVGhpcyBpbnRlcmZhY2UgdHlwZSBkZWZpbmVzIHRoaXMgZmllbGQuXG5cbiAgICAgIHN1Z2dlc3RlZFR5cGVzLmFkZChwb3NzaWJsZUludGVyZmFjZSk7XG4gICAgICB1c2FnZUNvdW50W3Bvc3NpYmxlSW50ZXJmYWNlLm5hbWVdID1cbiAgICAgICAgKChfdXNhZ2VDb3VudCRwb3NzaWJsZUkgPSB1c2FnZUNvdW50W3Bvc3NpYmxlSW50ZXJmYWNlLm5hbWVdKSAhPT1cbiAgICAgICAgICBudWxsICYmIF91c2FnZUNvdW50JHBvc3NpYmxlSSAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfdXNhZ2VDb3VudCRwb3NzaWJsZUlcbiAgICAgICAgICA6IDApICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gWy4uLnN1Z2dlc3RlZFR5cGVzXVxuICAgIC5zb3J0KCh0eXBlQSwgdHlwZUIpID0+IHtcbiAgICAgIC8vIFN1Z2dlc3QgYm90aCBpbnRlcmZhY2UgYW5kIG9iamVjdCB0eXBlcyBiYXNlZCBvbiBob3cgY29tbW9uIHRoZXkgYXJlLlxuICAgICAgY29uc3QgdXNhZ2VDb3VudERpZmYgPSB1c2FnZUNvdW50W3R5cGVCLm5hbWVdIC0gdXNhZ2VDb3VudFt0eXBlQS5uYW1lXTtcblxuICAgICAgaWYgKHVzYWdlQ291bnREaWZmICE9PSAwKSB7XG4gICAgICAgIHJldHVybiB1c2FnZUNvdW50RGlmZjtcbiAgICAgIH0gLy8gU3VnZ2VzdCBzdXBlciB0eXBlcyBmaXJzdCBmb2xsb3dlZCBieSBzdWJ0eXBlc1xuXG4gICAgICBpZiAoXG4gICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGVBKSAmJlxuICAgICAgICBzY2hlbWEuaXNTdWJUeXBlKHR5cGVBLCB0eXBlQilcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzSW50ZXJmYWNlVHlwZSkodHlwZUIpICYmXG4gICAgICAgIHNjaGVtYS5pc1N1YlR5cGUodHlwZUIsIHR5cGVBKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF9uYXR1cmFsQ29tcGFyZS5uYXR1cmFsQ29tcGFyZSkodHlwZUEubmFtZSwgdHlwZUIubmFtZSk7XG4gICAgfSlcbiAgICAubWFwKCh4KSA9PiB4Lm5hbWUpO1xufVxuLyoqXG4gKiBGb3IgdGhlIGZpZWxkIG5hbWUgcHJvdmlkZWQsIGRldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IHNpbWlsYXIgZmllbGQgbmFtZXNcbiAqIHRoYXQgbWF5IGJlIHRoZSByZXN1bHQgb2YgYSB0eXBvLlxuICovXG5cbmZ1bmN0aW9uIGdldFN1Z2dlc3RlZEZpZWxkTmFtZXModHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChcbiAgICAoMCwgX2RlZmluaXRpb24uaXNPYmplY3RUeXBlKSh0eXBlKSB8fFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0ludGVyZmFjZVR5cGUpKHR5cGUpXG4gICkge1xuICAgIGNvbnN0IHBvc3NpYmxlRmllbGROYW1lcyA9IE9iamVjdC5rZXlzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgIHJldHVybiAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShmaWVsZE5hbWUsIHBvc3NpYmxlRmllbGROYW1lcyk7XG4gIH0gLy8gT3RoZXJ3aXNlLCBtdXN0IGJlIGEgVW5pb24gdHlwZSwgd2hpY2ggZG9lcyBub3QgZGVmaW5lIGZpZWxkcy5cblxuICByZXR1cm4gW107XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js":
/*!********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _printer = __webpack_require__(/*! ../../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nfunction FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = (0, _typeFromAST.typeFromAST)(\n          context.getSchema(),\n          typeCondition,\n        );\n\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          const typeStr = (0, _printer.print)(typeCondition);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(\n        context.getSchema(),\n        node.typeCondition,\n      );\n\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        const typeStr = (0, _printer.print)(node.typeCondition);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0ZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHFDQUFxQzs7QUFFckMsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RCxlQUFlLG1CQUFPLENBQUMsbUZBQTJCOztBQUVsRCxrQkFBa0IsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRXBELG1CQUFtQixtQkFBTyxDQUFDLDZGQUFnQzs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxRQUFRO0FBQzFFO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0JBQWdCLDRDQUE0QyxRQUFRO0FBQzdGO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUuanM/YWNlYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUgPSBGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9wcmludGVyID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxudmFyIF90eXBlRnJvbUFTVCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5qcycpO1xuXG4vKipcbiAqIEZyYWdtZW50cyBvbiBjb21wb3NpdGUgdHlwZVxuICpcbiAqIEZyYWdtZW50cyB1c2UgYSB0eXBlIGNvbmRpdGlvbiB0byBkZXRlcm1pbmUgaWYgdGhleSBhcHBseSwgc2luY2UgZnJhZ21lbnRzXG4gKiBjYW4gb25seSBiZSBzcHJlYWQgaW50byBhIGNvbXBvc2l0ZSB0eXBlIChvYmplY3QsIGludGVyZmFjZSwgb3IgdW5pb24pLCB0aGVcbiAqIHR5cGUgY29uZGl0aW9uIG11c3QgYWxzbyBiZSBhIGNvbXBvc2l0ZSB0eXBlLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1GcmFnbWVudHMtT24tQ29tcG9zaXRlLVR5cGVzXG4gKi9cbmZ1bmN0aW9uIEZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBJbmxpbmVGcmFnbWVudChub2RlKSB7XG4gICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID0gbm9kZS50eXBlQ29uZGl0aW9uO1xuXG4gICAgICBpZiAodHlwZUNvbmRpdGlvbikge1xuICAgICAgICBjb25zdCB0eXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgICAgICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICAgICAgICB0eXBlQ29uZGl0aW9uLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0eXBlICYmICEoMCwgX2RlZmluaXRpb24uaXNDb21wb3NpdGVUeXBlKSh0eXBlKSkge1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX3ByaW50ZXIucHJpbnQpKHR5cGVDb25kaXRpb24pO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgIGBGcmFnbWVudCBjYW5ub3QgY29uZGl0aW9uIG9uIG5vbiBjb21wb3NpdGUgdHlwZSBcIiR7dHlwZVN0cn1cIi5gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IHR5cGVDb25kaXRpb24sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSAoMCwgX3R5cGVGcm9tQVNULnR5cGVGcm9tQVNUKShcbiAgICAgICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICAgICAgbm9kZS50eXBlQ29uZGl0aW9uLFxuICAgICAgKTtcblxuICAgICAgaWYgKHR5cGUgJiYgISgwLCBfZGVmaW5pdGlvbi5pc0NvbXBvc2l0ZVR5cGUpKHR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX3ByaW50ZXIucHJpbnQpKG5vZGUudHlwZUNvbmRpdGlvbik7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZyYWdtZW50IFwiJHtub2RlLm5hbWUudmFsdWV9XCIgY2Fubm90IGNvbmRpdGlvbiBvbiBub24gY29tcG9zaXRlIHR5cGUgXCIke3R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUudHlwZUNvbmRpdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/KnownArgumentNamesRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/KnownArgumentNamesRule.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;\nexports.KnownArgumentNamesRule = KnownArgumentNamesRule;\n\nvar _didYouMean = __webpack_require__(/*! ../../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _directives = __webpack_require__(/*! ../../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nfunction KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = (0, _suggestionList.suggestionList)(\n          argName,\n          knownArgsNames,\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nfunction KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = (0, _suggestionList.suggestionList)(\n              argName,\n              knownArgs,\n            );\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  (0, _didYouMean.didYouMean)(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duQXJndW1lbnROYW1lc1J1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMENBQTBDO0FBQzFDLDhCQUE4Qjs7QUFFOUIsa0JBQWtCLG1CQUFPLENBQUMsdUZBQTZCOztBQUV2RCxzQkFBc0IsbUJBQU8sQ0FBQywrRkFBaUM7O0FBRS9ELG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQsYUFBYSxtQkFBTyxDQUFDLCtFQUF5Qjs7QUFFOUMsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsUUFBUSxjQUFjLGdCQUFnQixHQUFHLGNBQWM7QUFDeEY7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFFBQVEsbUJBQW1CLGNBQWM7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLmpzP2Q3OGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLktub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUgPSBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlO1xuZXhwb3J0cy5Lbm93bkFyZ3VtZW50TmFtZXNSdWxlID0gS25vd25Bcmd1bWVudE5hbWVzUnVsZTtcblxudmFyIF9kaWRZb3VNZWFuID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLmpzJyk7XG5cbnZhciBfc3VnZ2VzdGlvbkxpc3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi8uLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG52YXIgX2RpcmVjdGl2ZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlL2RpcmVjdGl2ZXMuanMnKTtcblxuLyoqXG4gKiBLbm93biBhcmd1bWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBmaWVsZCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzdXBwbGllZCBhcmd1bWVudHMgYXJlIGRlZmluZWQgYnlcbiAqIHRoYXQgZmllbGQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFyZ3VtZW50LU5hbWVzXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRGlyZWN0aXZlcy1BcmUtSW4tVmFsaWQtTG9jYXRpb25zXG4gKi9cbmZ1bmN0aW9uIEtub3duQXJndW1lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgLi4uS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSxcblxuICAgIEFyZ3VtZW50KGFyZ05vZGUpIHtcbiAgICAgIGNvbnN0IGFyZ0RlZiA9IGNvbnRleHQuZ2V0QXJndW1lbnQoKTtcbiAgICAgIGNvbnN0IGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuICAgICAgY29uc3QgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuXG4gICAgICBpZiAoIWFyZ0RlZiAmJiBmaWVsZERlZiAmJiBwYXJlbnRUeXBlKSB7XG4gICAgICAgIGNvbnN0IGFyZ05hbWUgPSBhcmdOb2RlLm5hbWUudmFsdWU7XG4gICAgICAgIGNvbnN0IGtub3duQXJnc05hbWVzID0gZmllbGREZWYuYXJncy5tYXAoKGFyZykgPT4gYXJnLm5hbWUpO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9ICgwLCBfc3VnZ2VzdGlvbkxpc3Quc3VnZ2VzdGlvbkxpc3QpKFxuICAgICAgICAgIGFyZ05hbWUsXG4gICAgICAgICAga25vd25BcmdzTmFtZXMsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFVua25vd24gYXJndW1lbnQgXCIke2FyZ05hbWV9XCIgb24gZmllbGQgXCIke3BhcmVudFR5cGUubmFtZX0uJHtmaWVsZERlZi5uYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAoMCwgX2RpZFlvdU1lYW4uZGlkWW91TWVhbikoc3VnZ2VzdGlvbnMpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogYXJnTm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3QgZGlyZWN0aXZlQXJncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGRlZmluZWREaXJlY3RpdmVzID0gc2NoZW1hXG4gICAgPyBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpXG4gICAgOiBfZGlyZWN0aXZlcy5zcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIGRlZmluZWREaXJlY3RpdmVzKSB7XG4gICAgZGlyZWN0aXZlQXJnc1tkaXJlY3RpdmUubmFtZV0gPSBkaXJlY3RpdmUuYXJncy5tYXAoKGFyZykgPT4gYXJnLm5hbWUpO1xuICB9XG5cbiAgY29uc3QgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgYXN0RGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoZGVmLmtpbmQgPT09IF9raW5kcy5LaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICB2YXIgX2RlZiRhcmd1bWVudHM7XG5cbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBhcmdzTm9kZXMgPVxuICAgICAgICAoX2RlZiRhcmd1bWVudHMgPSBkZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGVmJGFyZ3VtZW50cyAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBfZGVmJGFyZ3VtZW50c1xuICAgICAgICAgIDogW107XG4gICAgICBkaXJlY3RpdmVBcmdzW2RlZi5uYW1lLnZhbHVlXSA9IGFyZ3NOb2Rlcy5tYXAoKGFyZykgPT4gYXJnLm5hbWUudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlKGRpcmVjdGl2ZU5vZGUpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb2RlLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBrbm93bkFyZ3MgPSBkaXJlY3RpdmVBcmdzW2RpcmVjdGl2ZU5hbWVdO1xuXG4gICAgICBpZiAoZGlyZWN0aXZlTm9kZS5hcmd1bWVudHMgJiYga25vd25BcmdzKSB7XG4gICAgICAgIGZvciAoY29uc3QgYXJnTm9kZSBvZiBkaXJlY3RpdmVOb2RlLmFyZ3VtZW50cykge1xuICAgICAgICAgIGNvbnN0IGFyZ05hbWUgPSBhcmdOb2RlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoIWtub3duQXJncy5pbmNsdWRlcyhhcmdOYW1lKSkge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShcbiAgICAgICAgICAgICAgYXJnTmFtZSxcbiAgICAgICAgICAgICAga25vd25BcmdzLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5rbm93biBhcmd1bWVudCBcIiR7YXJnTmFtZX1cIiBvbiBkaXJlY3RpdmUgXCJAJHtkaXJlY3RpdmVOYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAgICAgKDAsIF9kaWRZb3VNZWFuLmRpZFlvdU1lYW4pKHN1Z2dlc3Rpb25zKSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogYXJnTm9kZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/KnownArgumentNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/KnownDirectivesRule.js":
/*!**********************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/KnownDirectivesRule.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.KnownDirectivesRule = KnownDirectivesRule;\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _ast = __webpack_require__(/*! ../../language/ast.js */ \"(ssr)/./node_modules/graphql/language/ast.js\");\n\nvar _directiveLocation = __webpack_require__(/*! ../../language/directiveLocation.js */ \"(ssr)/./node_modules/graphql/language/directiveLocation.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _directives = __webpack_require__(/*! ../../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nfunction KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || (0, _invariant.invariant)(false);\n\n  switch (appliedTo.kind) {\n    case _kinds.Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case _kinds.Kind.FIELD:\n      return _directiveLocation.DirectiveLocation.FIELD;\n\n    case _kinds.Kind.FRAGMENT_SPREAD:\n      return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;\n\n    case _kinds.Kind.INLINE_FRAGMENT:\n      return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;\n\n    case _kinds.Kind.FRAGMENT_DEFINITION:\n      return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case _kinds.Kind.VARIABLE_DEFINITION:\n      return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;\n\n    case _kinds.Kind.SCHEMA_DEFINITION:\n    case _kinds.Kind.SCHEMA_EXTENSION:\n      return _directiveLocation.DirectiveLocation.SCHEMA;\n\n    case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n    case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n      return _directiveLocation.DirectiveLocation.SCALAR;\n\n    case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n    case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      return _directiveLocation.DirectiveLocation.OBJECT;\n\n    case _kinds.Kind.FIELD_DEFINITION:\n      return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;\n\n    case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n      return _directiveLocation.DirectiveLocation.INTERFACE;\n\n    case _kinds.Kind.UNION_TYPE_DEFINITION:\n    case _kinds.Kind.UNION_TYPE_EXTENSION:\n      return _directiveLocation.DirectiveLocation.UNION;\n\n    case _kinds.Kind.ENUM_TYPE_DEFINITION:\n    case _kinds.Kind.ENUM_TYPE_EXTENSION:\n      return _directiveLocation.DirectiveLocation.ENUM;\n\n    case _kinds.Kind.ENUM_VALUE_DEFINITION:\n      return _directiveLocation.DirectiveLocation.ENUM_VALUE;\n\n    case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return _directiveLocation.DirectiveLocation.INPUT_OBJECT;\n\n    case _kinds.Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || (0, _invariant.invariant)(false);\n      return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION\n        : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n       false ||\n        (0, _invariant.invariant)(\n          false,\n          'Unexpected kind: ' + (0, _inspect.inspect)(appliedTo.kind),\n        );\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case _ast.OperationTypeNode.QUERY:\n      return _directiveLocation.DirectiveLocation.QUERY;\n\n    case _ast.OperationTypeNode.MUTATION:\n      return _directiveLocation.DirectiveLocation.MUTATION;\n\n    case _ast.OperationTypeNode.SUBSCRIPTION:\n      return _directiveLocation.DirectiveLocation.SUBSCRIPTION;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/KnownDirectivesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/KnownFragmentNamesRule.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/KnownFragmentNamesRule.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.KnownFragmentNamesRule = KnownFragmentNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nfunction KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown fragment \"${fragmentName}\".`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duRnJhZ21lbnROYW1lc1J1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsOEJBQThCOztBQUU5QixvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxhQUFhO0FBQzlDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvS25vd25GcmFnbWVudE5hbWVzUnVsZS5qcz9hNjNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5Lbm93bkZyYWdtZW50TmFtZXNSdWxlID0gS25vd25GcmFnbWVudE5hbWVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBLbm93biBmcmFnbWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBgLi4uRnJhZ21lbnRgIGZyYWdtZW50IHNwcmVhZHMgcmVmZXJcbiAqIHRvIGZyYWdtZW50cyBkZWZpbmVkIGluIHRoZSBzYW1lIGRvY3VtZW50LlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1GcmFnbWVudC1zcHJlYWQtdGFyZ2V0LWRlZmluZWRcbiAqL1xuZnVuY3Rpb24gS25vd25GcmFnbWVudE5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRnJhZ21lbnRTcHJlYWQobm9kZSkge1xuICAgICAgY29uc3QgZnJhZ21lbnROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgY29uc3QgZnJhZ21lbnQgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZSk7XG5cbiAgICAgIGlmICghZnJhZ21lbnQpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVW5rbm93biBmcmFnbWVudCBcIiR7ZnJhZ21lbnROYW1lfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLm5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/KnownFragmentNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/KnownTypeNamesRule.js":
/*!*********************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/KnownTypeNamesRule.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.KnownTypeNamesRule = KnownTypeNamesRule;\n\nvar _didYouMean = __webpack_require__(/*! ../../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _predicates = __webpack_require__(/*! ../../language/predicates.js */ \"(ssr)/./node_modules/graphql/language/predicates.js\");\n\nvar _introspection = __webpack_require__(/*! ../../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\nvar _scalars = __webpack_require__(/*! ../../type/scalars.js */ \"(ssr)/./node_modules/graphql/type/scalars.js\");\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nfunction KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = (0, _suggestionList.suggestionList)(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown type \"${typeName}\".` +\n              (0, _didYouMean.didYouMean)(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nconst standardTypeNames = [\n  ..._scalars.specifiedScalarTypes,\n  ..._introspection.introspectionTypes,\n].map((type) => type.name);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    ((0, _predicates.isTypeSystemDefinitionNode)(value) ||\n      (0, _predicates.isTypeSystemExtensionNode)(value))\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duVHlwZU5hbWVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiwwQkFBMEI7O0FBRTFCLGtCQUFrQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFdkQsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQWlDOztBQUUvRCxvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpELGtCQUFrQixtQkFBTyxDQUFDLHlGQUE4Qjs7QUFFeEQscUJBQXFCLG1CQUFPLENBQUMsdUZBQTZCOztBQUUxRCxlQUFlLG1CQUFPLENBQUMsMkVBQXVCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93blR5cGVOYW1lc1J1bGUuanM/NzZhNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuS25vd25UeXBlTmFtZXNSdWxlID0gS25vd25UeXBlTmFtZXNSdWxlO1xuXG52YXIgX2RpZFlvdU1lYW4gPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2RpZFlvdU1lYW4uanMnKTtcblxudmFyIF9zdWdnZXN0aW9uTGlzdCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9wcmVkaWNhdGVzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5qcycpO1xuXG52YXIgX2ludHJvc3BlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2ludHJvc3BlY3Rpb24uanMnKTtcblxudmFyIF9zY2FsYXJzID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9zY2FsYXJzLmpzJyk7XG5cbi8qKlxuICogS25vd24gdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHJlZmVyZW5jZWQgdHlwZXMgKHNwZWNpZmljYWxseVxuICogdmFyaWFibGUgZGVmaW5pdGlvbnMgYW5kIGZyYWdtZW50IGNvbmRpdGlvbnMpIGFyZSBkZWZpbmVkIGJ5IHRoZSB0eXBlIHNjaGVtYS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtU3ByZWFkLVR5cGUtRXhpc3RlbmNlXG4gKi9cbmZ1bmN0aW9uIEtub3duVHlwZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGV4aXN0aW5nVHlwZXNNYXAgPSBzY2hlbWEgPyBzY2hlbWEuZ2V0VHlwZU1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgZGVmaW5lZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGRlZiBvZiBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoKDAsIF9wcmVkaWNhdGVzLmlzVHlwZURlZmluaXRpb25Ob2RlKShkZWYpKSB7XG4gICAgICBkZWZpbmVkVHlwZXNbZGVmLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB0eXBlTmFtZXMgPSBbXG4gICAgLi4uT2JqZWN0LmtleXMoZXhpc3RpbmdUeXBlc01hcCksXG4gICAgLi4uT2JqZWN0LmtleXMoZGVmaW5lZFR5cGVzKSxcbiAgXTtcbiAgcmV0dXJuIHtcbiAgICBOYW1lZFR5cGUobm9kZSwgXzEsIHBhcmVudCwgXzIsIGFuY2VzdG9ycykge1xuICAgICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmICghZXhpc3RpbmdUeXBlc01hcFt0eXBlTmFtZV0gJiYgIWRlZmluZWRUeXBlc1t0eXBlTmFtZV0pIHtcbiAgICAgICAgdmFyIF9hbmNlc3RvcnMkO1xuXG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25Ob2RlID1cbiAgICAgICAgICAoX2FuY2VzdG9ycyQgPSBhbmNlc3RvcnNbMl0pICE9PSBudWxsICYmIF9hbmNlc3RvcnMkICE9PSB2b2lkIDBcbiAgICAgICAgICAgID8gX2FuY2VzdG9ycyRcbiAgICAgICAgICAgIDogcGFyZW50O1xuICAgICAgICBjb25zdCBpc1NETCA9IGRlZmluaXRpb25Ob2RlICE9IG51bGwgJiYgaXNTRExOb2RlKGRlZmluaXRpb25Ob2RlKTtcblxuICAgICAgICBpZiAoaXNTREwgJiYgc3RhbmRhcmRUeXBlTmFtZXMuaW5jbHVkZXModHlwZU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VnZ2VzdGVkVHlwZXMgPSAoMCwgX3N1Z2dlc3Rpb25MaXN0LnN1Z2dlc3Rpb25MaXN0KShcbiAgICAgICAgICB0eXBlTmFtZSxcbiAgICAgICAgICBpc1NETCA/IHN0YW5kYXJkVHlwZU5hbWVzLmNvbmNhdCh0eXBlTmFtZXMpIDogdHlwZU5hbWVzLFxuICAgICAgICApO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBVbmtub3duIHR5cGUgXCIke3R5cGVOYW1lfVwiLmAgK1xuICAgICAgICAgICAgICAoMCwgX2RpZFlvdU1lYW4uZGlkWW91TWVhbikoc3VnZ2VzdGVkVHlwZXMpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuXG5jb25zdCBzdGFuZGFyZFR5cGVOYW1lcyA9IFtcbiAgLi4uX3NjYWxhcnMuc3BlY2lmaWVkU2NhbGFyVHlwZXMsXG4gIC4uLl9pbnRyb3NwZWN0aW9uLmludHJvc3BlY3Rpb25UeXBlcyxcbl0ubWFwKCh0eXBlKSA9PiB0eXBlLm5hbWUpO1xuXG5mdW5jdGlvbiBpc1NETE5vZGUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICAna2luZCcgaW4gdmFsdWUgJiZcbiAgICAoKDAsIF9wcmVkaWNhdGVzLmlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlKSh2YWx1ZSkgfHxcbiAgICAgICgwLCBfcHJlZGljYXRlcy5pc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKSh2YWx1ZSkpXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/KnownTypeNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nfunction LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === _kinds.Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0xvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtDQUFrQzs7QUFFbEMsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RCxhQUFhLG1CQUFPLENBQUMsK0VBQXlCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0xvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLmpzPzRkYTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLkxvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlID0gTG9uZUFub255bW91c09wZXJhdGlvblJ1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi8uLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG4vKipcbiAqIExvbmUgYW5vbnltb3VzIG9wZXJhdGlvblxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHdoZW4gaXQgY29udGFpbnMgYW4gYW5vbnltb3VzIG9wZXJhdGlvblxuICogKHRoZSBxdWVyeSBzaG9ydC1oYW5kKSB0aGF0IGl0IGNvbnRhaW5zIG9ubHkgdGhhdCBvbmUgb3BlcmF0aW9uIGRlZmluaXRpb24uXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUxvbmUtQW5vbnltb3VzLU9wZXJhdGlvblxuICovXG5mdW5jdGlvbiBMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZShjb250ZXh0KSB7XG4gIGxldCBvcGVyYXRpb25Db3VudCA9IDA7XG4gIHJldHVybiB7XG4gICAgRG9jdW1lbnQobm9kZSkge1xuICAgICAgb3BlcmF0aW9uQ291bnQgPSBub2RlLmRlZmluaXRpb25zLmZpbHRlcihcbiAgICAgICAgKGRlZmluaXRpb24pID0+IGRlZmluaXRpb24ua2luZCA9PT0gX2tpbmRzLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICApLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUubmFtZSAmJiBvcGVyYXRpb25Db3VudCA+IDEpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAnVGhpcyBhbm9ueW1vdXMgb3BlcmF0aW9uIG11c3QgYmUgdGhlIG9ubHkgZGVmaW5lZCBvcGVyYXRpb24uJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js":
/*!***************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nfunction LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            'Must provide only one schema definition.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0xvbmVTY2hlbWFEZWZpbml0aW9uUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7O0FBRWhDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTG9uZVNjaGVtYURlZmluaXRpb25SdWxlLmpzPzFiMWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLkxvbmVTY2hlbWFEZWZpbml0aW9uUnVsZSA9IExvbmVTY2hlbWFEZWZpbml0aW9uUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBMb25lIFNjaGVtYSBkZWZpbml0aW9uXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgaXQgY29udGFpbnMgb25seSBvbmUgc2NoZW1hIGRlZmluaXRpb24uXG4gKi9cbmZ1bmN0aW9uIExvbmVTY2hlbWFEZWZpbml0aW9uUnVsZShjb250ZXh0KSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX29sZFNjaGVtYSRhc3ROb2RlO1xuXG4gIGNvbnN0IG9sZFNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGFscmVhZHlEZWZpbmVkID1cbiAgICAoX3JlZiA9XG4gICAgICAoX3JlZjIgPVxuICAgICAgICAoX29sZFNjaGVtYSRhc3ROb2RlID1cbiAgICAgICAgICBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICA6IG9sZFNjaGVtYS5hc3ROb2RlKSAhPT0gbnVsbCAmJiBfb2xkU2NoZW1hJGFzdE5vZGUgIT09IHZvaWQgMFxuICAgICAgICAgID8gX29sZFNjaGVtYSRhc3ROb2RlXG4gICAgICAgICAgOiBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgIDogb2xkU2NoZW1hLmdldFF1ZXJ5VHlwZSgpKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwXG4gICAgICAgID8gX3JlZjJcbiAgICAgICAgOiBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDBcbiAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgOiBvbGRTY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCkpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMFxuICAgICAgPyBfcmVmXG4gICAgICA6IG9sZFNjaGVtYSA9PT0gbnVsbCB8fCBvbGRTY2hlbWEgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogb2xkU2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgbGV0IHNjaGVtYURlZmluaXRpb25zQ291bnQgPSAwO1xuICByZXR1cm4ge1xuICAgIFNjaGVtYURlZmluaXRpb24obm9kZSkge1xuICAgICAgaWYgKGFscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ0Nhbm5vdCBkZWZpbmUgYSBuZXcgc2NoZW1hIHdpdGhpbiBhIHNjaGVtYSBleHRlbnNpb24uJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjaGVtYURlZmluaXRpb25zQ291bnQgPiAwKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ011c3QgcHJvdmlkZSBvbmx5IG9uZSBzY2hlbWEgZGVmaW5pdGlvbi4nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgKytzY2hlbWFEZWZpbml0aW9uc0NvdW50O1xuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js":
/*!****************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.MaxIntrospectionDepthRule = MaxIntrospectionDepthRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nconst MAX_LISTS_DEPTH = 3;\n\nfunction MaxIntrospectionDepthRule(context) {\n  /**\n   * Counts the depth of list fields in \"__Type\" recursively and\n   * returns `true` if the limit has been reached.\n   */\n  function checkDepth(node, visitedFragments = Object.create(null), depth = 0) {\n    if (node.kind === _kinds.Kind.FRAGMENT_SPREAD) {\n      const fragmentName = node.name.value;\n\n      if (visitedFragments[fragmentName] === true) {\n        // Fragment cycles are handled by `NoFragmentCyclesRule`.\n        return false;\n      }\n\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        // Missing fragments checks are handled by `KnownFragmentNamesRule`.\n        return false;\n      } // Rather than following an immutable programming pattern which has\n      // significant memory and garbage collection overhead, we've opted to\n      // take a mutable approach for efficiency's sake. Importantly visiting a\n      // fragment twice is fine, so long as you don't do one visit inside the\n      // other.\n\n      try {\n        visitedFragments[fragmentName] = true;\n        return checkDepth(fragment, visitedFragments, depth);\n      } finally {\n        visitedFragments[fragmentName] = undefined;\n      }\n    }\n\n    if (\n      node.kind === _kinds.Kind.FIELD && // check all introspection lists\n      (node.name.value === 'fields' ||\n        node.name.value === 'interfaces' ||\n        node.name.value === 'possibleTypes' ||\n        node.name.value === 'inputFields')\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      depth++;\n\n      if (depth >= MAX_LISTS_DEPTH) {\n        return true;\n      }\n    } // handles fields and inline fragments\n\n    if ('selectionSet' in node && node.selectionSet) {\n      for (const child of node.selectionSet.selections) {\n        if (checkDepth(child, visitedFragments, depth)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    Field(node) {\n      if (node.name.value === '__schema' || node.name.value === '__type') {\n        if (checkDepth(node)) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              'Maximum introspection depth exceeded',\n              {\n                nodes: [node],\n              },\n            ),\n          );\n          return false;\n        }\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL01heEludHJvc3BlY3Rpb25EZXB0aFJ1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUNBQWlDOztBQUVqQyxvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpELGFBQWEsbUJBQU8sQ0FBQywrRUFBeUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL01heEludHJvc3BlY3Rpb25EZXB0aFJ1bGUuanM/M2MxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTWF4SW50cm9zcGVjdGlvbkRlcHRoUnVsZSA9IE1heEludHJvc3BlY3Rpb25EZXB0aFJ1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfa2luZHMgPSByZXF1aXJlKCcuLi8uLi9sYW5ndWFnZS9raW5kcy5qcycpO1xuXG5jb25zdCBNQVhfTElTVFNfREVQVEggPSAzO1xuXG5mdW5jdGlvbiBNYXhJbnRyb3NwZWN0aW9uRGVwdGhSdWxlKGNvbnRleHQpIHtcbiAgLyoqXG4gICAqIENvdW50cyB0aGUgZGVwdGggb2YgbGlzdCBmaWVsZHMgaW4gXCJfX1R5cGVcIiByZWN1cnNpdmVseSBhbmRcbiAgICogcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjaGVja0RlcHRoKG5vZGUsIHZpc2l0ZWRGcmFnbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpLCBkZXB0aCA9IDApIHtcbiAgICBpZiAobm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GUkFHTUVOVF9TUFJFQUQpIHtcbiAgICAgIGNvbnN0IGZyYWdtZW50TmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKHZpc2l0ZWRGcmFnbWVudHNbZnJhZ21lbnROYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBGcmFnbWVudCBjeWNsZXMgYXJlIGhhbmRsZWQgYnkgYE5vRnJhZ21lbnRDeWNsZXNSdWxlYC5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmcmFnbWVudCA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lKTtcblxuICAgICAgaWYgKCFmcmFnbWVudCkge1xuICAgICAgICAvLyBNaXNzaW5nIGZyYWdtZW50cyBjaGVja3MgYXJlIGhhbmRsZWQgYnkgYEtub3duRnJhZ21lbnROYW1lc1J1bGVgLlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIFJhdGhlciB0aGFuIGZvbGxvd2luZyBhbiBpbW11dGFibGUgcHJvZ3JhbW1pbmcgcGF0dGVybiB3aGljaCBoYXNcbiAgICAgIC8vIHNpZ25pZmljYW50IG1lbW9yeSBhbmQgZ2FyYmFnZSBjb2xsZWN0aW9uIG92ZXJoZWFkLCB3ZSd2ZSBvcHRlZCB0b1xuICAgICAgLy8gdGFrZSBhIG11dGFibGUgYXBwcm9hY2ggZm9yIGVmZmljaWVuY3kncyBzYWtlLiBJbXBvcnRhbnRseSB2aXNpdGluZyBhXG4gICAgICAvLyBmcmFnbWVudCB0d2ljZSBpcyBmaW5lLCBzbyBsb25nIGFzIHlvdSBkb24ndCBkbyBvbmUgdmlzaXQgaW5zaWRlIHRoZVxuICAgICAgLy8gb3RoZXIuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZpc2l0ZWRGcmFnbWVudHNbZnJhZ21lbnROYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBjaGVja0RlcHRoKGZyYWdtZW50LCB2aXNpdGVkRnJhZ21lbnRzLCBkZXB0aCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB2aXNpdGVkRnJhZ21lbnRzW2ZyYWdtZW50TmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgbm9kZS5raW5kID09PSBfa2luZHMuS2luZC5GSUVMRCAmJiAvLyBjaGVjayBhbGwgaW50cm9zcGVjdGlvbiBsaXN0c1xuICAgICAgKG5vZGUubmFtZS52YWx1ZSA9PT0gJ2ZpZWxkcycgfHxcbiAgICAgICAgbm9kZS5uYW1lLnZhbHVlID09PSAnaW50ZXJmYWNlcycgfHxcbiAgICAgICAgbm9kZS5uYW1lLnZhbHVlID09PSAncG9zc2libGVUeXBlcycgfHxcbiAgICAgICAgbm9kZS5uYW1lLnZhbHVlID09PSAnaW5wdXRGaWVsZHMnKVxuICAgICkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBkZXB0aCsrO1xuXG4gICAgICBpZiAoZGVwdGggPj0gTUFYX0xJU1RTX0RFUFRIKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gaGFuZGxlcyBmaWVsZHMgYW5kIGlubGluZSBmcmFnbWVudHNcblxuICAgIGlmICgnc2VsZWN0aW9uU2V0JyBpbiBub2RlICYmIG5vZGUuc2VsZWN0aW9uU2V0KSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG5vZGUuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMpIHtcbiAgICAgICAgaWYgKGNoZWNrRGVwdGgoY2hpbGQsIHZpc2l0ZWRGcmFnbWVudHMsIGRlcHRoKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBGaWVsZChub2RlKSB7XG4gICAgICBpZiAobm9kZS5uYW1lLnZhbHVlID09PSAnX19zY2hlbWEnIHx8IG5vZGUubmFtZS52YWx1ZSA9PT0gJ19fdHlwZScpIHtcbiAgICAgICAgaWYgKGNoZWNrRGVwdGgobm9kZSkpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAnTWF4aW11bSBpbnRyb3NwZWN0aW9uIGRlcHRoIGV4Y2VlZGVkJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBbbm9kZV0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/NoFragmentCyclesRule.js":
/*!***********************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/NoFragmentCyclesRule.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.NoFragmentCyclesRule = NoFragmentCyclesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nfunction NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vRnJhZ21lbnRDeWNsZXNSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDRCQUE0Qjs7QUFFNUIsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1Qyx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxXQUFXO0FBQ2xELHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vRnJhZ21lbnRDeWNsZXNSdWxlLmpzPzQ1MTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLk5vRnJhZ21lbnRDeWNsZXNSdWxlID0gTm9GcmFnbWVudEN5Y2xlc1J1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogTm8gZnJhZ21lbnQgY3ljbGVzXG4gKlxuICogVGhlIGdyYXBoIG9mIGZyYWdtZW50IHNwcmVhZHMgbXVzdCBub3QgZm9ybSBhbnkgY3ljbGVzIGluY2x1ZGluZyBzcHJlYWRpbmcgaXRzZWxmLlxuICogT3RoZXJ3aXNlIGFuIG9wZXJhdGlvbiBjb3VsZCBpbmZpbml0ZWx5IHNwcmVhZCBvciBpbmZpbml0ZWx5IGV4ZWN1dGUgb24gY3ljbGVzIGluIHRoZSB1bmRlcmx5aW5nIGRhdGEuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50LXNwcmVhZHMtbXVzdC1ub3QtZm9ybS1jeWNsZXNcbiAqL1xuZnVuY3Rpb24gTm9GcmFnbWVudEN5Y2xlc1J1bGUoY29udGV4dCkge1xuICAvLyBUcmFja3MgYWxyZWFkeSB2aXNpdGVkIGZyYWdtZW50cyB0byBtYWludGFpbiBPKE4pIGFuZCB0byBlbnN1cmUgdGhhdCBjeWNsZXNcbiAgLy8gYXJlIG5vdCByZWR1bmRhbnRseSByZXBvcnRlZC5cbiAgY29uc3QgdmlzaXRlZEZyYWdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gQXJyYXkgb2YgQVNUIG5vZGVzIHVzZWQgdG8gcHJvZHVjZSBtZWFuaW5nZnVsIGVycm9yc1xuXG4gIGNvbnN0IHNwcmVhZFBhdGggPSBbXTsgLy8gUG9zaXRpb24gaW4gdGhlIHNwcmVhZCBwYXRoXG5cbiAgY29uc3Qgc3ByZWFkUGF0aEluZGV4QnlOYW1lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiAoKSA9PiBmYWxzZSxcblxuICAgIEZyYWdtZW50RGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShub2RlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9OyAvLyBUaGlzIGRvZXMgYSBzdHJhaWdodC1mb3J3YXJkIERGUyB0byBmaW5kIGN5Y2xlcy5cbiAgLy8gSXQgZG9lcyBub3QgdGVybWluYXRlIHdoZW4gYSBjeWNsZSB3YXMgZm91bmQgYnV0IGNvbnRpbnVlcyB0byBleHBsb3JlXG4gIC8vIHRoZSBncmFwaCB0byBmaW5kIGFsbCBwb3NzaWJsZSBjeWNsZXMuXG5cbiAgZnVuY3Rpb24gZGV0ZWN0Q3ljbGVSZWN1cnNpdmUoZnJhZ21lbnQpIHtcbiAgICBpZiAodmlzaXRlZEZyYWdzW2ZyYWdtZW50Lm5hbWUudmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZnJhZ21lbnROYW1lID0gZnJhZ21lbnQubmFtZS52YWx1ZTtcbiAgICB2aXNpdGVkRnJhZ3NbZnJhZ21lbnROYW1lXSA9IHRydWU7XG4gICAgY29uc3Qgc3ByZWFkTm9kZXMgPSBjb250ZXh0LmdldEZyYWdtZW50U3ByZWFkcyhmcmFnbWVudC5zZWxlY3Rpb25TZXQpO1xuXG4gICAgaWYgKHNwcmVhZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNwcmVhZFBhdGhJbmRleEJ5TmFtZVtmcmFnbWVudE5hbWVdID0gc3ByZWFkUGF0aC5sZW5ndGg7XG5cbiAgICBmb3IgKGNvbnN0IHNwcmVhZE5vZGUgb2Ygc3ByZWFkTm9kZXMpIHtcbiAgICAgIGNvbnN0IHNwcmVhZE5hbWUgPSBzcHJlYWROb2RlLm5hbWUudmFsdWU7XG4gICAgICBjb25zdCBjeWNsZUluZGV4ID0gc3ByZWFkUGF0aEluZGV4QnlOYW1lW3NwcmVhZE5hbWVdO1xuICAgICAgc3ByZWFkUGF0aC5wdXNoKHNwcmVhZE5vZGUpO1xuXG4gICAgICBpZiAoY3ljbGVJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHNwcmVhZEZyYWdtZW50ID0gY29udGV4dC5nZXRGcmFnbWVudChzcHJlYWROYW1lKTtcblxuICAgICAgICBpZiAoc3ByZWFkRnJhZ21lbnQpIHtcbiAgICAgICAgICBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShzcHJlYWRGcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGN5Y2xlUGF0aCA9IHNwcmVhZFBhdGguc2xpY2UoY3ljbGVJbmRleCk7XG4gICAgICAgIGNvbnN0IHZpYVBhdGggPSBjeWNsZVBhdGhcbiAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgLm1hcCgocykgPT4gJ1wiJyArIHMubmFtZS52YWx1ZSArICdcIicpXG4gICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYENhbm5vdCBzcHJlYWQgZnJhZ21lbnQgXCIke3NwcmVhZE5hbWV9XCIgd2l0aGluIGl0c2VsZmAgK1xuICAgICAgICAgICAgICAodmlhUGF0aCAhPT0gJycgPyBgIHZpYSAke3ZpYVBhdGh9LmAgOiAnLicpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogY3ljbGVQYXRoLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBzcHJlYWRQYXRoLnBvcCgpO1xuICAgIH1cblxuICAgIHNwcmVhZFBhdGhJbmRleEJ5TmFtZVtmcmFnbWVudE5hbWVdID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/NoFragmentCyclesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js":
/*!***************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nfunction NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW5kZWZpbmVkVmFyaWFibGVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7O0FBRWhDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQSxxQkFBcUIsT0FBTztBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxRQUFRLGlDQUFpQyxxQkFBcUI7QUFDaEcsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUuanM/MTVkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlID0gTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIE5vIHVuZGVmaW5lZCB2YXJpYWJsZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhcmlhYmxlcyBlbmNvdW50ZXJlZCwgYm90aCBkaXJlY3RseVxuICogYW5kIHZpYSBmcmFnbWVudCBzcHJlYWRzLCBhcmUgZGVmaW5lZCBieSB0aGF0IG9wZXJhdGlvbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtQWxsLVZhcmlhYmxlLVVzZXMtRGVmaW5lZFxuICovXG5mdW5jdGlvbiBOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUoY29udGV4dCkge1xuICBsZXQgdmFyaWFibGVOYW1lRGVmaW5lZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXIoKSB7XG4gICAgICAgIHZhcmlhYmxlTmFtZURlZmluZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHsgbm9kZSB9IG9mIHVzYWdlcykge1xuICAgICAgICAgIGNvbnN0IHZhck5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAodmFyaWFibGVOYW1lRGVmaW5lZFt2YXJOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbi5uYW1lXG4gICAgICAgICAgICAgICAgICA/IGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgaXMgbm90IGRlZmluZWQgYnkgb3BlcmF0aW9uIFwiJHtvcGVyYXRpb24ubmFtZS52YWx1ZX1cIi5gXG4gICAgICAgICAgICAgICAgICA6IGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgaXMgbm90IGRlZmluZWQuYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogW25vZGUsIG9wZXJhdGlvbl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICBWYXJpYWJsZURlZmluaXRpb24obm9kZSkge1xuICAgICAgdmFyaWFibGVOYW1lRGVmaW5lZFtub2RlLnZhcmlhYmxlLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js":
/*!************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nfunction NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Fragment \"${fragName}\" is never used.`,\n                {\n                  nodes: fragmentDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW51c2VkRnJhZ21lbnRzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw2QkFBNkI7O0FBRTdCLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9VbnVzZWRGcmFnbWVudHNSdWxlLmpzP2Y2NDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLk5vVW51c2VkRnJhZ21lbnRzUnVsZSA9IE5vVW51c2VkRnJhZ21lbnRzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBObyB1bnVzZWQgZnJhZ21lbnRzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGZyYWdtZW50IGRlZmluaXRpb25zIGFyZSBzcHJlYWRcbiAqIHdpdGhpbiBvcGVyYXRpb25zLCBvciBzcHJlYWQgd2l0aGluIG90aGVyIGZyYWdtZW50cyBzcHJlYWQgd2l0aGluIG9wZXJhdGlvbnMuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUZyYWdtZW50cy1NdXN0LUJlLVVzZWRcbiAqL1xuZnVuY3Rpb24gTm9VbnVzZWRGcmFnbWVudHNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qgb3BlcmF0aW9uRGVmcyA9IFtdO1xuICBjb25zdCBmcmFnbWVudERlZnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIG9wZXJhdGlvbkRlZnMucHVzaChub2RlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGZyYWdtZW50RGVmcy5wdXNoKG5vZGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBEb2N1bWVudDoge1xuICAgICAgbGVhdmUoKSB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50TmFtZVVzZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIG9wZXJhdGlvbkRlZnMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50IG9mIGNvbnRleHQuZ2V0UmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzKFxuICAgICAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIGZyYWdtZW50TmFtZVVzZWRbZnJhZ21lbnQubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgZnJhZ21lbnREZWYgb2YgZnJhZ21lbnREZWZzKSB7XG4gICAgICAgICAgY29uc3QgZnJhZ05hbWUgPSBmcmFnbWVudERlZi5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGZyYWdtZW50TmFtZVVzZWRbZnJhZ05hbWVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgYEZyYWdtZW50IFwiJHtmcmFnTmFtZX1cIiBpcyBuZXZlciB1c2VkLmAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IGZyYWdtZW50RGVmLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/NoUnusedVariablesRule.js":
/*!************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/NoUnusedVariablesRule.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.NoUnusedVariablesRule = NoUnusedVariablesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nfunction NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW51c2VkVmFyaWFibGVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRiw2QkFBNkI7O0FBRTdCLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxhQUFhLGdDQUFnQyxxQkFBcUI7QUFDcEcsa0NBQWtDLGFBQWE7QUFDL0M7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob1VudXNlZFZhcmlhYmxlc1J1bGUuanM/MjczZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9VbnVzZWRWYXJpYWJsZXNSdWxlID0gTm9VbnVzZWRWYXJpYWJsZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIE5vIHVudXNlZCB2YXJpYWJsZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhcmlhYmxlcyBkZWZpbmVkIGJ5IGFuIG9wZXJhdGlvblxuICogYXJlIHVzZWQsIGVpdGhlciBkaXJlY3RseSBvciB3aXRoaW4gYSBzcHJlYWQgZnJhZ21lbnQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFsbC1WYXJpYWJsZXMtVXNlZFxuICovXG5mdW5jdGlvbiBOb1VudXNlZFZhcmlhYmxlc1J1bGUoY29udGV4dCkge1xuICBsZXQgdmFyaWFibGVEZWZzID0gW107XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXIoKSB7XG4gICAgICAgIHZhcmlhYmxlRGVmcyA9IFtdO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlTmFtZVVzZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCB1c2FnZXMgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgICAgZm9yIChjb25zdCB7IG5vZGUgfSBvZiB1c2FnZXMpIHtcbiAgICAgICAgICB2YXJpYWJsZU5hbWVVc2VkW25vZGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZURlZiBvZiB2YXJpYWJsZURlZnMpIHtcbiAgICAgICAgICBjb25zdCB2YXJpYWJsZU5hbWUgPSB2YXJpYWJsZURlZi52YXJpYWJsZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZhcmlhYmxlTmFtZVVzZWRbdmFyaWFibGVOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbi5uYW1lXG4gICAgICAgICAgICAgICAgICA/IGBWYXJpYWJsZSBcIiQke3ZhcmlhYmxlTmFtZX1cIiBpcyBuZXZlciB1c2VkIGluIG9wZXJhdGlvbiBcIiR7b3BlcmF0aW9uLm5hbWUudmFsdWV9XCIuYFxuICAgICAgICAgICAgICAgICAgOiBgVmFyaWFibGUgXCIkJHt2YXJpYWJsZU5hbWV9XCIgaXMgbmV2ZXIgdXNlZC5gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5vZGVzOiB2YXJpYWJsZURlZixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbihkZWYpIHtcbiAgICAgIHZhcmlhYmxlRGVmcy5wdXNoKGRlZik7XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/NoUnusedVariablesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _sortValueNode = __webpack_require__(/*! ../../utilities/sortValueNode.js */ \"(ssr)/./node_modules/graphql/utilities/sortValueNode.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nfunction OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when fields and a fragment or two fragments are compared\n  // \"between\" each other for conflicts. Comparisons made be made many times,\n  // so memoizing this can dramatically improve the performance of this validator.\n  const comparedFieldsAndFragmentPairs = new OrderedPairSet();\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFieldsAndFragmentPairs,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  // Memoize so the fields and fragments are not compared for conflicts more\n  // than once.\n  if (\n    comparedFieldsAndFragmentPairs.has(\n      fieldMap,\n      fragmentName,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFieldsAndFragmentPairs.add(\n    fieldMap,\n    fragmentName,\n    areMutuallyExclusive,\n  );\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      (0, _definition.isObjectType)(parentType1) &&\n      (0, _definition.isObjectType)(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (!sameArguments(node1, node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${(0, _inspect.inspect)(\n          type1,\n        )}\" and \"${(0, _inspect.inspect)(type2)}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      (0, _definition.getNamedType)(type1),\n      selectionSet1,\n      (0, _definition.getNamedType)(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(node1, node2) {\n  const args1 = node1.arguments;\n  const args2 = node2.arguments;\n\n  if (args1 === undefined || args1.length === 0) {\n    return args2 === undefined || args2.length === 0;\n  }\n\n  if (args2 === undefined || args2.length === 0) {\n    return false;\n  }\n  /* c8 ignore next */\n\n  if (args1.length !== args2.length) {\n    /* c8 ignore next */\n    return false;\n    /* c8 ignore next */\n  }\n\n  const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));\n  return args1.every((arg1) => {\n    const value1 = arg1.value;\n    const value2 = values2.get(arg1.name.value);\n\n    if (value2 === undefined) {\n      return false;\n    }\n\n    return stringifyValue(value1) === stringifyValue(value2);\n  });\n}\n\nfunction stringifyValue(value) {\n  return (0, _printer.print)((0, _sortValueNode.sortValueNode)(value));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if ((0, _definition.isListType)(type1)) {\n    return (0, _definition.isListType)(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if ((0, _definition.isListType)(type2)) {\n    return true;\n  }\n\n  if ((0, _definition.isNonNullType)(type1)) {\n    return (0, _definition.isNonNullType)(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if ((0, _definition.isNonNullType)(type2)) {\n    return true;\n  }\n\n  if (\n    (0, _definition.isLeafType)(type1) ||\n    (0, _definition.isLeafType)(type2)\n  ) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = (0, _typeFromAST.typeFromAST)(\n    context.getSchema(),\n    fragment.typeCondition,\n  );\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (\n          (0, _definition.isObjectType)(parentType) ||\n          (0, _definition.isInterfaceType)(parentType)\n        ) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case _kinds.Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things where the ordering of the pair\n * matters.\n *\n * Provides a third argument for has/set to allow flagging the pair as\n * weakly or strongly present within the collection.\n */\n\nclass OrderedPairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, weaklyPresent) {\n    var _this$_data$get;\n\n    const result =\n      (_this$_data$get = this._data.get(a)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(b);\n\n    if (result === undefined) {\n      return false;\n    }\n\n    return weaklyPresent ? true : weaklyPresent === result;\n  }\n\n  add(a, b, weaklyPresent) {\n    const map = this._data.get(a);\n\n    if (map === undefined) {\n      this._data.set(a, new Map([[b, weaklyPresent]]));\n    } else {\n      map.set(b, weaklyPresent);\n    }\n  }\n}\n/**\n * A way to keep track of pairs of similar things when the ordering of the pair\n * does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._orderedPairSet = new OrderedPairSet();\n  }\n\n  has(a, b, weaklyPresent) {\n    return a < b\n      ? this._orderedPairSet.has(a, b, weaklyPresent)\n      : this._orderedPairSet.has(b, a, weaklyPresent);\n  }\n\n  add(a, b, weaklyPresent) {\n    if (a < b) {\n      this._orderedPairSet.add(a, b, weaklyPresent);\n    } else {\n      this._orderedPairSet.add(b, a, weaklyPresent);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js":
/*!******************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _typeComparators = __webpack_require__(/*! ../../utilities/typeComparators.js */ \"(ssr)/./node_modules/graphql/utilities/typeComparators.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nfunction PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        (0, _definition.isCompositeType)(fragType) &&\n        (0, _definition.isCompositeType)(parentType) &&\n        !(0, _typeComparators.doTypesOverlap)(\n          context.getSchema(),\n          fragType,\n          parentType,\n        )\n      ) {\n        const parentTypeStr = (0, _inspect.inspect)(parentType);\n        const fragTypeStr = (0, _inspect.inspect)(fragType);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !(0, _typeComparators.doTypesOverlap)(\n          context.getSchema(),\n          fragType,\n          parentType,\n        )\n      ) {\n        const parentTypeStr = (0, _inspect.inspect)(parentType);\n        const fragTypeStr = (0, _inspect.inspect)(fragType);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = (0, _typeFromAST.typeFromAST)(\n      context.getSchema(),\n      frag.typeCondition,\n    );\n\n    if ((0, _definition.isCompositeType)(type)) {\n      return type;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixtQ0FBbUM7O0FBRW5DLGVBQWUsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRWpELG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRCx1QkFBdUIsbUJBQU8sQ0FBQyxxR0FBb0M7O0FBRW5FLG1CQUFtQixtQkFBTyxDQUFDLDZGQUFnQzs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGNBQWMsMEJBQTBCLFlBQVk7QUFDdEg7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFNBQVMsOENBQThDLGNBQWMsMEJBQTBCLFlBQVk7QUFDcEk7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Qb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUuanM/Nzk2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlID0gUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfdHlwZUNvbXBhcmF0b3JzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5qcycpO1xuXG52YXIgX3R5cGVGcm9tQVNUID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULmpzJyk7XG5cbi8qKlxuICogUG9zc2libGUgZnJhZ21lbnQgc3ByZWFkXG4gKlxuICogQSBmcmFnbWVudCBzcHJlYWQgaXMgb25seSB2YWxpZCBpZiB0aGUgdHlwZSBjb25kaXRpb24gY291bGQgZXZlciBwb3NzaWJseVxuICogYmUgdHJ1ZTogaWYgdGhlcmUgaXMgYSBub24tZW1wdHkgaW50ZXJzZWN0aW9uIG9mIHRoZSBwb3NzaWJsZSBwYXJlbnQgdHlwZXMsXG4gKiBhbmQgcG9zc2libGUgdHlwZXMgd2hpY2ggcGFzcyB0aGUgdHlwZSBjb25kaXRpb24uXG4gKi9cbmZ1bmN0aW9uIFBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgSW5saW5lRnJhZ21lbnQobm9kZSkge1xuICAgICAgY29uc3QgZnJhZ1R5cGUgPSBjb250ZXh0LmdldFR5cGUoKTtcbiAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKFxuICAgICAgICAoMCwgX2RlZmluaXRpb24uaXNDb21wb3NpdGVUeXBlKShmcmFnVHlwZSkgJiZcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzQ29tcG9zaXRlVHlwZSkocGFyZW50VHlwZSkgJiZcbiAgICAgICAgISgwLCBfdHlwZUNvbXBhcmF0b3JzLmRvVHlwZXNPdmVybGFwKShcbiAgICAgICAgICBjb250ZXh0LmdldFNjaGVtYSgpLFxuICAgICAgICAgIGZyYWdUeXBlLFxuICAgICAgICAgIHBhcmVudFR5cGUsXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJlbnRUeXBlU3RyID0gKDAsIF9pbnNwZWN0Lmluc3BlY3QpKHBhcmVudFR5cGUpO1xuICAgICAgICBjb25zdCBmcmFnVHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KShmcmFnVHlwZSk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZyYWdtZW50IGNhbm5vdCBiZSBzcHJlYWQgaGVyZSBhcyBvYmplY3RzIG9mIHR5cGUgXCIke3BhcmVudFR5cGVTdHJ9XCIgY2FuIG5ldmVyIGJlIG9mIHR5cGUgXCIke2ZyYWdUeXBlU3RyfVwiLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBGcmFnbWVudFNwcmVhZChub2RlKSB7XG4gICAgICBjb25zdCBmcmFnTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGZyYWdUeXBlID0gZ2V0RnJhZ21lbnRUeXBlKGNvbnRleHQsIGZyYWdOYW1lKTtcbiAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKFxuICAgICAgICBmcmFnVHlwZSAmJlxuICAgICAgICBwYXJlbnRUeXBlICYmXG4gICAgICAgICEoMCwgX3R5cGVDb21wYXJhdG9ycy5kb1R5cGVzT3ZlcmxhcCkoXG4gICAgICAgICAgY29udGV4dC5nZXRTY2hlbWEoKSxcbiAgICAgICAgICBmcmFnVHlwZSxcbiAgICAgICAgICBwYXJlbnRUeXBlLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcGFyZW50VHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KShwYXJlbnRUeXBlKTtcbiAgICAgICAgY29uc3QgZnJhZ1R5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkoZnJhZ1R5cGUpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGcmFnbWVudCBcIiR7ZnJhZ05hbWV9XCIgY2Fubm90IGJlIHNwcmVhZCBoZXJlIGFzIG9iamVjdHMgb2YgdHlwZSBcIiR7cGFyZW50VHlwZVN0cn1cIiBjYW4gbmV2ZXIgYmUgb2YgdHlwZSBcIiR7ZnJhZ1R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRUeXBlKGNvbnRleHQsIG5hbWUpIHtcbiAgY29uc3QgZnJhZyA9IGNvbnRleHQuZ2V0RnJhZ21lbnQobmFtZSk7XG5cbiAgaWYgKGZyYWcpIHtcbiAgICBjb25zdCB0eXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoXG4gICAgICBjb250ZXh0LmdldFNjaGVtYSgpLFxuICAgICAgZnJhZy50eXBlQ29uZGl0aW9uLFxuICAgICk7XG5cbiAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzQ29tcG9zaXRlVHlwZSkodHlwZSkpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;\n\nvar _didYouMean = __webpack_require__(/*! ../../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _invariant = __webpack_require__(/*! ../../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _predicates = __webpack_require__(/*! ../../language/predicates.js */ \"(ssr)/./node_modules/graphql/language/predicates.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nfunction PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Cannot extend non-${kindStr} type \"${typeName}\".`,\n            {\n              nodes: defNode ? [defNode, node] : node,\n            },\n          ),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = (0, _suggestionList.suggestionList)(\n        typeName,\n        allTypeNames,\n      );\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            (0, _didYouMean.didYouMean)(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\n\nconst defKindToExtKind = {\n  [_kinds.Kind.SCALAR_TYPE_DEFINITION]: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n  [_kinds.Kind.OBJECT_TYPE_DEFINITION]: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n  [_kinds.Kind.INTERFACE_TYPE_DEFINITION]: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n  [_kinds.Kind.UNION_TYPE_DEFINITION]: _kinds.Kind.UNION_TYPE_EXTENSION,\n  [_kinds.Kind.ENUM_TYPE_DEFINITION]: _kinds.Kind.ENUM_TYPE_EXTENSION,\n  [_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]:\n    _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return _kinds.Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    return _kinds.Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isInterfaceType)(type)) {\n    return _kinds.Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isUnionType)(type)) {\n    return _kinds.Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    return _kinds.Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n   false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected type: ' + (0, _inspect.inspect)(type),\n    );\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case _kinds.Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case _kinds.Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n       false ||\n        (0, _invariant.invariant)(\n          false,\n          'Unexpected kind: ' + (0, _inspect.inspect)(kind),\n        );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js":
/*!********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.ProvidedRequiredArgumentsOnDirectivesRule =\n  ProvidedRequiredArgumentsOnDirectivesRule;\nexports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _keyMap = __webpack_require__(/*! ../../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _directives = __webpack_require__(/*! ../../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nfunction ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (\n            !providedArgs.has(argDef.name) &&\n            (0, _definition.isRequiredArgument)(argDef)\n          ) {\n            const argTypeStr = (0, _inspect.inspect)(argDef.type);\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nfunction ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = (0, _keyMap.keyMap)(\n      directive.args.filter(_definition.isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = (0, _keyMap.keyMap)(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = (0, _definition.isType)(argDef.type)\n                ? (0, _inspect.inspect)(argDef.type)\n                : (0, _printer.print)(argDef.type);\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return (\n    arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/ScalarLeafsRule.js":
/*!******************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/ScalarLeafsRule.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.ScalarLeafsRule = ScalarLeafsRule;\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nfunction ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = (0, _inspect.inspect)(type);\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = (0, _inspect.inspect)(type);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else if (selectionSet.selections.length === 0) {\n          const fieldName = node.name.value;\n          const typeStr = (0, _inspect.inspect)(type);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have at least one field selected.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1NjYWxhckxlYWZzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7O0FBRXZCLGVBQWUsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRWpELG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFVBQVUsMENBQTBDLFFBQVE7QUFDdEY7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVSxhQUFhLFFBQVEsc0RBQXNELGFBQWEsS0FBSztBQUMvSDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVSxhQUFhLFFBQVE7QUFDdkQ7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1NjYWxhckxlYWZzUnVsZS5qcz80ZGRkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5TY2FsYXJMZWFmc1J1bGUgPSBTY2FsYXJMZWFmc1J1bGU7XG5cbnZhciBfaW5zcGVjdCA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvaW5zcGVjdC5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxuLyoqXG4gKiBTY2FsYXIgbGVhZnNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgdmFsaWQgb25seSBpZiBhbGwgbGVhZiBmaWVsZHMgKGZpZWxkcyB3aXRob3V0XG4gKiBzdWIgc2VsZWN0aW9ucykgYXJlIG9mIHNjYWxhciBvciBlbnVtIHR5cGVzLlxuICovXG5mdW5jdGlvbiBTY2FsYXJMZWFmc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBjb250ZXh0LmdldFR5cGUoKTtcbiAgICAgIGNvbnN0IHNlbGVjdGlvblNldCA9IG5vZGUuc2VsZWN0aW9uU2V0O1xuXG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBpZiAoKDAsIF9kZWZpbml0aW9uLmlzTGVhZlR5cGUpKCgwLCBfZGVmaW5pdGlvbi5nZXROYW1lZFR5cGUpKHR5cGUpKSkge1xuICAgICAgICAgIGlmIChzZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSk7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgICAgYEZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgbXVzdCBub3QgaGF2ZSBhIHNlbGVjdGlvbiBzaW5jZSB0eXBlIFwiJHt0eXBlU3RyfVwiIGhhcyBubyBzdWJmaWVsZHMuYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2Rlczogc2VsZWN0aW9uU2V0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgY29uc3QgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSk7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYEZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgb2YgdHlwZSBcIiR7dHlwZVN0cn1cIiBtdXN0IGhhdmUgYSBzZWxlY3Rpb24gb2Ygc3ViZmllbGRzLiBEaWQgeW91IG1lYW4gXCIke2ZpZWxkTmFtZX0geyAuLi4gfVwiP2AsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICAgICAgY29uc3QgdHlwZVN0ciA9ICgwLCBfaW5zcGVjdC5pbnNwZWN0KSh0eXBlKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICBgRmllbGQgXCIke2ZpZWxkTmFtZX1cIiBvZiB0eXBlIFwiJHt0eXBlU3RyfVwiIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZmllbGQgc2VsZWN0ZWQuYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBub2RlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/ScalarLeafsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _collectFields = __webpack_require__(/*! ../../execution/collectFields.js */ \"(ssr)/./node_modules/graphql/execution/collectFields.js\");\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nfunction SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = (0, _collectFields.collectFields)(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1NpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0NBQW9DOztBQUVwQyxvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpELGFBQWEsbUJBQU8sQ0FBQywrRUFBeUI7O0FBRTlDLHFCQUFxQixtQkFBTyxDQUFDLGlHQUFrQzs7QUFFL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxjQUFjO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLmpzP2U3YmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlNpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUgPSBTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZSgnLi4vLi4vbGFuZ3VhZ2Uva2luZHMuanMnKTtcblxudmFyIF9jb2xsZWN0RmllbGRzID0gcmVxdWlyZSgnLi4vLi4vZXhlY3V0aW9uL2NvbGxlY3RGaWVsZHMuanMnKTtcblxuLyoqXG4gKiBTdWJzY3JpcHRpb25zIG11c3Qgb25seSBpbmNsdWRlIGEgbm9uLWludHJvc3BlY3Rpb24gZmllbGQuXG4gKlxuICogQSBHcmFwaFFMIHN1YnNjcmlwdGlvbiBpcyB2YWxpZCBvbmx5IGlmIGl0IGNvbnRhaW5zIGEgc2luZ2xlIHJvb3QgZmllbGQgYW5kXG4gKiB0aGF0IHJvb3QgZmllbGQgaXMgbm90IGFuIGludHJvc3BlY3Rpb24gZmllbGQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLVNpbmdsZS1yb290LWZpZWxkXG4gKi9cbmZ1bmN0aW9uIFNpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUub3BlcmF0aW9uID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25UeXBlID0gc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcblxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uVHlwZSkge1xuICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBub2RlLm5hbWUgPyBub2RlLm5hbWUudmFsdWUgOiBudWxsO1xuICAgICAgICAgIGNvbnN0IHZhcmlhYmxlVmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgICBjb25zdCBmcmFnbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgICAgZm9yIChjb25zdCBkZWZpbml0aW9uIG9mIGRvY3VtZW50LmRlZmluaXRpb25zKSB7XG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSBfa2luZHMuS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OKSB7XG4gICAgICAgICAgICAgIGZyYWdtZW50c1tkZWZpbml0aW9uLm5hbWUudmFsdWVdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBmaWVsZHMgPSAoMCwgX2NvbGxlY3RGaWVsZHMuY29sbGVjdEZpZWxkcykoXG4gICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICBmcmFnbWVudHMsXG4gICAgICAgICAgICB2YXJpYWJsZVZhbHVlcyxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvblR5cGUsXG4gICAgICAgICAgICBub2RlLnNlbGVjdGlvblNldCxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGZpZWxkcy5zaXplID4gMSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTZWxlY3Rpb25MaXN0cyA9IFsuLi5maWVsZHMudmFsdWVzKCldO1xuICAgICAgICAgICAgY29uc3QgZXh0cmFGaWVsZFNlbGVjdGlvbkxpc3RzID0gZmllbGRTZWxlY3Rpb25MaXN0cy5zbGljZSgxKTtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhRmllbGRTZWxlY3Rpb25zID0gZXh0cmFGaWVsZFNlbGVjdGlvbkxpc3RzLmZsYXQoKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25OYW1lICE9IG51bGxcbiAgICAgICAgICAgICAgICAgID8gYFN1YnNjcmlwdGlvbiBcIiR7b3BlcmF0aW9uTmFtZX1cIiBtdXN0IHNlbGVjdCBvbmx5IG9uZSB0b3AgbGV2ZWwgZmllbGQuYFxuICAgICAgICAgICAgICAgICAgOiAnQW5vbnltb3VzIFN1YnNjcmlwdGlvbiBtdXN0IHNlbGVjdCBvbmx5IG9uZSB0b3AgbGV2ZWwgZmllbGQuJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBub2RlczogZXh0cmFGaWVsZFNlbGVjdGlvbnMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChjb25zdCBmaWVsZE5vZGVzIG9mIGZpZWxkcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZE5vZGVzWzBdO1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gZmllbGQubmFtZS52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uTmFtZSAhPSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gYFN1YnNjcmlwdGlvbiBcIiR7b3BlcmF0aW9uTmFtZX1cIiBtdXN0IG5vdCBzZWxlY3QgYW4gaW50cm9zcGVjdGlvbiB0b3AgbGV2ZWwgZmllbGQuYFxuICAgICAgICAgICAgICAgICAgICA6ICdBbm9ueW1vdXMgU3Vic2NyaXB0aW9uIG11c3Qgbm90IHNlbGVjdCBhbiBpbnRyb3NwZWN0aW9uIHRvcCBsZXZlbCBmaWVsZC4nLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub2RlczogZmllbGROb2RlcyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js":
/*!************************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;\n\nvar _groupBy = __webpack_require__(/*! ../../jsutils/groupBy.js */ \"(ssr)/./node_modules/graphql/jsutils/groupBy.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nfunction UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix5Q0FBeUM7O0FBRXpDLGVBQWUsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRWpELG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHlCQUF5QjtBQUM3RCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwwQ0FBMEM7O0FBRTFDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw2Q0FBNkM7O0FBRTdDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUyxHQUFHLFVBQVU7QUFDbEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFdBQVcsR0FBRyxRQUFRO0FBQy9DO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUFyZ3VtZW50RGVmaW5pdGlvbk5hbWVzUnVsZS5qcz85MWMxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGUgPSBVbmlxdWVBcmd1bWVudERlZmluaXRpb25OYW1lc1J1bGU7XG5cbnZhciBfZ3JvdXBCeSA9IHJlcXVpcmUoJy4uLy4uL2pzdXRpbHMvZ3JvdXBCeS5qcycpO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBhcmd1bWVudCBkZWZpbml0aW9uIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIE9iamVjdCBvciBJbnRlcmZhY2UgdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgZmllbGRzIGhhdmUgdW5pcXVlbHkgbmFtZWQgYXJndW1lbnRzLlxuICogQSBHcmFwaFFMIERpcmVjdGl2ZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgYXJndW1lbnRzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlQXJndW1lbnREZWZpbml0aW9uTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmVEZWZpbml0aW9uKGRpcmVjdGl2ZU5vZGUpIHtcbiAgICAgIHZhciBfZGlyZWN0aXZlTm9kZSRhcmd1bWU7XG5cbiAgICAgIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBhcmd1bWVudE5vZGVzID1cbiAgICAgICAgKF9kaXJlY3RpdmVOb2RlJGFyZ3VtZSA9IGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJlxuICAgICAgICBfZGlyZWN0aXZlTm9kZSRhcmd1bWUgIT09IHZvaWQgMFxuICAgICAgICAgID8gX2RpcmVjdGl2ZU5vZGUkYXJndW1lXG4gICAgICAgICAgOiBbXTtcbiAgICAgIHJldHVybiBjaGVja0FyZ1VuaXF1ZW5lc3MoYEAke2RpcmVjdGl2ZU5vZGUubmFtZS52YWx1ZX1gLCBhcmd1bWVudE5vZGVzKTtcbiAgICB9LFxuXG4gICAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGNoZWNrQXJnVW5pcXVlbmVzc1BlckZpZWxkLFxuICAgIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGNoZWNrQXJnVW5pcXVlbmVzc1BlckZpZWxkLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCxcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0FyZ1VuaXF1ZW5lc3NQZXJGaWVsZCh0eXBlTm9kZSkge1xuICAgIHZhciBfdHlwZU5vZGUkZmllbGRzO1xuXG4gICAgY29uc3QgdHlwZU5hbWUgPSB0eXBlTm9kZS5uYW1lLnZhbHVlOyAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgIGNvbnN0IGZpZWxkTm9kZXMgPVxuICAgICAgKF90eXBlTm9kZSRmaWVsZHMgPSB0eXBlTm9kZS5maWVsZHMpICE9PSBudWxsICYmXG4gICAgICBfdHlwZU5vZGUkZmllbGRzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfdHlwZU5vZGUkZmllbGRzXG4gICAgICAgIDogW107XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkRGVmIG9mIGZpZWxkTm9kZXMpIHtcbiAgICAgIHZhciBfZmllbGREZWYkYXJndW1lbnRzO1xuXG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZERlZi5uYW1lLnZhbHVlOyAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgICBjb25zdCBhcmd1bWVudE5vZGVzID1cbiAgICAgICAgKF9maWVsZERlZiRhcmd1bWVudHMgPSBmaWVsZERlZi5hcmd1bWVudHMpICE9PSBudWxsICYmXG4gICAgICAgIF9maWVsZERlZiRhcmd1bWVudHMgIT09IHZvaWQgMFxuICAgICAgICAgID8gX2ZpZWxkRGVmJGFyZ3VtZW50c1xuICAgICAgICAgIDogW107XG4gICAgICBjaGVja0FyZ1VuaXF1ZW5lc3MoYCR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfWAsIGFyZ3VtZW50Tm9kZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQXJnVW5pcXVlbmVzcyhwYXJlbnROYW1lLCBhcmd1bWVudE5vZGVzKSB7XG4gICAgY29uc3Qgc2VlbkFyZ3MgPSAoMCwgX2dyb3VwQnkuZ3JvdXBCeSkoXG4gICAgICBhcmd1bWVudE5vZGVzLFxuICAgICAgKGFyZykgPT4gYXJnLm5hbWUudmFsdWUsXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgW2FyZ05hbWUsIGFyZ05vZGVzXSBvZiBzZWVuQXJncykge1xuICAgICAgaWYgKGFyZ05vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgQXJndW1lbnQgXCIke3BhcmVudE5hbWV9KCR7YXJnTmFtZX06KVwiIGNhbiBvbmx5IGJlIGRlZmluZWQgb25jZS5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogYXJnTm9kZXMubWFwKChub2RlKSA9PiBub2RlLm5hbWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;\n\nvar _groupBy = __webpack_require__(/*! ../../jsutils/groupBy.js */ \"(ssr)/./node_modules/graphql/jsutils/groupBy.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nfunction UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLCtCQUErQjs7QUFFL0IsZUFBZSxtQkFBTyxDQUFDLGlGQUEwQjs7QUFFakQsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFFBQVE7QUFDN0Q7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlQXJndW1lbnROYW1lc1J1bGUuanM/MTFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlQXJndW1lbnROYW1lc1J1bGUgPSBVbmlxdWVBcmd1bWVudE5hbWVzUnVsZTtcblxudmFyIF9ncm91cEJ5ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9ncm91cEJ5LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogVW5pcXVlIGFyZ3VtZW50IG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGZpZWxkIG9yIGRpcmVjdGl2ZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzdXBwbGllZCBhcmd1bWVudHMgYXJlXG4gKiB1bmlxdWVseSBuYW1lZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtQXJndW1lbnQtTmFtZXNcbiAqL1xuZnVuY3Rpb24gVW5pcXVlQXJndW1lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkOiBjaGVja0FyZ1VuaXF1ZW5lc3MsXG4gICAgRGlyZWN0aXZlOiBjaGVja0FyZ1VuaXF1ZW5lc3MsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tBcmdVbmlxdWVuZXNzKHBhcmVudE5vZGUpIHtcbiAgICB2YXIgX3BhcmVudE5vZGUkYXJndW1lbnRzO1xuXG4gICAgLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3QgYXJndW1lbnROb2RlcyA9XG4gICAgICAoX3BhcmVudE5vZGUkYXJndW1lbnRzID0gcGFyZW50Tm9kZS5hcmd1bWVudHMpICE9PSBudWxsICYmXG4gICAgICBfcGFyZW50Tm9kZSRhcmd1bWVudHMgIT09IHZvaWQgMFxuICAgICAgICA/IF9wYXJlbnROb2RlJGFyZ3VtZW50c1xuICAgICAgICA6IFtdO1xuICAgIGNvbnN0IHNlZW5BcmdzID0gKDAsIF9ncm91cEJ5Lmdyb3VwQnkpKFxuICAgICAgYXJndW1lbnROb2RlcyxcbiAgICAgIChhcmcpID0+IGFyZy5uYW1lLnZhbHVlLFxuICAgICk7XG5cbiAgICBmb3IgKGNvbnN0IFthcmdOYW1lLCBhcmdOb2Rlc10gb2Ygc2VlbkFyZ3MpIHtcbiAgICAgIGlmIChhcmdOb2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSBhcmd1bWVudCBuYW1lZCBcIiR7YXJnTmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogYXJnTm9kZXMubWFwKChub2RlKSA9PiBub2RlLm5hbWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js":
/*!***************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nfunction UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7O0FBRWhDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUuanM/MTczYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlID0gVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBkaXJlY3RpdmUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBkaXJlY3RpdmVzIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5mdW5jdGlvbiBVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBrbm93bkRpcmVjdGl2ZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChcbiAgICAgICAgc2NoZW1hICE9PSBudWxsICYmXG4gICAgICAgIHNjaGVtYSAhPT0gdm9pZCAwICYmXG4gICAgICAgIHNjaGVtYS5nZXREaXJlY3RpdmUoZGlyZWN0aXZlTmFtZSlcbiAgICAgICkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBEaXJlY3RpdmUgXCJAJHtkaXJlY3RpdmVOYW1lfVwiIGFscmVhZHkgZXhpc3RzIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBiZSByZWRlZmluZWQuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa25vd25EaXJlY3RpdmVOYW1lc1tkaXJlY3RpdmVOYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgZGlyZWN0aXZlIG5hbWVkIFwiQCR7ZGlyZWN0aXZlTmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2tub3duRGlyZWN0aXZlTmFtZXNbZGlyZWN0aXZlTmFtZV0sIG5vZGUubmFtZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrbm93bkRpcmVjdGl2ZU5hbWVzW2RpcmVjdGl2ZU5hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _predicates = __webpack_require__(/*! ../../language/predicates.js */ \"(ssr)/./node_modules/graphql/language/predicates.js\");\n\nvar _directives = __webpack_require__(/*! ../../type/directives.js */ \"(ssr)/./node_modules/graphql/type/directives.js\");\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nfunction UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === _kinds.Kind.SCHEMA_DEFINITION ||\n        node.kind === _kinds.Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (\n        (0, _predicates.isTypeDefinitionNode)(node) ||\n        (0, _predicates.isTypeExtensionNode)(node)\n      ) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsdUNBQXVDOztBQUV2QyxvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpELGFBQWEsbUJBQU8sQ0FBQywrRUFBeUI7O0FBRTlDLGtCQUFrQixtQkFBTyxDQUFDLHlGQUE4Qjs7QUFFeEQsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGNBQWM7QUFDakQ7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZS5qcz9lNTVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlID0gVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfcHJlZGljYXRlcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL3ByZWRpY2F0ZXMuanMnKTtcblxudmFyIF9kaXJlY3RpdmVzID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kaXJlY3RpdmVzLmpzJyk7XG5cbi8qKlxuICogVW5pcXVlIGRpcmVjdGl2ZSBuYW1lcyBwZXIgbG9jYXRpb25cbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgbm9uLXJlcGVhdGFibGUgZGlyZWN0aXZlcyBhdFxuICogYSBnaXZlbiBsb2NhdGlvbiBhcmUgdW5pcXVlbHkgbmFtZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLURpcmVjdGl2ZXMtQXJlLVVuaXF1ZS1QZXItTG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHVuaXF1ZURpcmVjdGl2ZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGRlZmluZWREaXJlY3RpdmVzID0gc2NoZW1hXG4gICAgPyBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpXG4gICAgOiBfZGlyZWN0aXZlcy5zcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIGRlZmluZWREaXJlY3RpdmVzKSB7XG4gICAgdW5pcXVlRGlyZWN0aXZlTWFwW2RpcmVjdGl2ZS5uYW1lXSA9ICFkaXJlY3RpdmUuaXNSZXBlYXRhYmxlO1xuICB9XG5cbiAgY29uc3QgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yIChjb25zdCBkZWYgb2YgYXN0RGVmaW5pdGlvbnMpIHtcbiAgICBpZiAoZGVmLmtpbmQgPT09IF9raW5kcy5LaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICB1bmlxdWVEaXJlY3RpdmVNYXBbZGVmLm5hbWUudmFsdWVdID0gIWRlZi5yZXBlYXRhYmxlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHNjaGVtYURpcmVjdGl2ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0eXBlRGlyZWN0aXZlc01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgLy8gTWFueSBkaWZmZXJlbnQgQVNUIG5vZGVzIG1heSBjb250YWluIGRpcmVjdGl2ZXMuIFJhdGhlciB0aGFuIGxpc3RpbmdcbiAgICAvLyB0aGVtIGFsbCwganVzdCBsaXN0ZW4gZm9yIGVudGVyaW5nIGFueSBub2RlLCBhbmQgY2hlY2sgdG8gc2VlIGlmIGl0XG4gICAgLy8gZGVmaW5lcyBhbnkgZGlyZWN0aXZlcy5cbiAgICBlbnRlcihub2RlKSB7XG4gICAgICBpZiAoISgnZGlyZWN0aXZlcycgaW4gbm9kZSkgfHwgIW5vZGUuZGlyZWN0aXZlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBzZWVuRGlyZWN0aXZlcztcblxuICAgICAgaWYgKFxuICAgICAgICBub2RlLmtpbmQgPT09IF9raW5kcy5LaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8XG4gICAgICAgIG5vZGUua2luZCA9PT0gX2tpbmRzLktpbmQuU0NIRU1BX0VYVEVOU0lPTlxuICAgICAgKSB7XG4gICAgICAgIHNlZW5EaXJlY3RpdmVzID0gc2NoZW1hRGlyZWN0aXZlcztcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICgwLCBfcHJlZGljYXRlcy5pc1R5cGVEZWZpbml0aW9uTm9kZSkobm9kZSkgfHxcbiAgICAgICAgKDAsIF9wcmVkaWNhdGVzLmlzVHlwZUV4dGVuc2lvbk5vZGUpKG5vZGUpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICAgIHNlZW5EaXJlY3RpdmVzID0gdHlwZURpcmVjdGl2ZXNNYXBbdHlwZU5hbWVdO1xuXG4gICAgICAgIGlmIChzZWVuRGlyZWN0aXZlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHlwZURpcmVjdGl2ZXNNYXBbdHlwZU5hbWVdID0gc2VlbkRpcmVjdGl2ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWVuRGlyZWN0aXZlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgZGlyZWN0aXZlIG9mIG5vZGUuZGlyZWN0aXZlcykge1xuICAgICAgICBjb25zdCBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgaWYgKHVuaXF1ZURpcmVjdGl2ZU1hcFtkaXJlY3RpdmVOYW1lXSkge1xuICAgICAgICAgIGlmIChzZWVuRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgZGlyZWN0aXZlIFwiQCR7ZGlyZWN0aXZlTmFtZX1cIiBjYW4gb25seSBiZSB1c2VkIG9uY2UgYXQgdGhpcyBsb2NhdGlvbi5gLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5vZGVzOiBbc2VlbkRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZV0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlZW5EaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js":
/*!***************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nfunction UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (\n        (0, _definition.isEnumType)(existingType) &&\n        existingType.getValue(valueName)\n      ) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7O0FBRWhDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNOztBQUVOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixTQUFTLEdBQUcsVUFBVTtBQUNqRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLDJCQUEyQixTQUFTLEdBQUcsVUFBVTtBQUNqRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUuanM/MWFjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlID0gVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG52YXIgX2RlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi90eXBlL2RlZmluaXRpb24uanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgZW51bSB2YWx1ZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBlbnVtIHR5cGUgaXMgb25seSB2YWxpZCBpZiBhbGwgaXRzIHZhbHVlcyBhcmUgdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIGNvbnN0IGV4aXN0aW5nVHlwZU1hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBrbm93blZhbHVlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIEVudW1UeXBlRGVmaW5pdGlvbjogY2hlY2tWYWx1ZVVuaXF1ZW5lc3MsXG4gICAgRW51bVR5cGVFeHRlbnNpb246IGNoZWNrVmFsdWVVbmlxdWVuZXNzLFxuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrVmFsdWVVbmlxdWVuZXNzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkdmFsdWVzO1xuXG4gICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAoIWtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV0pIHtcbiAgICAgIGtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH0gLy8gRklYTUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG5cbiAgICBjb25zdCB2YWx1ZU5vZGVzID1cbiAgICAgIChfbm9kZSR2YWx1ZXMgPSBub2RlLnZhbHVlcykgIT09IG51bGwgJiYgX25vZGUkdmFsdWVzICE9PSB2b2lkIDBcbiAgICAgICAgPyBfbm9kZSR2YWx1ZXNcbiAgICAgICAgOiBbXTtcbiAgICBjb25zdCB2YWx1ZU5hbWVzID0ga25vd25WYWx1ZU5hbWVzW3R5cGVOYW1lXTtcblxuICAgIGZvciAoY29uc3QgdmFsdWVEZWYgb2YgdmFsdWVOb2Rlcykge1xuICAgICAgY29uc3QgdmFsdWVOYW1lID0gdmFsdWVEZWYubmFtZS52YWx1ZTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVHlwZSA9IGV4aXN0aW5nVHlwZU1hcFt0eXBlTmFtZV07XG5cbiAgICAgIGlmIChcbiAgICAgICAgKDAsIF9kZWZpbml0aW9uLmlzRW51bVR5cGUpKGV4aXN0aW5nVHlwZSkgJiZcbiAgICAgICAgZXhpc3RpbmdUeXBlLmdldFZhbHVlKHZhbHVlTmFtZSlcbiAgICAgICkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBFbnVtIHZhbHVlIFwiJHt0eXBlTmFtZX0uJHt2YWx1ZU5hbWV9XCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGFsc28gYmUgZGVmaW5lZCBpbiB0aGlzIHR5cGUgZXh0ZW5zaW9uLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiB2YWx1ZURlZi5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZU5hbWVzW3ZhbHVlTmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgRW51bSB2YWx1ZSBcIiR7dHlwZU5hbWV9LiR7dmFsdWVOYW1lfVwiIGNhbiBvbmx5IGJlIGRlZmluZWQgb25jZS5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW3ZhbHVlTmFtZXNbdmFsdWVOYW1lXSwgdmFsdWVEZWYubmFtZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZU5hbWVzW3ZhbHVlTmFtZV0gPSB2YWx1ZURlZi5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nfunction UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (\n    (0, _definition.isObjectType)(type) ||\n    (0, _definition.isInterfaceType)(type) ||\n    (0, _definition.isInputObjectType)(type)\n  ) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixzQ0FBc0M7O0FBRXRDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07O0FBRU47O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTLEdBQUcsVUFBVTtBQUM1QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLHNCQUFzQixTQUFTLEdBQUcsVUFBVTtBQUM1QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLmpzPzM4NDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZSA9IFVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbi8qKlxuICogVW5pcXVlIGZpZWxkIGRlZmluaXRpb24gbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgY29tcGxleCB0eXBlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIGl0cyBmaWVsZHMgYXJlIHVuaXF1ZWx5IG5hbWVkLlxuICovXG5mdW5jdGlvbiBVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICBjb25zdCBleGlzdGluZ1R5cGVNYXAgPSBzY2hlbWEgPyBzY2hlbWEuZ2V0VHlwZU1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qga25vd25GaWVsZE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBPYmplY3RUeXBlRGVmaW5pdGlvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3MsXG4gICAgT2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3MsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tGaWVsZFVuaXF1ZW5lc3Mobm9kZSkge1xuICAgIHZhciBfbm9kZSRmaWVsZHM7XG5cbiAgICBjb25zdCB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgIGlmICgha25vd25GaWVsZE5hbWVzW3R5cGVOYW1lXSkge1xuICAgICAga25vd25GaWVsZE5hbWVzW3R5cGVOYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwM1xuXG4gICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgIGNvbnN0IGZpZWxkTm9kZXMgPVxuICAgICAgKF9ub2RlJGZpZWxkcyA9IG5vZGUuZmllbGRzKSAhPT0gbnVsbCAmJiBfbm9kZSRmaWVsZHMgIT09IHZvaWQgMFxuICAgICAgICA/IF9ub2RlJGZpZWxkc1xuICAgICAgICA6IFtdO1xuICAgIGNvbnN0IGZpZWxkTmFtZXMgPSBrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdO1xuXG4gICAgZm9yIChjb25zdCBmaWVsZERlZiBvZiBmaWVsZE5vZGVzKSB7XG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZERlZi5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoaGFzRmllbGQoZXhpc3RpbmdUeXBlTWFwW3R5cGVOYW1lXSwgZmllbGROYW1lKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBGaWVsZCBcIiR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfVwiIGFscmVhZHkgZXhpc3RzIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBhbHNvIGJlIGRlZmluZWQgaW4gdGhpcyB0eXBlIGV4dGVuc2lvbi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogZmllbGREZWYubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGROYW1lc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYEZpZWxkIFwiJHt0eXBlTmFtZX0uJHtmaWVsZE5hbWV9XCIgY2FuIG9ubHkgYmUgZGVmaW5lZCBvbmNlLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBbZmllbGROYW1lc1tmaWVsZE5hbWVdLCBmaWVsZERlZi5uYW1lXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkTmFtZXNbZmllbGROYW1lXSA9IGZpZWxkRGVmLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc0ZpZWxkKHR5cGUsIGZpZWxkTmFtZSkge1xuICBpZiAoXG4gICAgKDAsIF9kZWZpbml0aW9uLmlzT2JqZWN0VHlwZSkodHlwZSkgfHxcbiAgICAoMCwgX2RlZmluaXRpb24uaXNJbnRlcmZhY2VUeXBlKSh0eXBlKSB8fFxuICAgICgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkodHlwZSlcbiAgKSB7XG4gICAgcmV0dXJuIHR5cGUuZ2V0RmllbGRzKClbZmllbGROYW1lXSAhPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nfunction UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUZyYWdtZW50TmFtZXNSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLCtCQUErQjs7QUFFL0Isb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscURBQXFELGFBQWE7QUFDbEU7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVGcmFnbWVudE5hbWVzUnVsZS5qcz80MDVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVGcmFnbWVudE5hbWVzUnVsZSA9IFVuaXF1ZUZyYWdtZW50TmFtZXNSdWxlO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5qcycpO1xuXG4vKipcbiAqIFVuaXF1ZSBmcmFnbWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIGZyYWdtZW50cyBoYXZlIHVuaXF1ZSBuYW1lcy5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtRnJhZ21lbnQtTmFtZS1VbmlxdWVuZXNzXG4gKi9cbmZ1bmN0aW9uIFVuaXF1ZUZyYWdtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qga25vd25GcmFnbWVudE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiAoKSA9PiBmYWxzZSxcblxuICAgIEZyYWdtZW50RGVmaW5pdGlvbihub2RlKSB7XG4gICAgICBjb25zdCBmcmFnbWVudE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChrbm93bkZyYWdtZW50TmFtZXNbZnJhZ21lbnROYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgZnJhZ21lbnQgbmFtZWQgXCIke2ZyYWdtZW50TmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2tub3duRnJhZ21lbnROYW1lc1tmcmFnbWVudE5hbWVdLCBub2RlLm5hbWVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga25vd25GcmFnbWVudE5hbWVzW2ZyYWdtZW50TmFtZV0gPSBub2RlLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js":
/*!****************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;\n\nvar _invariant = __webpack_require__(/*! ../../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nfunction UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || (0, _invariant.invariant)(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUNBQWlDOztBQUVqQyxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBNEI7O0FBRXJELG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsVUFBVTtBQUNsRTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUuanM/YWRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZSA9IFVuaXF1ZUlucHV0RmllbGROYW1lc1J1bGU7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9pbnZhcmlhbnQuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgaW5wdXQgZmllbGQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgaW5wdXQgb2JqZWN0IHZhbHVlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHN1cHBsaWVkIGZpZWxkcyBhcmVcbiAqIHVuaXF1ZWx5IG5hbWVkLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1JbnB1dC1PYmplY3QtRmllbGQtVW5pcXVlbmVzc1xuICovXG5mdW5jdGlvbiBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qga25vd25OYW1lU3RhY2sgPSBbXTtcbiAgbGV0IGtub3duTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9iamVjdFZhbHVlOiB7XG4gICAgICBlbnRlcigpIHtcbiAgICAgICAga25vd25OYW1lU3RhY2sucHVzaChrbm93bk5hbWVzKTtcbiAgICAgICAga25vd25OYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9LFxuXG4gICAgICBsZWF2ZSgpIHtcbiAgICAgICAgY29uc3QgcHJldktub3duTmFtZXMgPSBrbm93bk5hbWVTdGFjay5wb3AoKTtcbiAgICAgICAgcHJldktub3duTmFtZXMgfHwgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShmYWxzZSk7XG4gICAgICAgIGtub3duTmFtZXMgPSBwcmV2S25vd25OYW1lcztcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIE9iamVjdEZpZWxkKG5vZGUpIHtcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKGtub3duTmFtZXNbZmllbGROYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgaW5wdXQgZmllbGQgbmFtZWQgXCIke2ZpZWxkTmFtZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2RlczogW2tub3duTmFtZXNbZmllbGROYW1lXSwgbm9kZS5uYW1lXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duTmFtZXNbZmllbGROYW1lXSA9IG5vZGUubmFtZTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueOperationNamesRule.js":
/*!***************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueOperationNamesRule.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueOperationNamesRule = UniqueOperationNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nfunction UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7O0FBRWhDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELG9CQUFvQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLmpzP2Q3ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZSA9IFVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgb3BlcmF0aW9uIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGRlZmluZWQgb3BlcmF0aW9ucyBoYXZlIHVuaXF1ZSBuYW1lcy5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtT3BlcmF0aW9uLU5hbWUtVW5pcXVlbmVzc1xuICovXG5mdW5jdGlvbiBVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUoY29udGV4dCkge1xuICBjb25zdCBrbm93bk9wZXJhdGlvbk5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBub2RlLm5hbWU7XG5cbiAgICAgIGlmIChvcGVyYXRpb25OYW1lKSB7XG4gICAgICAgIGlmIChrbm93bk9wZXJhdGlvbk5hbWVzW29wZXJhdGlvbk5hbWUudmFsdWVdKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSBvcGVyYXRpb24gbmFtZWQgXCIke29wZXJhdGlvbk5hbWUudmFsdWV9XCIuYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBbXG4gICAgICAgICAgICAgICAgICBrbm93bk9wZXJhdGlvbk5hbWVzW29wZXJhdGlvbk5hbWUudmFsdWVdLFxuICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0gPSBvcGVyYXRpb25OYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgRnJhZ21lbnREZWZpbml0aW9uOiAoKSA9PiBmYWxzZSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueOperationNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueOperationTypesRule.js":
/*!***************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueOperationTypesRule.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueOperationTypesRule = UniqueOperationTypesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nfunction UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7O0FBRWhDLG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EscUNBQXFDLFdBQVc7QUFDaEQ7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlLmpzP2YyMTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSA9IFVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgb3BlcmF0aW9uIHR5cGVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgaXQgaGFzIG9ubHkgb25lIHR5cGUgcGVyIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgY29uc3QgZGVmaW5lZE9wZXJhdGlvblR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgZXhpc3RpbmdPcGVyYXRpb25UeXBlcyA9IHNjaGVtYVxuICAgID8ge1xuICAgICAgICBxdWVyeTogc2NoZW1hLmdldFF1ZXJ5VHlwZSgpLFxuICAgICAgICBtdXRhdGlvbjogc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpLFxuICAgICAgICBzdWJzY3JpcHRpb246IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCksXG4gICAgICB9XG4gICAgOiB7fTtcbiAgcmV0dXJuIHtcbiAgICBTY2hlbWFEZWZpbml0aW9uOiBjaGVja09wZXJhdGlvblR5cGVzLFxuICAgIFNjaGVtYUV4dGVuc2lvbjogY2hlY2tPcGVyYXRpb25UeXBlcyxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja09wZXJhdGlvblR5cGVzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkb3BlcmF0aW9uVHlwZXM7XG5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDNcblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3Qgb3BlcmF0aW9uVHlwZXNOb2RlcyA9XG4gICAgICAoX25vZGUkb3BlcmF0aW9uVHlwZXMgPSBub2RlLm9wZXJhdGlvblR5cGVzKSAhPT0gbnVsbCAmJlxuICAgICAgX25vZGUkb3BlcmF0aW9uVHlwZXMgIT09IHZvaWQgMFxuICAgICAgICA/IF9ub2RlJG9wZXJhdGlvblR5cGVzXG4gICAgICAgIDogW107XG5cbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvblR5cGUgb2Ygb3BlcmF0aW9uVHlwZXNOb2Rlcykge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9uVHlwZS5vcGVyYXRpb247XG4gICAgICBjb25zdCBhbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUgPSBkZWZpbmVkT3BlcmF0aW9uVHlwZXNbb3BlcmF0aW9uXTtcblxuICAgICAgaWYgKGV4aXN0aW5nT3BlcmF0aW9uVHlwZXNbb3BlcmF0aW9uXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUeXBlIGZvciAke29wZXJhdGlvbn0gYWxyZWFkeSBkZWZpbmVkIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBiZSByZWRlZmluZWQuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG9wZXJhdGlvblR5cGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGFscmVhZHlEZWZpbmVkT3BlcmF0aW9uVHlwZSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgJHtvcGVyYXRpb259IHR5cGUgaW4gc2NoZW1hLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGVzOiBbYWxyZWFkeURlZmluZWRPcGVyYXRpb25UeXBlLCBvcGVyYXRpb25UeXBlXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZWRPcGVyYXRpb25UeXBlc1tvcGVyYXRpb25dID0gb3BlcmF0aW9uVHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueOperationTypesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueTypeNamesRule.js":
/*!**********************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueTypeNamesRule.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueTypeNamesRule = UniqueTypeNamesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nfunction UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `There can be only one type named \"${typeName}\".`,\n          {\n            nodes: [knownTypeNames[typeName], node.name],\n          },\n        ),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZVR5cGVOYW1lc1J1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkJBQTJCOztBQUUzQixvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBNkI7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsU0FBUztBQUN4RDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlVHlwZU5hbWVzUnVsZS5qcz9iZGUyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZSxcbn0pO1xuZXhwb3J0cy5VbmlxdWVUeXBlTmFtZXNSdWxlID0gVW5pcXVlVHlwZU5hbWVzUnVsZTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxuLyoqXG4gKiBVbmlxdWUgdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIHR5cGVzIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5mdW5jdGlvbiBVbmlxdWVUeXBlTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgY29uc3Qga25vd25UeXBlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICByZXR1cm4ge1xuICAgIFNjYWxhclR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIFVuaW9uVHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgRW51bVR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tUeXBlTmFtZShub2RlKSB7XG4gICAgY29uc3QgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAoc2NoZW1hICE9PSBudWxsICYmIHNjaGVtYSAhPT0gdm9pZCAwICYmIHNjaGVtYS5nZXRUeXBlKHR5cGVOYW1lKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgIGBUeXBlIFwiJHt0eXBlTmFtZX1cIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBkZWZpbml0aW9uLmAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbm9kZXM6IG5vZGUubmFtZSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa25vd25UeXBlTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgYFRoZXJlIGNhbiBiZSBvbmx5IG9uZSB0eXBlIG5hbWVkIFwiJHt0eXBlTmFtZX1cIi5gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5vZGVzOiBba25vd25UeXBlTmFtZXNbdHlwZU5hbWVdLCBub2RlLm5hbWVdLFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBrbm93blR5cGVOYW1lc1t0eXBlTmFtZV0gPSBub2RlLm5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueTypeNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/UniqueVariableNamesRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/UniqueVariableNamesRule.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.UniqueVariableNamesRule = UniqueVariableNamesRule;\n\nvar _groupBy = __webpack_require__(/*! ../../jsutils/groupBy.js */ \"(ssr)/./node_modules/graphql/jsutils/groupBy.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nfunction UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = (0, _groupBy.groupBy)(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLCtCQUErQjs7QUFFL0IsZUFBZSxtQkFBTyxDQUFDLGlGQUEwQjs7QUFFakQsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsYUFBYTtBQUNyRTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUuanM/YzVkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUgPSBVbmlxdWVWYXJpYWJsZU5hbWVzUnVsZTtcblxudmFyIF9ncm91cEJ5ID0gcmVxdWlyZSgnLi4vLi4vanN1dGlscy9ncm91cEJ5LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbi8qKlxuICogVW5pcXVlIHZhcmlhYmxlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgdmFyaWFibGVzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZnVuY3Rpb24gVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb24ob3BlcmF0aW9uTm9kZSkge1xuICAgICAgdmFyIF9vcGVyYXRpb25Ob2RlJHZhcmlhYjtcblxuICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCB2YXJpYWJsZURlZmluaXRpb25zID1cbiAgICAgICAgKF9vcGVyYXRpb25Ob2RlJHZhcmlhYiA9IG9wZXJhdGlvbk5vZGUudmFyaWFibGVEZWZpbml0aW9ucykgIT09IG51bGwgJiZcbiAgICAgICAgX29wZXJhdGlvbk5vZGUkdmFyaWFiICE9PSB2b2lkIDBcbiAgICAgICAgICA/IF9vcGVyYXRpb25Ob2RlJHZhcmlhYlxuICAgICAgICAgIDogW107XG4gICAgICBjb25zdCBzZWVuVmFyaWFibGVEZWZpbml0aW9ucyA9ICgwLCBfZ3JvdXBCeS5ncm91cEJ5KShcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9ucyxcbiAgICAgICAgKG5vZGUpID0+IG5vZGUudmFyaWFibGUubmFtZS52YWx1ZSxcbiAgICAgICk7XG5cbiAgICAgIGZvciAoY29uc3QgW3ZhcmlhYmxlTmFtZSwgdmFyaWFibGVOb2Rlc10gb2Ygc2VlblZhcmlhYmxlRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgaWYgKHZhcmlhYmxlTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICAgIGBUaGVyZSBjYW4gYmUgb25seSBvbmUgdmFyaWFibGUgbmFtZWQgXCIkJHt2YXJpYWJsZU5hbWV9XCIuYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vZGVzOiB2YXJpYWJsZU5vZGVzLm1hcCgobm9kZSkgPT4gbm9kZS52YXJpYWJsZS5uYW1lKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/UniqueVariableNamesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;\n\nvar _didYouMean = __webpack_require__(/*! ../../jsutils/didYouMean.js */ \"(ssr)/./node_modules/graphql/jsutils/didYouMean.js\");\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _keyMap = __webpack_require__(/*! ../../jsutils/keyMap.js */ \"(ssr)/./node_modules/graphql/jsutils/keyMap.js\");\n\nvar _suggestionList = __webpack_require__(/*! ../../jsutils/suggestionList.js */ \"(ssr)/./node_modules/graphql/jsutils/suggestionList.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _printer = __webpack_require__(/*! ../../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nfunction ValuesOfCorrectTypeRule(context) {\n  let variableDefinitions = {};\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefinitions = {};\n      },\n    },\n\n    VariableDefinition(definition) {\n      variableDefinitions[definition.variable.name.value] = definition;\n    },\n\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = (0, _definition.getNullableType)(\n        context.getParentInputType(),\n      );\n\n      if (!(0, _definition.isListType)(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = (0, _definition.getNamedType)(context.getInputType());\n\n      if (!(0, _definition.isInputObjectType)(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = (0, _keyMap.keyMap)(\n        node.fields,\n        (field) => field.name.value,\n      );\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {\n          const typeStr = (0, _inspect.inspect)(fieldDef.type);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n\n      if (type.isOneOf) {\n        validateOneOfInputObject(\n          context,\n          node,\n          type,\n          fieldNodeMap,\n          variableDefinitions,\n        );\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = (0, _definition.getNamedType)(\n        context.getParentInputType(),\n      );\n      const fieldType = context.getInputType();\n\n      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {\n        const suggestions = (0, _suggestionList.suggestionList)(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if ((0, _definition.isNonNullType)(type)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Expected value of type \"${(0, _inspect.inspect)(\n              type,\n            )}\", found ${(0, _printer.print)(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = (0, _definition.getNamedType)(locationType);\n\n  if (!(0, _definition.isLeafType)(type)) {\n    const typeStr = (0, _inspect.inspect)(locationType);\n    context.reportError(\n      new _GraphQLError.GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${(0, _printer.print)(\n          node,\n        )}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = (0, _inspect.inspect)(locationType);\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${(0, _printer.print)(\n            node,\n          )}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = (0, _inspect.inspect)(locationType);\n\n    if (error instanceof _GraphQLError.GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${(0, _printer.print)(\n            node,\n          )}; ` + error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n\nfunction validateOneOfInputObject(\n  context,\n  node,\n  type,\n  fieldNodeMap,\n  variableDefinitions,\n) {\n  var _fieldNodeMap$keys$;\n\n  const keys = Object.keys(fieldNodeMap);\n  const isNotExactlyOneField = keys.length !== 1;\n\n  if (isNotExactlyOneField) {\n    context.reportError(\n      new _GraphQLError.GraphQLError(\n        `OneOf Input Object \"${type.name}\" must specify exactly one key.`,\n        {\n          nodes: [node],\n        },\n      ),\n    );\n    return;\n  }\n\n  const value =\n    (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null ||\n    _fieldNodeMap$keys$ === void 0\n      ? void 0\n      : _fieldNodeMap$keys$.value;\n  const isNullLiteral = !value || value.kind === _kinds.Kind.NULL;\n  const isVariable =\n    (value === null || value === void 0 ? void 0 : value.kind) ===\n    _kinds.Kind.VARIABLE;\n\n  if (isNullLiteral) {\n    context.reportError(\n      new _GraphQLError.GraphQLError(\n        `Field \"${type.name}.${keys[0]}\" must be non-null.`,\n        {\n          nodes: [node],\n        },\n      ),\n    );\n    return;\n  }\n\n  if (isVariable) {\n    const variableName = value.name.value;\n    const definition = variableDefinitions[variableName];\n    const isNullableVariable =\n      definition.type.kind !== _kinds.Kind.NON_NULL_TYPE;\n\n    if (isNullableVariable) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Variable \"${variableName}\" must be non-nullable to be used for OneOf Input Object \"${type.name}\".`,\n          {\n            nodes: [node],\n          },\n        ),\n      );\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _printer = __webpack_require__(/*! ../../language/printer.js */ \"(ssr)/./node_modules/graphql/language/printer.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nfunction VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(\n        context.getSchema(),\n        node.type,\n      );\n\n      if (type !== undefined && !(0, _definition.isInputType)(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = (0, _printer.print)(node.type);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtDQUFrQzs7QUFFbEMsb0JBQW9CLG1CQUFPLENBQUMsdUZBQTZCOztBQUV6RCxlQUFlLG1CQUFPLENBQUMsbUZBQTJCOztBQUVsRCxrQkFBa0IsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRXBELG1CQUFtQixtQkFBTyxDQUFDLDZGQUFnQzs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYSw4QkFBOEIsU0FBUztBQUM5RTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlLmpzPzAxZWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLlZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlID0gVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfcHJpbnRlciA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL3ByaW50ZXIuanMnKTtcblxudmFyIF9kZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHlwZS9kZWZpbml0aW9uLmpzJyk7XG5cbnZhciBfdHlwZUZyb21BU1QgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QuanMnKTtcblxuLyoqXG4gKiBWYXJpYWJsZXMgYXJlIGlucHV0IHR5cGVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCB0aGUgdmFyaWFibGVzIGl0IGRlZmluZXMgYXJlIG9mXG4gKiBpbnB1dCB0eXBlcyAoc2NhbGFyLCBlbnVtLCBvciBpbnB1dCBvYmplY3QpLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1WYXJpYWJsZXMtQXJlLUlucHV0LVR5cGVzXG4gKi9cbmZ1bmN0aW9uIFZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBWYXJpYWJsZURlZmluaXRpb24obm9kZSkge1xuICAgICAgY29uc3QgdHlwZSA9ICgwLCBfdHlwZUZyb21BU1QudHlwZUZyb21BU1QpKFxuICAgICAgICBjb250ZXh0LmdldFNjaGVtYSgpLFxuICAgICAgICBub2RlLnR5cGUsXG4gICAgICApO1xuXG4gICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmICEoMCwgX2RlZmluaXRpb24uaXNJbnB1dFR5cGUpKHR5cGUpKSB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlTmFtZSA9IG5vZGUudmFyaWFibGUubmFtZS52YWx1ZTtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSAoMCwgX3ByaW50ZXIucHJpbnQpKG5vZGUudHlwZSk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyaWFibGVOYW1lfVwiIGNhbm5vdCBiZSBub24taW5wdXQgdHlwZSBcIiR7dHlwZU5hbWV9XCIuYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUudHlwZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;\n\nvar _inspect = __webpack_require__(/*! ../../jsutils/inspect.js */ \"(ssr)/./node_modules/graphql/jsutils/inspect.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _kinds = __webpack_require__(/*! ../../language/kinds.js */ \"(ssr)/./node_modules/graphql/language/kinds.js\");\n\nvar _definition = __webpack_require__(/*! ../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _typeComparators = __webpack_require__(/*! ../../utilities/typeComparators.js */ \"(ssr)/./node_modules/graphql/utilities/typeComparators.js\");\n\nvar _typeFromAST = __webpack_require__(/*! ../../utilities/typeFromAST.js */ \"(ssr)/./node_modules/graphql/utilities/typeFromAST.js\");\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nfunction VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue, parentType } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = (0, _inspect.inspect)(varType);\n              const typeStr = (0, _inspect.inspect)(type);\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n\n            if (\n              (0, _definition.isInputObjectType)(parentType) &&\n              parentType.isOneOf &&\n              (0, _definition.isNullableType)(varType)\n            ) {\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  `Variable \"$${varName}\" is of type \"${varType}\" but must be non-nullable to be used for OneOf Input Object \"${parentType}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (\n    (0, _definition.isNonNullType)(locationType) &&\n    !(0, _definition.isNonNullType)(varType)\n  ) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return (0, _typeComparators.isTypeSubTypeOf)(\n      schema,\n      varType,\n      nullableLocationType,\n    );\n  }\n\n  return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixzQ0FBc0M7O0FBRXRDLGVBQWUsbUJBQU8sQ0FBQyxpRkFBMEI7O0FBRWpELG9CQUFvQixtQkFBTyxDQUFDLHVGQUE2Qjs7QUFFekQsYUFBYSxtQkFBTyxDQUFDLCtFQUF5Qjs7QUFFOUMsa0JBQWtCLG1CQUFPLENBQUMsaUZBQTBCOztBQUVwRCx1QkFBdUIsbUJBQU8sQ0FBQyxxR0FBb0M7O0FBRW5FLG1CQUFtQixtQkFBTyxDQUFDLDZGQUFnQzs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUEscUJBQXFCLHVDQUF1QztBQUM1RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLGFBQWEsV0FBVyxxQ0FBcUMsUUFBUTtBQUM3RztBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLGdCQUFnQixRQUFRLGdFQUFnRSxXQUFXO0FBQzNJO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hc3Rlcm1pbmRzLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9WYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUuanM/YWQ2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlID0gVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlO1xuXG52YXIgX2luc3BlY3QgPSByZXF1aXJlKCcuLi8uLi9qc3V0aWxzL2luc3BlY3QuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF9raW5kcyA9IHJlcXVpcmUoJy4uLy4uL2xhbmd1YWdlL2tpbmRzLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX3R5cGVDb21wYXJhdG9ycyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMuanMnKTtcblxudmFyIF90eXBlRnJvbUFTVCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5qcycpO1xuXG4vKipcbiAqIFZhcmlhYmxlcyBpbiBhbGxvd2VkIHBvc2l0aW9uXG4gKlxuICogVmFyaWFibGUgdXNhZ2VzIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBhcmd1bWVudHMgdGhleSBhcmUgcGFzc2VkIHRvLlxuICpcbiAqIFNlZSBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGUtVXNhZ2VzLWFyZS1BbGxvd2VkXG4gKi9cbmZ1bmN0aW9uIFZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZShjb250ZXh0KSB7XG4gIGxldCB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICAgIGVudGVyKCkge1xuICAgICAgICB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfSxcblxuICAgICAgbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHsgbm9kZSwgdHlwZSwgZGVmYXVsdFZhbHVlLCBwYXJlbnRUeXBlIH0gb2YgdXNhZ2VzKSB7XG4gICAgICAgICAgY29uc3QgdmFyTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICBjb25zdCB2YXJEZWYgPSB2YXJEZWZNYXBbdmFyTmFtZV07XG5cbiAgICAgICAgICBpZiAodmFyRGVmICYmIHR5cGUpIHtcbiAgICAgICAgICAgIC8vIEEgdmFyIHR5cGUgaXMgYWxsb3dlZCBpZiBpdCBpcyB0aGUgc2FtZSBvciBtb3JlIHN0cmljdCAoZS5nLiBpc1xuICAgICAgICAgICAgLy8gYSBzdWJ0eXBlIG9mKSB0aGFuIHRoZSBleHBlY3RlZCB0eXBlLiBJdCBjYW4gYmUgbW9yZSBzdHJpY3QgaWZcbiAgICAgICAgICAgIC8vIHRoZSB2YXJpYWJsZSB0eXBlIGlzIG5vbi1udWxsIHdoZW4gdGhlIGV4cGVjdGVkIHR5cGUgaXMgbnVsbGFibGUuXG4gICAgICAgICAgICAvLyBJZiBib3RoIGFyZSBsaXN0IHR5cGVzLCB0aGUgdmFyaWFibGUgaXRlbSB0eXBlIGNhbiBiZSBtb3JlIHN0cmljdFxuICAgICAgICAgICAgLy8gdGhhbiB0aGUgZXhwZWN0ZWQgaXRlbSB0eXBlIChjb250cmF2YXJpYW50KS5cbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgICBjb25zdCB2YXJUeXBlID0gKDAsIF90eXBlRnJvbUFTVC50eXBlRnJvbUFTVCkoc2NoZW1hLCB2YXJEZWYudHlwZSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdmFyVHlwZSAmJlxuICAgICAgICAgICAgICAhYWxsb3dlZFZhcmlhYmxlVXNhZ2UoXG4gICAgICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgICAgIHZhclR5cGUsXG4gICAgICAgICAgICAgICAgdmFyRGVmLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodmFyVHlwZSk7XG4gICAgICAgICAgICAgIGNvbnN0IHR5cGVTdHIgPSAoMCwgX2luc3BlY3QuaW5zcGVjdCkodHlwZSk7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXG4gICAgICAgICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgICAgICAgYFZhcmlhYmxlIFwiJCR7dmFyTmFtZX1cIiBvZiB0eXBlIFwiJHt2YXJUeXBlU3RyfVwiIHVzZWQgaW4gcG9zaXRpb24gZXhwZWN0aW5nIHR5cGUgXCIke3R5cGVTdHJ9XCIuYCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IFt2YXJEZWYsIG5vZGVdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc0lucHV0T2JqZWN0VHlwZSkocGFyZW50VHlwZSkgJiZcbiAgICAgICAgICAgICAgcGFyZW50VHlwZS5pc09uZU9mICYmXG4gICAgICAgICAgICAgICgwLCBfZGVmaW5pdGlvbi5pc051bGxhYmxlVHlwZSkodmFyVHlwZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgICAgIGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgaXMgb2YgdHlwZSBcIiR7dmFyVHlwZX1cIiBidXQgbXVzdCBiZSBub24tbnVsbGFibGUgdG8gYmUgdXNlZCBmb3IgT25lT2YgSW5wdXQgT2JqZWN0IFwiJHtwYXJlbnRUeXBlfVwiLmAsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzOiBbdmFyRGVmLCBub2RlXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXJEZWZNYXBbbm9kZS52YXJpYWJsZS5uYW1lLnZhbHVlXSA9IG5vZGU7XG4gICAgfSxcbiAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB2YXJpYWJsZSBpcyBhbGxvd2VkIGluIHRoZSBsb2NhdGlvbiBpdCB3YXMgZm91bmQsXG4gKiB3aGljaCBpbmNsdWRlcyBjb25zaWRlcmluZyBpZiBkZWZhdWx0IHZhbHVlcyBleGlzdCBmb3IgZWl0aGVyIHRoZSB2YXJpYWJsZVxuICogb3IgdGhlIGxvY2F0aW9uIGF0IHdoaWNoIGl0IGlzIGxvY2F0ZWQuXG4gKi9cblxuZnVuY3Rpb24gYWxsb3dlZFZhcmlhYmxlVXNhZ2UoXG4gIHNjaGVtYSxcbiAgdmFyVHlwZSxcbiAgdmFyRGVmYXVsdFZhbHVlLFxuICBsb2NhdGlvblR5cGUsXG4gIGxvY2F0aW9uRGVmYXVsdFZhbHVlLFxuKSB7XG4gIGlmIChcbiAgICAoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkobG9jYXRpb25UeXBlKSAmJlxuICAgICEoMCwgX2RlZmluaXRpb24uaXNOb25OdWxsVHlwZSkodmFyVHlwZSlcbiAgKSB7XG4gICAgY29uc3QgaGFzTm9uTnVsbFZhcmlhYmxlRGVmYXVsdFZhbHVlID1cbiAgICAgIHZhckRlZmF1bHRWYWx1ZSAhPSBudWxsICYmIHZhckRlZmF1bHRWYWx1ZS5raW5kICE9PSBfa2luZHMuS2luZC5OVUxMO1xuICAgIGNvbnN0IGhhc0xvY2F0aW9uRGVmYXVsdFZhbHVlID0gbG9jYXRpb25EZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmICghaGFzTm9uTnVsbFZhcmlhYmxlRGVmYXVsdFZhbHVlICYmICFoYXNMb2NhdGlvbkRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IG51bGxhYmxlTG9jYXRpb25UeXBlID0gbG9jYXRpb25UeXBlLm9mVHlwZTtcbiAgICByZXR1cm4gKDAsIF90eXBlQ29tcGFyYXRvcnMuaXNUeXBlU3ViVHlwZU9mKShcbiAgICAgIHNjaGVtYSxcbiAgICAgIHZhclR5cGUsXG4gICAgICBudWxsYWJsZUxvY2F0aW9uVHlwZSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfdHlwZUNvbXBhcmF0b3JzLmlzVHlwZVN1YlR5cGVPZikoc2NoZW1hLCB2YXJUeXBlLCBsb2NhdGlvblR5cGUpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js":
/*!********************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;\n\nvar _invariant = __webpack_require__(/*! ../../../jsutils/invariant.js */ \"(ssr)/./node_modules/graphql/jsutils/invariant.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nfunction NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || (0, _invariant.invariant)(false);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) ||\n            (0, _invariant.invariant)(false);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = (0, _definition.getNamedType)(\n        context.getParentInputType(),\n      );\n\n      if ((0, _definition.isInputObjectType)(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = (0, _definition.getNamedType)(\n          context.getInputType(),\n        );\n        enumTypeDef != null || (0, _invariant.invariant)(false);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL2N1c3RvbS9Ob0RlcHJlY2F0ZWRDdXN0b21SdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDhCQUE4Qjs7QUFFOUIsaUJBQWlCLG1CQUFPLENBQUMsd0ZBQStCOztBQUV4RCxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBZ0M7O0FBRTVELGtCQUFrQixtQkFBTyxDQUFDLG9GQUE2Qjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0JBQWdCLEdBQUcsZUFBZSxpQkFBaUIsa0JBQWtCO0FBQzlGO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0JBQWtCLGNBQWMsWUFBWSxtQkFBbUIsa0JBQWtCO0FBQzlHO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCLEdBQUcsY0FBYyxjQUFjLFlBQVksbUJBQW1CLGtCQUFrQjtBQUN4SDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG9CQUFvQixHQUFHLG9CQUFvQixpQkFBaUIsa0JBQWtCO0FBQy9HO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUIsR0FBRyxrQkFBa0IsbUJBQW1CLGtCQUFrQjtBQUMxRztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL2N1c3RvbS9Ob0RlcHJlY2F0ZWRDdXN0b21SdWxlLmpzPzc5MzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLk5vRGVwcmVjYXRlZEN1c3RvbVJ1bGUgPSBOb0RlcHJlY2F0ZWRDdXN0b21SdWxlO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJy4uLy4uLy4uL2pzdXRpbHMvaW52YXJpYW50LmpzJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG4vKipcbiAqIE5vIGRlcHJlY2F0ZWRcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgc2VsZWN0ZWQgZmllbGRzIGFuZCBhbGwgdXNlZCBlbnVtIHZhbHVlcyBoYXZlIG5vdCBiZWVuXG4gKiBkZXByZWNhdGVkLlxuICpcbiAqIE5vdGU6IFRoaXMgcnVsZSBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHBhcnQgb2YgdGhlIFZhbGlkYXRpb24gc2VjdGlvbiBvZiB0aGUgR3JhcGhRTFxuICogU3BlY2lmaWNhdGlvbi4gVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHJ1bGUgaXMgZGV0ZWN0aW9uIG9mIGRlcHJlY2F0ZWQgdXNhZ2VzIGFuZCBub3RcbiAqIG5lY2Vzc2FyaWx5IHRvIGZvcmJpZCB0aGVpciB1c2Ugd2hlbiBxdWVyeWluZyBhIHNlcnZpY2UuXG4gKi9cbmZ1bmN0aW9uIE5vRGVwcmVjYXRlZEN1c3RvbVJ1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGUpIHtcbiAgICAgIGNvbnN0IGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuICAgICAgY29uc3QgZGVwcmVjYXRpb25SZWFzb24gPVxuICAgICAgICBmaWVsZERlZiA9PT0gbnVsbCB8fCBmaWVsZERlZiA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IGZpZWxkRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICBpZiAoZmllbGREZWYgJiYgZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG4gICAgICAgIHBhcmVudFR5cGUgIT0gbnVsbCB8fCAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVGhlIGZpZWxkICR7cGFyZW50VHlwZS5uYW1lfS4ke2ZpZWxkRGVmLm5hbWV9IGlzIGRlcHJlY2F0ZWQuICR7ZGVwcmVjYXRpb25SZWFzb259YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIEFyZ3VtZW50KG5vZGUpIHtcbiAgICAgIGNvbnN0IGFyZ0RlZiA9IGNvbnRleHQuZ2V0QXJndW1lbnQoKTtcbiAgICAgIGNvbnN0IGRlcHJlY2F0aW9uUmVhc29uID1cbiAgICAgICAgYXJnRGVmID09PSBudWxsIHx8IGFyZ0RlZiA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IGFyZ0RlZi5kZXByZWNhdGlvblJlYXNvbjtcblxuICAgICAgaWYgKGFyZ0RlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZURlZiA9IGNvbnRleHQuZ2V0RGlyZWN0aXZlKCk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZURlZiAhPSBudWxsKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYERpcmVjdGl2ZSBcIkAke2RpcmVjdGl2ZURlZi5uYW1lfVwiIGFyZ3VtZW50IFwiJHthcmdEZWYubmFtZX1cIiBpcyBkZXByZWNhdGVkLiAke2RlcHJlY2F0aW9uUmVhc29ufWAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG4gICAgICAgICAgY29uc3QgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICAgICAgKHBhcmVudFR5cGUgIT0gbnVsbCAmJiBmaWVsZERlZiAhPSBudWxsKSB8fFxuICAgICAgICAgICAgKDAsIF9pbnZhcmlhbnQuaW52YXJpYW50KShmYWxzZSk7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYEZpZWxkIFwiJHtwYXJlbnRUeXBlLm5hbWV9LiR7ZmllbGREZWYubmFtZX1cIiBhcmd1bWVudCBcIiR7YXJnRGVmLm5hbWV9XCIgaXMgZGVwcmVjYXRlZC4gJHtkZXByZWNhdGlvblJlYXNvbn1gLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IG5vZGUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgT2JqZWN0RmllbGQobm9kZSkge1xuICAgICAgY29uc3QgaW5wdXRPYmplY3REZWYgPSAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKShcbiAgICAgICAgY29udGV4dC5nZXRQYXJlbnRJbnB1dFR5cGUoKSxcbiAgICAgICk7XG5cbiAgICAgIGlmICgoMCwgX2RlZmluaXRpb24uaXNJbnB1dE9iamVjdFR5cGUpKGlucHV0T2JqZWN0RGVmKSkge1xuICAgICAgICBjb25zdCBpbnB1dEZpZWxkRGVmID0gaW5wdXRPYmplY3REZWYuZ2V0RmllbGRzKClbbm9kZS5uYW1lLnZhbHVlXTtcbiAgICAgICAgY29uc3QgZGVwcmVjYXRpb25SZWFzb24gPVxuICAgICAgICAgIGlucHV0RmllbGREZWYgPT09IG51bGwgfHwgaW5wdXRGaWVsZERlZiA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/IHZvaWQgMFxuICAgICAgICAgICAgOiBpbnB1dEZpZWxkRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICAgIGlmIChkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgICAgYFRoZSBpbnB1dCBmaWVsZCAke2lucHV0T2JqZWN0RGVmLm5hbWV9LiR7aW5wdXRGaWVsZERlZi5uYW1lfSBpcyBkZXByZWNhdGVkLiAke2RlcHJlY2F0aW9uUmVhc29ufWAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBFbnVtVmFsdWUobm9kZSkge1xuICAgICAgY29uc3QgZW51bVZhbHVlRGVmID0gY29udGV4dC5nZXRFbnVtVmFsdWUoKTtcbiAgICAgIGNvbnN0IGRlcHJlY2F0aW9uUmVhc29uID1cbiAgICAgICAgZW51bVZhbHVlRGVmID09PSBudWxsIHx8IGVudW1WYWx1ZURlZiA9PT0gdm9pZCAwXG4gICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICA6IGVudW1WYWx1ZURlZi5kZXByZWNhdGlvblJlYXNvbjtcblxuICAgICAgaWYgKGVudW1WYWx1ZURlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGVudW1UeXBlRGVmID0gKDAsIF9kZWZpbml0aW9uLmdldE5hbWVkVHlwZSkoXG4gICAgICAgICAgY29udGV4dC5nZXRJbnB1dFR5cGUoKSxcbiAgICAgICAgKTtcbiAgICAgICAgZW51bVR5cGVEZWYgIT0gbnVsbCB8fCAoMCwgX2ludmFyaWFudC5pbnZhcmlhbnQpKGZhbHNlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcbiAgICAgICAgICBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoXG4gICAgICAgICAgICBgVGhlIGVudW0gdmFsdWUgXCIke2VudW1UeXBlRGVmLm5hbWV9LiR7ZW51bVZhbHVlRGVmLm5hbWV9XCIgaXMgZGVwcmVjYXRlZC4gJHtkZXByZWNhdGlvblJlYXNvbn1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;\n\nvar _GraphQLError = __webpack_require__(/*! ../../../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _definition = __webpack_require__(/*! ../../../type/definition.js */ \"(ssr)/./node_modules/graphql/type/definition.js\");\n\nvar _introspection = __webpack_require__(/*! ../../../type/introspection.js */ \"(ssr)/./node_modules/graphql/type/introspection.js\");\n\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\nfunction NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field(node) {\n      const type = (0, _definition.getNamedType)(context.getType());\n\n      if (type && (0, _introspection.isIntrospectionType)(type)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `GraphQL introspection has been disabled, but the requested query contained the field \"${node.name.value}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL2N1c3RvbS9Ob1NjaGVtYUludHJvc3BlY3Rpb25DdXN0b21SdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHVDQUF1Qzs7QUFFdkMsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWdDOztBQUU1RCxrQkFBa0IsbUJBQU8sQ0FBQyxvRkFBNkI7O0FBRXZELHFCQUFxQixtQkFBTyxDQUFDLDBGQUFnQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxR0FBcUcsZ0JBQWdCO0FBQ3JIO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvY3VzdG9tL05vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUuanM/MDgxOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMuTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZSA9IE5vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGU7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLmpzJyk7XG5cbnZhciBfZGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uLy4uL3R5cGUvZGVmaW5pdGlvbi5qcycpO1xuXG52YXIgX2ludHJvc3BlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi8uLi90eXBlL2ludHJvc3BlY3Rpb24uanMnKTtcblxuLyoqXG4gKiBQcm9oaWJpdCBpbnRyb3NwZWN0aW9uIHF1ZXJpZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBub3QgZmllbGRzIHRoYXRcbiAqIHJldHVybiBhbiBpbnRyb3NwZWN0aW9uIHR5cGUuXG4gKlxuICogTm90ZTogVGhpcyBydWxlIGlzIG9wdGlvbmFsIGFuZCBpcyBub3QgcGFydCBvZiB0aGUgVmFsaWRhdGlvbiBzZWN0aW9uIG9mIHRoZVxuICogR3JhcGhRTCBTcGVjaWZpY2F0aW9uLiBUaGlzIHJ1bGUgZWZmZWN0aXZlbHkgZGlzYWJsZXMgaW50cm9zcGVjdGlvbiwgd2hpY2hcbiAqIGRvZXMgbm90IHJlZmxlY3QgYmVzdCBwcmFjdGljZXMgYW5kIHNob3VsZCBvbmx5IGJlIGRvbmUgaWYgYWJzb2x1dGVseSBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIE5vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkKG5vZGUpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSAoMCwgX2RlZmluaXRpb24uZ2V0TmFtZWRUeXBlKShjb250ZXh0LmdldFR5cGUoKSk7XG5cbiAgICAgIGlmICh0eXBlICYmICgwLCBfaW50cm9zcGVjdGlvbi5pc0ludHJvc3BlY3Rpb25UeXBlKSh0eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFxuICAgICAgICAgIG5ldyBfR3JhcGhRTEVycm9yLkdyYXBoUUxFcnJvcihcbiAgICAgICAgICAgIGBHcmFwaFFMIGludHJvc3BlY3Rpb24gaGFzIGJlZW4gZGlzYWJsZWQsIGJ1dCB0aGUgcmVxdWVzdGVkIHF1ZXJ5IGNvbnRhaW5lZCB0aGUgZmllbGQgXCIke25vZGUubmFtZS52YWx1ZX1cIi5gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/specifiedRules.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql/validation/specifiedRules.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.specifiedSDLRules =\n  exports.specifiedRules =\n  exports.recommendedRules =\n    void 0;\n\nvar _ExecutableDefinitionsRule = __webpack_require__(/*! ./rules/ExecutableDefinitionsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js\");\n\nvar _FieldsOnCorrectTypeRule = __webpack_require__(/*! ./rules/FieldsOnCorrectTypeRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js\");\n\nvar _FragmentsOnCompositeTypesRule = __webpack_require__(/*! ./rules/FragmentsOnCompositeTypesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js\");\n\nvar _KnownArgumentNamesRule = __webpack_require__(/*! ./rules/KnownArgumentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownArgumentNamesRule.js\");\n\nvar _KnownDirectivesRule = __webpack_require__(/*! ./rules/KnownDirectivesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownDirectivesRule.js\");\n\nvar _KnownFragmentNamesRule = __webpack_require__(/*! ./rules/KnownFragmentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownFragmentNamesRule.js\");\n\nvar _KnownTypeNamesRule = __webpack_require__(/*! ./rules/KnownTypeNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/KnownTypeNamesRule.js\");\n\nvar _LoneAnonymousOperationRule = __webpack_require__(/*! ./rules/LoneAnonymousOperationRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js\");\n\nvar _LoneSchemaDefinitionRule = __webpack_require__(/*! ./rules/LoneSchemaDefinitionRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js\");\n\nvar _MaxIntrospectionDepthRule = __webpack_require__(/*! ./rules/MaxIntrospectionDepthRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js\");\n\nvar _NoFragmentCyclesRule = __webpack_require__(/*! ./rules/NoFragmentCyclesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoFragmentCyclesRule.js\");\n\nvar _NoUndefinedVariablesRule = __webpack_require__(/*! ./rules/NoUndefinedVariablesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js\");\n\nvar _NoUnusedFragmentsRule = __webpack_require__(/*! ./rules/NoUnusedFragmentsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js\");\n\nvar _NoUnusedVariablesRule = __webpack_require__(/*! ./rules/NoUnusedVariablesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/NoUnusedVariablesRule.js\");\n\nvar _OverlappingFieldsCanBeMergedRule = __webpack_require__(/*! ./rules/OverlappingFieldsCanBeMergedRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js\");\n\nvar _PossibleFragmentSpreadsRule = __webpack_require__(/*! ./rules/PossibleFragmentSpreadsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js\");\n\nvar _PossibleTypeExtensionsRule = __webpack_require__(/*! ./rules/PossibleTypeExtensionsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js\");\n\nvar _ProvidedRequiredArgumentsRule = __webpack_require__(/*! ./rules/ProvidedRequiredArgumentsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js\");\n\nvar _ScalarLeafsRule = __webpack_require__(/*! ./rules/ScalarLeafsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ScalarLeafsRule.js\");\n\nvar _SingleFieldSubscriptionsRule = __webpack_require__(/*! ./rules/SingleFieldSubscriptionsRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js\");\n\nvar _UniqueArgumentDefinitionNamesRule = __webpack_require__(/*! ./rules/UniqueArgumentDefinitionNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js\");\n\nvar _UniqueArgumentNamesRule = __webpack_require__(/*! ./rules/UniqueArgumentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js\");\n\nvar _UniqueDirectiveNamesRule = __webpack_require__(/*! ./rules/UniqueDirectiveNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js\");\n\nvar _UniqueDirectivesPerLocationRule = __webpack_require__(/*! ./rules/UniqueDirectivesPerLocationRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js\");\n\nvar _UniqueEnumValueNamesRule = __webpack_require__(/*! ./rules/UniqueEnumValueNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js\");\n\nvar _UniqueFieldDefinitionNamesRule = __webpack_require__(/*! ./rules/UniqueFieldDefinitionNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js\");\n\nvar _UniqueFragmentNamesRule = __webpack_require__(/*! ./rules/UniqueFragmentNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js\");\n\nvar _UniqueInputFieldNamesRule = __webpack_require__(/*! ./rules/UniqueInputFieldNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js\");\n\nvar _UniqueOperationNamesRule = __webpack_require__(/*! ./rules/UniqueOperationNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueOperationNamesRule.js\");\n\nvar _UniqueOperationTypesRule = __webpack_require__(/*! ./rules/UniqueOperationTypesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueOperationTypesRule.js\");\n\nvar _UniqueTypeNamesRule = __webpack_require__(/*! ./rules/UniqueTypeNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueTypeNamesRule.js\");\n\nvar _UniqueVariableNamesRule = __webpack_require__(/*! ./rules/UniqueVariableNamesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/UniqueVariableNamesRule.js\");\n\nvar _ValuesOfCorrectTypeRule = __webpack_require__(/*! ./rules/ValuesOfCorrectTypeRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js\");\n\nvar _VariablesAreInputTypesRule = __webpack_require__(/*! ./rules/VariablesAreInputTypesRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js\");\n\nvar _VariablesInAllowedPositionRule = __webpack_require__(/*! ./rules/VariablesInAllowedPositionRule.js */ \"(ssr)/./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js\");\n\n// Spec Section: \"Executable Definitions\"\n// Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n// Spec Section: \"Fragments on Composite Types\"\n// Spec Section: \"Argument Names\"\n// Spec Section: \"Directives Are Defined\"\n// Spec Section: \"Fragment spread target defined\"\n// Spec Section: \"Fragment Spread Type Existence\"\n// Spec Section: \"Lone Anonymous Operation\"\n// SDL-specific validation rules\n// TODO: Spec Section\n// Spec Section: \"Fragments must not form cycles\"\n// Spec Section: \"All Variable Used Defined\"\n// Spec Section: \"Fragments must be used\"\n// Spec Section: \"All Variables Used\"\n// Spec Section: \"Field Selection Merging\"\n// Spec Section: \"Fragment spread is possible\"\n// Spec Section: \"Argument Optionality\"\n// Spec Section: \"Leaf Field Selections\"\n// Spec Section: \"Subscriptions with Single Root Field\"\n// Spec Section: \"Argument Uniqueness\"\n// Spec Section: \"Directives Are Unique Per Location\"\n// Spec Section: \"Fragment Name Uniqueness\"\n// Spec Section: \"Input Object Field Uniqueness\"\n// Spec Section: \"Operation Name Uniqueness\"\n// Spec Section: \"Variable Uniqueness\"\n// Spec Section: \"Value Type Correctness\"\n// Spec Section: \"Variables are Input Types\"\n// Spec Section: \"All Variable Usages Are Allowed\"\n\n/**\n * Technically these aren't part of the spec but they are strongly encouraged\n * validation rules.\n */\nconst recommendedRules = Object.freeze([\n  _MaxIntrospectionDepthRule.MaxIntrospectionDepthRule,\n]);\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexports.recommendedRules = recommendedRules;\nconst specifiedRules = Object.freeze([\n  _ExecutableDefinitionsRule.ExecutableDefinitionsRule,\n  _UniqueOperationNamesRule.UniqueOperationNamesRule,\n  _LoneAnonymousOperationRule.LoneAnonymousOperationRule,\n  _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule,\n  _KnownTypeNamesRule.KnownTypeNamesRule,\n  _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule,\n  _VariablesAreInputTypesRule.VariablesAreInputTypesRule,\n  _ScalarLeafsRule.ScalarLeafsRule,\n  _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule,\n  _UniqueFragmentNamesRule.UniqueFragmentNamesRule,\n  _KnownFragmentNamesRule.KnownFragmentNamesRule,\n  _NoUnusedFragmentsRule.NoUnusedFragmentsRule,\n  _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule,\n  _NoFragmentCyclesRule.NoFragmentCyclesRule,\n  _UniqueVariableNamesRule.UniqueVariableNamesRule,\n  _NoUndefinedVariablesRule.NoUndefinedVariablesRule,\n  _NoUnusedVariablesRule.NoUnusedVariablesRule,\n  _KnownDirectivesRule.KnownDirectivesRule,\n  _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,\n  _KnownArgumentNamesRule.KnownArgumentNamesRule,\n  _UniqueArgumentNamesRule.UniqueArgumentNamesRule,\n  _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule,\n  _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule,\n  _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule,\n  _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule,\n  _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,\n  ...recommendedRules,\n]);\n/**\n * @internal\n */\n\nexports.specifiedRules = specifiedRules;\nconst specifiedSDLRules = Object.freeze([\n  _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule,\n  _UniqueOperationTypesRule.UniqueOperationTypesRule,\n  _UniqueTypeNamesRule.UniqueTypeNamesRule,\n  _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule,\n  _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule,\n  _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule,\n  _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule,\n  _KnownTypeNamesRule.KnownTypeNamesRule,\n  _KnownDirectivesRule.KnownDirectivesRule,\n  _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,\n  _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule,\n  _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule,\n  _UniqueArgumentNamesRule.UniqueArgumentNamesRule,\n  _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,\n  _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule,\n]);\nexports.specifiedSDLRules = specifiedSDLRules;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/specifiedRules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/validation/validate.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/validation/validate.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.assertValidSDL = assertValidSDL;\nexports.assertValidSDLExtension = assertValidSDLExtension;\nexports.validate = validate;\nexports.validateSDL = validateSDL;\n\nvar _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.js\");\n\nvar _GraphQLError = __webpack_require__(/*! ../error/GraphQLError.js */ \"(ssr)/./node_modules/graphql/error/GraphQLError.js\");\n\nvar _visitor = __webpack_require__(/*! ../language/visitor.js */ \"(ssr)/./node_modules/graphql/language/visitor.js\");\n\nvar _validate = __webpack_require__(/*! ../type/validate.js */ \"(ssr)/./node_modules/graphql/type/validate.js\");\n\nvar _TypeInfo = __webpack_require__(/*! ../utilities/TypeInfo.js */ \"(ssr)/./node_modules/graphql/utilities/TypeInfo.js\");\n\nvar _specifiedRules = __webpack_require__(/*! ./specifiedRules.js */ \"(ssr)/./node_modules/graphql/validation/specifiedRules.js\");\n\nvar _ValidationContext = __webpack_require__(/*! ./ValidationContext.js */ \"(ssr)/./node_modules/graphql/validation/ValidationContext.js\");\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\nfunction validate(\n  schema,\n  documentAST,\n  rules = _specifiedRules.specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new _TypeInfo.TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new _ValidationContext.ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new _GraphQLError.GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = (0, _visitor.visitInParallel)(\n    rules.map((rule) => rule(context)),\n  ); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    (0, _visitor.visit)(\n      documentAST,\n      (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor),\n    );\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nfunction validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = _specifiedRules.specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new _ValidationContext.SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3ZhbGlkYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLHNCQUFzQjtBQUN0QiwrQkFBK0I7QUFDL0IsZ0JBQWdCO0FBQ2hCLG1CQUFtQjs7QUFFbkIsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQXlCOztBQUVsRCxvQkFBb0IsbUJBQU8sQ0FBQyxvRkFBMEI7O0FBRXRELGVBQWUsbUJBQU8sQ0FBQyxnRkFBd0I7O0FBRS9DLGdCQUFnQixtQkFBTyxDQUFDLDBFQUFxQjs7QUFFN0MsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQTBCOztBQUVsRCxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBcUI7O0FBRW5ELHlCQUF5QixtQkFBTyxDQUFDLDRGQUF3Qjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkU7O0FBRTdFO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzdGVybWluZHMtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3ZhbGlkYXRlLmpzPzgzMDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlLFxufSk7XG5leHBvcnRzLmFzc2VydFZhbGlkU0RMID0gYXNzZXJ0VmFsaWRTREw7XG5leHBvcnRzLmFzc2VydFZhbGlkU0RMRXh0ZW5zaW9uID0gYXNzZXJ0VmFsaWRTRExFeHRlbnNpb247XG5leHBvcnRzLnZhbGlkYXRlID0gdmFsaWRhdGU7XG5leHBvcnRzLnZhbGlkYXRlU0RMID0gdmFsaWRhdGVTREw7XG5cbnZhciBfZGV2QXNzZXJ0ID0gcmVxdWlyZSgnLi4vanN1dGlscy9kZXZBc3NlcnQuanMnKTtcblxudmFyIF9HcmFwaFFMRXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvci9HcmFwaFFMRXJyb3IuanMnKTtcblxudmFyIF92aXNpdG9yID0gcmVxdWlyZSgnLi4vbGFuZ3VhZ2UvdmlzaXRvci5qcycpO1xuXG52YXIgX3ZhbGlkYXRlID0gcmVxdWlyZSgnLi4vdHlwZS92YWxpZGF0ZS5qcycpO1xuXG52YXIgX1R5cGVJbmZvID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL1R5cGVJbmZvLmpzJyk7XG5cbnZhciBfc3BlY2lmaWVkUnVsZXMgPSByZXF1aXJlKCcuL3NwZWNpZmllZFJ1bGVzLmpzJyk7XG5cbnZhciBfVmFsaWRhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL1ZhbGlkYXRpb25Db250ZXh0LmpzJyk7XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJWYWxpZGF0aW9uXCIgc2VjdGlvbiBvZiB0aGUgc3BlYy5cbiAqXG4gKiBWYWxpZGF0aW9uIHJ1bnMgc3luY2hyb25vdXNseSwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGVuY291bnRlcmVkIGVycm9ycywgb3JcbiAqIGFuIGVtcHR5IGFycmF5IGlmIG5vIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkIGFuZCB0aGUgZG9jdW1lbnQgaXMgdmFsaWQuXG4gKlxuICogQSBsaXN0IG9mIHNwZWNpZmljIHZhbGlkYXRpb24gcnVsZXMgbWF5IGJlIHByb3ZpZGVkLiBJZiBub3QgcHJvdmlkZWQsIHRoZVxuICogZGVmYXVsdCBsaXN0IG9mIHJ1bGVzIGRlZmluZWQgYnkgdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbiB3aWxsIGJlIHVzZWQuXG4gKlxuICogRWFjaCB2YWxpZGF0aW9uIHJ1bGVzIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZpc2l0b3JcbiAqIChzZWUgdGhlIGxhbmd1YWdlL3Zpc2l0b3IgQVBJKS4gVmlzaXRvciBtZXRob2RzIGFyZSBleHBlY3RlZCB0byByZXR1cm5cbiAqIEdyYXBoUUxFcnJvcnMsIG9yIEFycmF5cyBvZiBHcmFwaFFMRXJyb3JzIHdoZW4gaW52YWxpZC5cbiAqXG4gKiBWYWxpZGF0ZSB3aWxsIHN0b3AgdmFsaWRhdGlvbiBhZnRlciBhIGBtYXhFcnJvcnNgIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQuXG4gKiBBdHRhY2tlcnMgY2FuIHNlbmQgcGF0aG9sb2dpY2FsbHkgaW52YWxpZCBxdWVyaWVzIHRvIGluZHVjZSBhIERvUyBhdHRhY2ssXG4gKiBzbyBieSBkZWZhdWx0IGBtYXhFcnJvcnNgIHNldCB0byAxMDAgZXJyb3JzLlxuICpcbiAqIE9wdGlvbmFsbHkgYSBjdXN0b20gVHlwZUluZm8gaW5zdGFuY2UgbWF5IGJlIHByb3ZpZGVkLiBJZiBub3QgcHJvdmlkZWQsIG9uZVxuICogd2lsbCBiZSBjcmVhdGVkIGZyb20gdGhlIHByb3ZpZGVkIHNjaGVtYS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGUoXG4gIHNjaGVtYSxcbiAgZG9jdW1lbnRBU1QsXG4gIHJ1bGVzID0gX3NwZWNpZmllZFJ1bGVzLnNwZWNpZmllZFJ1bGVzLFxuICBvcHRpb25zLFxuICAvKiogQGRlcHJlY2F0ZWQgd2lsbCBiZSByZW1vdmVkIGluIDE3LjAuMCAqL1xuICB0eXBlSW5mbyA9IG5ldyBfVHlwZUluZm8uVHlwZUluZm8oc2NoZW1hKSxcbikge1xuICB2YXIgX29wdGlvbnMkbWF4RXJyb3JzO1xuXG4gIGNvbnN0IG1heEVycm9ycyA9XG4gICAgKF9vcHRpb25zJG1heEVycm9ycyA9XG4gICAgICBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWF4RXJyb3JzKSAhPT1cbiAgICAgIG51bGwgJiYgX29wdGlvbnMkbWF4RXJyb3JzICE9PSB2b2lkIDBcbiAgICAgID8gX29wdGlvbnMkbWF4RXJyb3JzXG4gICAgICA6IDEwMDtcbiAgZG9jdW1lbnRBU1QgfHwgKDAsIF9kZXZBc3NlcnQuZGV2QXNzZXJ0KShmYWxzZSwgJ011c3QgcHJvdmlkZSBkb2N1bWVudC4nKTsgLy8gSWYgdGhlIHNjaGVtYSB1c2VkIGZvciB2YWxpZGF0aW9uIGlzIGludmFsaWQsIHRocm93IGFuIGVycm9yLlxuXG4gICgwLCBfdmFsaWRhdGUuYXNzZXJ0VmFsaWRTY2hlbWEpKHNjaGVtYSk7XG4gIGNvbnN0IGFib3J0T2JqID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuICBjb25zdCBjb250ZXh0ID0gbmV3IF9WYWxpZGF0aW9uQ29udGV4dC5WYWxpZGF0aW9uQ29udGV4dChcbiAgICBzY2hlbWEsXG4gICAgZG9jdW1lbnRBU1QsXG4gICAgdHlwZUluZm8sXG4gICAgKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+PSBtYXhFcnJvcnMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goXG4gICAgICAgICAgbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFxuICAgICAgICAgICAgJ1RvbyBtYW55IHZhbGlkYXRpb24gZXJyb3JzLCBlcnJvciBsaW1pdCByZWFjaGVkLiBWYWxpZGF0aW9uIGFib3J0ZWQuJyxcbiAgICAgICAgICApLFxuICAgICAgICApOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRocm93LWxpdGVyYWxcblxuICAgICAgICB0aHJvdyBhYm9ydE9iajtcbiAgICAgIH1cblxuICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH0sXG4gICk7IC8vIFRoaXMgdXNlcyBhIHNwZWNpYWxpemVkIHZpc2l0b3Igd2hpY2ggcnVucyBtdWx0aXBsZSB2aXNpdG9ycyBpbiBwYXJhbGxlbCxcbiAgLy8gd2hpbGUgbWFpbnRhaW5pbmcgdGhlIHZpc2l0b3Igc2tpcCBhbmQgYnJlYWsgQVBJLlxuXG4gIGNvbnN0IHZpc2l0b3IgPSAoMCwgX3Zpc2l0b3IudmlzaXRJblBhcmFsbGVsKShcbiAgICBydWxlcy5tYXAoKHJ1bGUpID0+IHJ1bGUoY29udGV4dCkpLFxuICApOyAvLyBWaXNpdCB0aGUgd2hvbGUgZG9jdW1lbnQgd2l0aCBlYWNoIGluc3RhbmNlIG9mIGFsbCBwcm92aWRlZCBydWxlcy5cblxuICB0cnkge1xuICAgICgwLCBfdmlzaXRvci52aXNpdCkoXG4gICAgICBkb2N1bWVudEFTVCxcbiAgICAgICgwLCBfVHlwZUluZm8udmlzaXRXaXRoVHlwZUluZm8pKHR5cGVJbmZvLCB2aXNpdG9yKSxcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgIT09IGFib3J0T2JqKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJvcnM7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlU0RMKFxuICBkb2N1bWVudEFTVCxcbiAgc2NoZW1hVG9FeHRlbmQsXG4gIHJ1bGVzID0gX3NwZWNpZmllZFJ1bGVzLnNwZWNpZmllZFNETFJ1bGVzLFxuKSB7XG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuICBjb25zdCBjb250ZXh0ID0gbmV3IF9WYWxpZGF0aW9uQ29udGV4dC5TRExWYWxpZGF0aW9uQ29udGV4dChcbiAgICBkb2N1bWVudEFTVCxcbiAgICBzY2hlbWFUb0V4dGVuZCxcbiAgICAoZXJyb3IpID0+IHtcbiAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICB9LFxuICApO1xuICBjb25zdCB2aXNpdG9ycyA9IHJ1bGVzLm1hcCgocnVsZSkgPT4gcnVsZShjb250ZXh0KSk7XG4gICgwLCBfdmlzaXRvci52aXNpdCkoZG9jdW1lbnRBU1QsICgwLCBfdmlzaXRvci52aXNpdEluUGFyYWxsZWwpKHZpc2l0b3JzKSk7XG4gIHJldHVybiBlcnJvcnM7XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gd2hpY2ggYXNzZXJ0cyBhIFNETCBkb2N1bWVudCBpcyB2YWxpZCBieSB0aHJvd2luZyBhbiBlcnJvclxuICogaWYgaXQgaXMgaW52YWxpZC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFNETChkb2N1bWVudEFTVCkge1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVNETChkb2N1bWVudEFTVCk7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLm1hcCgoZXJyb3IpID0+IGVycm9yLm1lc3NhZ2UpLmpvaW4oJ1xcblxcbicpKTtcbiAgfVxufVxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHdoaWNoIGFzc2VydHMgYSBTREwgZG9jdW1lbnQgaXMgdmFsaWQgYnkgdGhyb3dpbmcgYW4gZXJyb3JcbiAqIGlmIGl0IGlzIGludmFsaWQuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0VmFsaWRTRExFeHRlbnNpb24oZG9jdW1lbnRBU1QsIHNjaGVtYSkge1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVNETChkb2N1bWVudEFTVCwgc2NoZW1hKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/validation/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/version.js":
/*!*****************************************!*\
  !*** ./node_modules/graphql/version.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.versionInfo = exports.version = void 0;\n// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nconst version = '16.11.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexports.version = version;\nconst versionInfo = Object.freeze({\n  major: 16,\n  minor: 11,\n  patch: 0,\n  preReleaseTag: null,\n});\nexports.versionInfo = versionInfo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG1CQUFtQixHQUFHLGVBQWU7QUFDckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXN0ZXJtaW5kcy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZlcnNpb24uanM/ZjE1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWUsXG59KTtcbmV4cG9ydHMudmVyc2lvbkluZm8gPSBleHBvcnRzLnZlcnNpb24gPSB2b2lkIDA7XG4vLyBOb3RlOiBUaGlzIGZpbGUgaXMgYXV0b2dlbmVyYXRlZCB1c2luZyBcInJlc291cmNlcy9nZW4tdmVyc2lvbi5qc1wiIHNjcmlwdCBhbmRcbi8vIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCBieSBcIm5wbSB2ZXJzaW9uXCIgY29tbWFuZC5cblxuLyoqXG4gKiBBIHN0cmluZyBjb250YWluaW5nIHRoZSB2ZXJzaW9uIG9mIHRoZSBHcmFwaFFMLmpzIGxpYnJhcnlcbiAqL1xuY29uc3QgdmVyc2lvbiA9ICcxNi4xMS4wJztcbi8qKlxuICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNvbXBvbmVudHMgb2YgdGhlIEdyYXBoUUwuanMgdmVyc2lvbiBzdHJpbmdcbiAqL1xuXG5leHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xuY29uc3QgdmVyc2lvbkluZm8gPSBPYmplY3QuZnJlZXplKHtcbiAgbWFqb3I6IDE2LFxuICBtaW5vcjogMTEsXG4gIHBhdGNoOiAwLFxuICBwcmVSZWxlYXNlVGFnOiBudWxsLFxufSk7XG5leHBvcnRzLnZlcnNpb25JbmZvID0gdmVyc2lvbkluZm87XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/version.js\n");

/***/ })

};
;